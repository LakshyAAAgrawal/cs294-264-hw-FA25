diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d1..546ffdfb7 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -510,30 +510,51 @@ class InheritDocstrings(type):
 
         >>> from astropy.utils.misc import InheritDocstrings
         >>> class A(metaclass=InheritDocstrings):
-        ...     def wiggle(self):
-        ...         "Wiggle the thingamajig"
-        ...         pass
-        >>> class B(A):
-        ...     def wiggle(self):
-        ...         pass
-        >>> B.wiggle.__doc__
-        u'Wiggle the thingamajig'
     """
-
     def __init__(cls, name, bases, dct):
         def is_public_member(key):
             return (
-                (key.startswith('__') and key.endswith('__')
-                 and len(key) > 4) or
-                not key.startswith('_'))
+                (key.startswith('__') and key.endswith('__') and len(key) > 4) or
+                not key.startswith('_')
+            )
 
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
-                is_public_member(key) and
-                val.__doc__ is None):
-                for base in cls.__mro__[1:]:
-                    super_method = getattr(base, key, None)
-                    if super_method is not None:
+            # support functions, properties, classmethod and staticmethod
+            is_func = inspect.isfunction(val)
+            is_prop = isinstance(val, property)
+            is_cm_sm = isinstance(val, (classmethod, staticmethod))
+            if (is_func or is_prop or is_cm_sm) and is_public_member(key):
+                cur_doc = (val.__doc__ if is_func else
+                           (val.fget.__doc__ if is_prop and val.fget is not None else
+                            (getattr(val, "__func__", None).__doc__ if getattr(val, "__func__", None) is not None else None)))
+                if cur_doc is None:
+                    for base in cls.__mro__[1:]:
+                        super_method = getattr(base, key, None)
+                        if super_method is not None:
+                            if isinstance(super_method, property):
+                                doc = super_method.fget.__doc__ if super_method.fget is not None else super_method.__doc__
+                            elif isinstance(super_method, (classmethod, staticmethod)):
+                                func = getattr(super_method, "__func__", None)
+                                doc = func.__doc__ if func is not None else super_method.__doc__
+                            else:
+                                doc = super_method.__doc__
+                            if is_func:
+                                val.__doc__ = doc
+                            elif is_prop and val.fget is not None:
+                                val.fget.__doc__ = doc
+                            else:
+                                # classmethod/staticmethod: set underlying function doc if possible
+                                funcobj = getattr(val, "__func__", None)
+                                if funcobj is not None:
+                                    funcobj.__doc__ = doc
+                                else:
+                                    # fallback: set on the object itself
+                                    val.__doc__ = doc
+                            break
+
+
+                            val.fget.__doc__ = doc
+
                         val.__doc__ = super_method.__doc__
                         break