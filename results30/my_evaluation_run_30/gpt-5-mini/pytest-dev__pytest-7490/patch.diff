diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py
index 560548aea..66cc9cac0 100644
--- a/src/_pytest/nodes.py
+++ b/src/_pytest/nodes.py
@@ -2,7 +2,6 @@ import os
 import warnings
 from functools import lru_cache
 from typing import Callable
-from typing import Dict
 from typing import Iterable
 from typing import Iterator
 from typing import List
@@ -20,13 +19,13 @@ from _pytest._code import getfslineno
 from _pytest._code.code import ExceptionInfo
 from _pytest._code.code import TerminalRepr
 from _pytest.compat import cached_property
-from _pytest.compat import overload
+
 from _pytest.compat import TYPE_CHECKING
 from _pytest.config import Config
 from _pytest.config import ConftestImportFailure
 from _pytest.config import PytestPluginManager
 from _pytest.deprecated import NODE_USE_FROM_PARENT
-from _pytest.fixtures import FixtureDef
+
 from _pytest.fixtures import FixtureLookupError
 from _pytest.mark.structures import Mark
 from _pytest.mark.structures import MarkDecorator
@@ -281,6 +280,19 @@ class Node(metaclass=NodeMeta):
             self.own_markers.append(marker_.mark)
         else:
             self.own_markers.insert(0, marker_.mark)
+        # If an xfail/skip evaluation was cached on this node, invalidate it so
+        # dynamically-added markers (e.g., xfail added during setup) are
+        # re-evaluated when runtest hooks run.
+        try:
+            from _pytest.skipping import xfailed_key
+        except Exception:
+            xfailed_key = None
+        if xfailed_key is not None and xfailed_key in self._store:
+            try:
+                del self._store[xfailed_key]
+            except KeyError:
+                # defensive: ignore if already removed
+                pass
 
     def iter_markers(self, name: Optional[str] = None) -> Iterator[Mark]:
         """
@@ -304,12 +316,6 @@ class Node(metaclass=NodeMeta):
                 if name is None or getattr(mark, "name", None) == name:
                     yield node, mark
 
-    @overload
-    def get_closest_marker(self, name: str) -> Optional[Mark]:
-        raise NotImplementedError()
-
-    @overload  # noqa: F811
-    def get_closest_marker(self, name: str, default: Mark) -> Mark:  # noqa: F811
         raise NotImplementedError()
 
     def get_closest_marker(  # noqa: F811