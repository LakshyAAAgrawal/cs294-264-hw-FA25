diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py
index fe52d881d..41394ec98 100644
--- a/sphinx/domains/cpp.py
+++ b/sphinx/domains/cpp.py
@@ -4662,18 +4662,37 @@ class DefinitionParser(BaseParser):
                       integer_literal_re, octal_literal_re]:
             pos = self.pos
             if self.match(regex):
+                # consume standard suffix characters first (e.g., U, L, f, F)
                 while self.current_char in 'uUlLfF':
                     self.pos += 1
+                # also accept a user-defined-literal suffix (identifier) and
+                # consume it so parsing does not leave trailing text.
+                # Example: 6.62607015e-34q_J or 1q_s
+                if self.match(identifier_re):
+                    # identifier_re advances self.pos via match()
+                    pass
                 return ASTNumberLiteral(self.definition[pos:self.pos])
-
+    
+    
+        # string literal -- preserve the raw text (so we can include any UDL
+        # suffix) by recording the start position and slicing the definition.
+        pos = self.pos
         string = self._parse_string()
         if string is not None:
+            # If an identifier UDL suffix follows, consume it and include in the
+            # returned literal text to avoid leaving unparsed characters.
+            if self.match(identifier_re):
+                return ASTStringLiteral(self.definition[pos:self.pos])
             return ASTStringLiteral(string)
-
+    
+    
         # character-literal
         if self.match(char_literal_re):
             prefix = self.last_match.group(1)  # may be None when no prefix
             data = self.last_match.group(2)
+            # consume a following identifier-style UDL suffix if present
+            if self.match(identifier_re):
+                pass
             try:
                 return ASTCharLiteral(prefix, data)
             except UnicodeDecodeError as e:
@@ -4681,6 +4700,10 @@ class DefinitionParser(BaseParser):
             except UnsupportedMultiCharacterCharLiteral:
                 self.fail("Can not handle character literal"
                           " resulting in multiple decoded characters.")
+    
+    
+        # TODO: user-defined lit
+        return None
 
         # TODO: user-defined lit
         return None