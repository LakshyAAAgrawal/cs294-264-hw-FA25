2025-10-04 14:03:06,755 - INFO - Creating container for django__django-10973...
2025-10-04 14:03:07,133 - INFO - Container for django__django-10973 created: 540ab1772ebd7cf444d526aaf40a1bda11d92fc22a05708be6850cbee7a0c51c
2025-10-04 14:03:07,275 - INFO - Container for django__django-10973 started: 540ab1772ebd7cf444d526aaf40a1bda11d92fc22a05708be6850cbee7a0c51c
2025-10-04 14:03:07,276 - INFO - Intermediate patch for django__django-10973 written to logs/run_evaluation/my_evaluation_run_30/gpt-5-mini/django__django-10973/patch.diff, now applying to container...
2025-10-04 14:03:07,503 - INFO - >>>>> Applied Patch:
Checking patch django/db/backends/postgresql/client.py...
Applied patch django/db/backends/postgresql/client.py cleanly.

2025-10-04 14:03:08,103 - INFO - Git diff before:
diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index 7fca6eff30..29d37f4b53 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -2,7 +2,6 @@ import os
 import signal
 import subprocess
 
-from django.core.files.temp import NamedTemporaryFile
 from django.db.backends.base.client import BaseDatabaseClient
 
 
@@ -34,38 +33,19 @@ class DatabaseClient(BaseDatabaseClient):
             args += ['-p', str(port)]
         args += [dbname]
 
-        temp_pgpass = None
         sigint_handler = signal.getsignal(signal.SIGINT)
         try:
-            if passwd:
-                # Create temporary .pgpass file.
-                temp_pgpass = NamedTemporaryFile(mode='w+')
-                try:
-                    print(
-                        _escape_pgpass(host) or '*',
-                        str(port) or '*',
-                        _escape_pgpass(dbname) or '*',
-                        _escape_pgpass(user) or '*',
-                        _escape_pgpass(passwd),
-                        file=temp_pgpass,
-                        sep=':',
-                        flush=True,
-                    )
-                    os.environ['PGPASSFILE'] = temp_pgpass.name
-                except UnicodeEncodeError:
-                    # If the current locale can't encode the data, let the
-                    # user input the password manually.
-                    pass
             # Allow SIGINT to pass to psql to abort queries.
             signal.signal(signal.SIGINT, signal.SIG_IGN)
-            subprocess.check_call(args)
+            # If a password is provided, pass it to the subprocess via the
+            # PGPASSWORD environment variable instead of creating a .pgpass file.
+            env = os.environ.copy() if passwd else None
+            if passwd:
+                env['PGPASSWORD'] = passwd
+            subprocess.run(args, env=env, check=True)
         finally:
             # Restore the original SIGINT handler.
             signal.signal(signal.SIGINT, sigint_handler)
-            if temp_pgpass:
-                temp_pgpass.close()
-                if 'PGPASSFILE' in os.environ:  # unit tests need cleanup
-                    del os.environ['PGPASSFILE']
 
     def runshell(self):
-        DatabaseClient.runshell_db(self.connection.get_connection_params())
+        DatabaseClient.runshell_db(self.connection.get_connection_params())
\ No newline at end of file
2025-10-04 14:03:08,104 - INFO - Eval script for django__django-10973 written to logs/run_evaluation/my_evaluation_run_30/gpt-5-mini/django__django-10973/eval.sh; copying to container...
2025-10-04 14:03:30,299 - INFO - Test runtime: 22.13 seconds
2025-10-04 14:03:30,300 - INFO - Test output for django__django-10973 written to logs/run_evaluation/my_evaluation_run_30/gpt-5-mini/django__django-10973/test_output.txt
2025-10-04 14:03:30,489 - INFO - Git diff after:
diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index 7fca6eff30..29d37f4b53 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -2,7 +2,6 @@ import os
 import signal
 import subprocess
 
-from django.core.files.temp import NamedTemporaryFile
 from django.db.backends.base.client import BaseDatabaseClient
 
 
@@ -34,38 +33,19 @@ class DatabaseClient(BaseDatabaseClient):
             args += ['-p', str(port)]
         args += [dbname]
 
-        temp_pgpass = None
         sigint_handler = signal.getsignal(signal.SIGINT)
         try:
-            if passwd:
-                # Create temporary .pgpass file.
-                temp_pgpass = NamedTemporaryFile(mode='w+')
-                try:
-                    print(
-                        _escape_pgpass(host) or '*',
-                        str(port) or '*',
-                        _escape_pgpass(dbname) or '*',
-                        _escape_pgpass(user) or '*',
-                        _escape_pgpass(passwd),
-                        file=temp_pgpass,
-                        sep=':',
-                        flush=True,
-                    )
-                    os.environ['PGPASSFILE'] = temp_pgpass.name
-                except UnicodeEncodeError:
-                    # If the current locale can't encode the data, let the
-                    # user input the password manually.
-                    pass
             # Allow SIGINT to pass to psql to abort queries.
             signal.signal(signal.SIGINT, signal.SIG_IGN)
-            subprocess.check_call(args)
+            # If a password is provided, pass it to the subprocess via the
+            # PGPASSWORD environment variable instead of creating a .pgpass file.
+            env = os.environ.copy() if passwd else None
+            if passwd:
+                env['PGPASSWORD'] = passwd
+            subprocess.run(args, env=env, check=True)
         finally:
             # Restore the original SIGINT handler.
             signal.signal(signal.SIGINT, sigint_handler)
-            if temp_pgpass:
-                temp_pgpass.close()
-                if 'PGPASSFILE' in os.environ:  # unit tests need cleanup
-                    del os.environ['PGPASSFILE']
 
     def runshell(self):
-        DatabaseClient.runshell_db(self.connection.get_connection_params())
+        DatabaseClient.runshell_db(self.connection.get_connection_params())
\ No newline at end of file
2025-10-04 14:03:30,489 - INFO - Grading answer for django__django-10973...
2025-10-04 14:03:30,490 - INFO - report: {'django__django-10973': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': ['test_accent (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)', 'test_basic (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)', 'test_column (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)', 'SIGINT is ignored in Python and passed to psql to abort quries.'], 'failure': ['test_nopass (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)']}, 'PASS_TO_PASS': {'success': [], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for django__django-10973: resolved: False
2025-10-04 14:03:30,491 - INFO - Attempting to stop container sweb.eval.django__django-10973.my_evaluation_run_30...
2025-10-04 14:03:45,843 - INFO - Attempting to remove container sweb.eval.django__django-10973.my_evaluation_run_30...
2025-10-04 14:03:45,900 - INFO - Container sweb.eval.django__django-10973.my_evaluation_run_30 removed.
2025-10-04 14:03:45,900 - INFO - Attempting to remove image swebench/sweb.eval.x86_64.django_1776_django-10973:latest...
2025-10-04 14:03:46,373 - INFO - Image swebench/sweb.eval.x86_64.django_1776_django-10973:latest removed.
