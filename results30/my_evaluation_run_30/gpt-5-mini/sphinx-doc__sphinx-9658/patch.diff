diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py
index 87707d48f..ed3f02ebb 100644
--- a/sphinx/util/typing.py
+++ b/sphinx/util/typing.py
@@ -12,7 +12,7 @@ import sys
 import typing
 from struct import Struct
 from types import TracebackType
-from typing import Any, Callable, Dict, Generator, List, Optional, Tuple, Type, TypeVar, Union
+from typing import Any, Callable, Dict, Generator, List, Optional, Tuple, TypeVar, Union
 
 from docutils import nodes
 from docutils.parsers.rst.states import Inliner
@@ -146,7 +146,6 @@ def restify(cls: Optional[Type]) -> str:
     except (AttributeError, TypeError):
         return repr(cls)
 
-
 def _restify_py37(cls: Optional[Type]) -> str:
     """Convert python class to a reST reference."""
     from sphinx.util import inspect  # lazy loading
@@ -192,10 +191,12 @@ def _restify_py37(cls: Optional[Type]) -> str:
     elif isinstance(cls, typing._SpecialForm):
         return ':py:obj:`~%s.%s`' % (cls.__module__, cls._name)
     elif hasattr(cls, '__qualname__'):
+        qname = cls.__qualname__ or getattr(cls, '__name__', '')
         if cls.__module__ == 'typing':
-            return ':py:class:`~%s.%s`' % (cls.__module__, cls.__qualname__)
+            return ':py:class:`~%s.%s`' % (cls.__module__, qname)
         else:
-            return ':py:class:`%s.%s`' % (cls.__module__, cls.__qualname__)
+            return ':py:class:`%s.%s`' % (cls.__module__, qname)
+
     elif isinstance(cls, ForwardRef):
         return ':py:class:`%s`' % cls.__forward_arg__
     else: