diff --git a/requests/sessions.py b/requests/sessions.py
index a023e4e..2669547 100644
--- a/requests/sessions.py
+++ b/requests/sessions.py
@@ -11,36 +11,29 @@ requests (cookies, auth, proxies).
 import os
 from collections import Mapping
 from datetime import datetime
-
-from .compat import cookielib, OrderedDict, urljoin, urlparse, builtin_str
-from .cookies import (
-    cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar, merge_cookies)
 from .models import Request, PreparedRequest, DEFAULT_REDIRECT_LIMIT
 from .hooks import default_hooks, dispatch_hook
 from .utils import to_key_val_list, default_headers, to_native_string
 from .exceptions import TooManyRedirects, InvalidSchema
-from .structures import CaseInsensitiveDict
-
-from .adapters import HTTPAdapter
 
+from .compat import cookielib, OrderedDict, urljoin, urlparse, builtin_str
 from .utils import requote_uri, get_environ_proxies, get_netrc_auth
-
 from .status_codes import codes
-
-# formerly defined here, reexposed here for backward compatibility
-from .models import REDIRECT_STATI
-
-
+from .cookies import (
+    cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar, merge_cookies)
+from .structures import CaseInsensitiveDict
+from .adapters import HTTPAdapter
 def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
     """
     Determines appropriate setting for a given request, taking into account the
     explicit setting on that request, and the setting in the session. If a
     setting is a dictionary, they will be merged together using `dict_class`
     """
-
+    # If the session has no setting, use the request's setting.
     if session_setting is None:
         return request_setting
 
+    # If the request has no setting, use the session's setting.
     if request_setting is None:
         return session_setting
 
@@ -54,6 +47,18 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
     merged_setting = dict_class(to_key_val_list(session_setting))
     merged_setting.update(to_key_val_list(request_setting))
 
+    # Remove keys that are set to None on the request (explicitly unset).
+    for (k, v) in list(request_setting.items()):
+        if v is None:
+            merged_setting.pop(k, None)
+
+    # Also treat None in the session setting as "do not send this header"
+    # unless the request explicitly provides a value for it.
+    for (k, v) in list(session_setting.items()):
+        if v is None and k not in request_setting:
+            merged_setting.pop(k, None)
+
+    return merged_setting
     # Remove keys that are set to None.
     for (k, v) in request_setting.items():
         if v is None: