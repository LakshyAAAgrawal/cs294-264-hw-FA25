{
  "psf__requests-2931": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "psf__requests-2931",
    "model_patch": "diff --git a/requests/utils.py b/requests/utils.py\nindex 132cd2b..e288738 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -683,7 +683,7 @@ def get_auth_from_url(url):\n     return auth\n \n \n-def to_native_string(string, encoding='ascii'):\n+def to_native_string(string, encoding='utf-8'):\n     \"\"\"\n     Given a string object, regardless of type, returns a representation of that\n     string in the native string type, encoding and decoding where necessary."
  },
  "scikit-learn__scikit-learn-26323": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "scikit-learn__scikit-learn-26323",
    "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 4eddd12b1..045042a3b 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -303,6 +303,10 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n \n+        # Also set the output for the remainder transformer when it is an estimator\n+        if self.remainder not in {\"passthrough\", \"drop\"} and self.remainder is not None:\n+            _safe_set_output(self.remainder, transform=transform)\n+\n         return self\n \n     def get_params(self, deep=True):"
  },
  "django__django-7530": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-7530",
    "model_patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex 0b39536f5b..e648880ef0 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -105,7 +105,7 @@ class Command(BaseCommand):\n                     # At least one model must be migrated to the database.\n                     router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)\n                     for app_label in consistency_check_labels\n-                    for model in apps.get_models(app_label)\n+                    for model in apps.get_app_config(app_label).get_models()\n             )):\n                 loader.check_consistent_history(connection)"
  },
  "django__django-11179": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-11179",
    "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 92fe4affb9..54f82cb290 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -265,15 +265,20 @@ class Collector:\n             self.data[model] = sorted(instances, key=attrgetter(\"pk\"))\n \n         # if possible, bring the models in an order suitable for databases that\n-        # don't support transactions or cannot defer constraint checks until the\n-        # end of a transaction.\n-        self.sort()\n         # number of objects deleted for each model label\n         deleted_counter = Counter()\n \n         # Optimize for the case with a single obj and no dependencies\n         if len(self.data) == 1 and len(instances) == 1:\n             instance = list(instances)[0]\n+            if self.can_fast_delete(instance):\n+                with transaction.mark_for_rollback_on_error():\n+                    count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n+                # Clear PK on the instance to reflect deletion.\n+                setattr(instance, model._meta.pk.attname, None)\n+                return count, {model._meta.label: count}\n+            setattr(instance, model._meta.pk.attname, None)\n+            return count, {model._meta.label: count}\n             if self.can_fast_delete(instance):\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)"
  },
  "django__django-13810": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-13810",
    "model_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 8e8c3da06a..c613f63636 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -51,11 +51,12 @@ class BaseHandler:\n                 middleware_is_async = middleware_can_async\n             try:\n                 # Adapt handler, if needed.\n-                handler = self.adapt_method_mode(\n-                    middleware_is_async, handler, handler_is_async,\n-                    debug=settings.DEBUG, name='middleware %s' % middleware_path,\n-                )\n-                mw_instance = middleware(handler)\n+                  # Adapt handler, if needed.\n+                  adapted_handler = self.adapt_method_mode(\n+                      middleware_is_async, handler, handler_is_async,\n+                      debug=settings.DEBUG, name='middleware %s' % middleware_path,\n+                  )\n+                  mw_instance = middleware(adapted_handler)\n             except MiddlewareNotUsed as exc:\n                 if settings.DEBUG:\n                     if str(exc):"
  },
  "django__django-16631": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-16631",
    "model_patch": "diff --git a/docs/ref/settings.txt b/docs/ref/settings.txt\nindex 41387886c0..0f342031de 100644\n--- a/docs/ref/settings.txt\n+++ b/docs/ref/settings.txt\n@@ -2293,14 +2293,17 @@ passwords of users and key rotation will not affect them.\n \n .. setting:: SECRET_KEY_FALLBACKS\n \n-``SECRET_KEY_FALLBACKS``\n-------------------------\n-\n Default: ``[]``\n \n A list of fallback secret keys for a particular Django installation. These are\n used to allow rotation of the ``SECRET_KEY``.\n \n+In order to rotate your secret keys, set a new ``SECRET_KEY`` and move the\n+previous value to the beginning of ``SECRET_KEY_FALLBACKS``. Then remove the\n+old values from the end of the ``SECRET_KEY_FALLBACKS`` when you are ready to\n+\n+used to allow rotation of the ``SECRET_KEY``.\n+\n In order to rotate your secret keys, set a new ``SECRET_KEY`` and move the\n previous value to the beginning of ``SECRET_KEY_FALLBACKS``. Then remove the\n old values from the end of the ``SECRET_KEY_FALLBACKS`` when you are ready to"
  },
  "django__django-14011": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-14011",
    "model_patch": "diff --git a/django/test/testcases.py b/django/test/testcases.py\nindex 92f566b7b0..423b0fcc32 100644\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -1501,6 +1501,7 @@ class LiveServerThread(threading.Thread):\n             # Create the handler for serving static and media files\n             handler = self.static_handler(_MediaFilesHandler(WSGIHandler()))\n             self.httpd = self._create_server()\n+            self.httpd.daemon_threads = False\n             # If binding to port zero, assign the port allocated by the OS.\n             if self.port == 0:\n                 self.port = self.httpd.server_address[1]"
  },
  "sphinx-doc__sphinx-7590": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "sphinx-doc__sphinx-7590",
    "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex fe52d881d..41394ec98 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4662,18 +4662,37 @@ class DefinitionParser(BaseParser):\n                       integer_literal_re, octal_literal_re]:\n             pos = self.pos\n             if self.match(regex):\n+                # consume standard suffix characters first (e.g., U, L, f, F)\n                 while self.current_char in 'uUlLfF':\n                     self.pos += 1\n+                # also accept a user-defined-literal suffix (identifier) and\n+                # consume it so parsing does not leave trailing text.\n+                # Example: 6.62607015e-34q_J or 1q_s\n+                if self.match(identifier_re):\n+                    # identifier_re advances self.pos via match()\n+                    pass\n                 return ASTNumberLiteral(self.definition[pos:self.pos])\n-\n+    \n+    \n+        # string literal -- preserve the raw text (so we can include any UDL\n+        # suffix) by recording the start position and slicing the definition.\n+        pos = self.pos\n         string = self._parse_string()\n         if string is not None:\n+            # If an identifier UDL suffix follows, consume it and include in the\n+            # returned literal text to avoid leaving unparsed characters.\n+            if self.match(identifier_re):\n+                return ASTStringLiteral(self.definition[pos:self.pos])\n             return ASTStringLiteral(string)\n-\n+    \n+    \n         # character-literal\n         if self.match(char_literal_re):\n             prefix = self.last_match.group(1)  # may be None when no prefix\n             data = self.last_match.group(2)\n+            # consume a following identifier-style UDL suffix if present\n+            if self.match(identifier_re):\n+                pass\n             try:\n                 return ASTCharLiteral(prefix, data)\n             except UnicodeDecodeError as e:\n@@ -4681,6 +4700,10 @@ class DefinitionParser(BaseParser):\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n+    \n+    \n+        # TODO: user-defined lit\n+        return None\n \n         # TODO: user-defined lit\n         return None"
  },
  "sphinx-doc__sphinx-9230": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "sphinx-doc__sphinx-9230",
    "model_patch": "diff --git a/sphinx/util/docfields.py b/sphinx/util/docfields.py\nindex 3a3367ebe..7f5676b54 100644\n--- a/sphinx/util/docfields.py\n+++ b/sphinx/util/docfields.py\n@@ -238,7 +238,7 @@ class DocFieldTransformer:\n             field_body = cast(nodes.field_body, field[1])\n             try:\n                 # split into field type and argument\n-                fieldtype_name, fieldarg = field_name.astext().split(None, 1)\n+                fieldtype_name, fieldarg = field_name.astext().rsplit(None, 1)\n             except ValueError:\n                 # maybe an argument-less field type?\n                 fieldtype_name, fieldarg = field_name.astext(), ''"
  },
  "django__django-10973": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-10973",
    "model_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 7fca6eff30..29d37f4b53 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -2,7 +2,6 @@ import os\n import signal\n import subprocess\n \n-from django.core.files.temp import NamedTemporaryFile\n from django.db.backends.base.client import BaseDatabaseClient\n \n \n@@ -34,38 +33,19 @@ class DatabaseClient(BaseDatabaseClient):\n             args += ['-p', str(port)]\n         args += [dbname]\n \n-        temp_pgpass = None\n         sigint_handler = signal.getsignal(signal.SIGINT)\n         try:\n-            if passwd:\n-                # Create temporary .pgpass file.\n-                temp_pgpass = NamedTemporaryFile(mode='w+')\n-                try:\n-                    print(\n-                        _escape_pgpass(host) or '*',\n-                        str(port) or '*',\n-                        _escape_pgpass(dbname) or '*',\n-                        _escape_pgpass(user) or '*',\n-                        _escape_pgpass(passwd),\n-                        file=temp_pgpass,\n-                        sep=':',\n-                        flush=True,\n-                    )\n-                    os.environ['PGPASSFILE'] = temp_pgpass.name\n-                except UnicodeEncodeError:\n-                    # If the current locale can't encode the data, let the\n-                    # user input the password manually.\n-                    pass\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n-            subprocess.check_call(args)\n+            # If a password is provided, pass it to the subprocess via the\n+            # PGPASSWORD environment variable instead of creating a .pgpass file.\n+            env = os.environ.copy() if passwd else None\n+            if passwd:\n+                env['PGPASSWORD'] = passwd\n+            subprocess.run(args, env=env, check=True)\n         finally:\n             # Restore the original SIGINT handler.\n             signal.signal(signal.SIGINT, sigint_handler)\n-            if temp_pgpass:\n-                temp_pgpass.close()\n-                if 'PGPASSFILE' in os.environ:  # unit tests need cleanup\n-                    del os.environ['PGPASSFILE']\n \n     def runshell(self):\n-        DatabaseClient.runshell_db(self.connection.get_connection_params())\n+        DatabaseClient.runshell_db(self.connection.get_connection_params())\n\\ No newline at end of file"
  },
  "astropy__astropy-7166": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "astropy__astropy-7166",
    "model_patch": "diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py\nindex de3fb01d1..546ffdfb7 100644\n--- a/astropy/utils/misc.py\n+++ b/astropy/utils/misc.py\n@@ -510,30 +510,51 @@ class InheritDocstrings(type):\n \n         >>> from astropy.utils.misc import InheritDocstrings\n         >>> class A(metaclass=InheritDocstrings):\n-        ...     def wiggle(self):\n-        ...         \"Wiggle the thingamajig\"\n-        ...         pass\n-        >>> class B(A):\n-        ...     def wiggle(self):\n-        ...         pass\n-        >>> B.wiggle.__doc__\n-        u'Wiggle the thingamajig'\n     \"\"\"\n-\n     def __init__(cls, name, bases, dct):\n         def is_public_member(key):\n             return (\n-                (key.startswith('__') and key.endswith('__')\n-                 and len(key) > 4) or\n-                not key.startswith('_'))\n+                (key.startswith('__') and key.endswith('__') and len(key) > 4) or\n+                not key.startswith('_')\n+            )\n \n         for key, val in dct.items():\n-            if (inspect.isfunction(val) and\n-                is_public_member(key) and\n-                val.__doc__ is None):\n-                for base in cls.__mro__[1:]:\n-                    super_method = getattr(base, key, None)\n-                    if super_method is not None:\n+            # support functions, properties, classmethod and staticmethod\n+            is_func = inspect.isfunction(val)\n+            is_prop = isinstance(val, property)\n+            is_cm_sm = isinstance(val, (classmethod, staticmethod))\n+            if (is_func or is_prop or is_cm_sm) and is_public_member(key):\n+                cur_doc = (val.__doc__ if is_func else\n+                           (val.fget.__doc__ if is_prop and val.fget is not None else\n+                            (getattr(val, \"__func__\", None).__doc__ if getattr(val, \"__func__\", None) is not None else None)))\n+                if cur_doc is None:\n+                    for base in cls.__mro__[1:]:\n+                        super_method = getattr(base, key, None)\n+                        if super_method is not None:\n+                            if isinstance(super_method, property):\n+                                doc = super_method.fget.__doc__ if super_method.fget is not None else super_method.__doc__\n+                            elif isinstance(super_method, (classmethod, staticmethod)):\n+                                func = getattr(super_method, \"__func__\", None)\n+                                doc = func.__doc__ if func is not None else super_method.__doc__\n+                            else:\n+                                doc = super_method.__doc__\n+                            if is_func:\n+                                val.__doc__ = doc\n+                            elif is_prop and val.fget is not None:\n+                                val.fget.__doc__ = doc\n+                            else:\n+                                # classmethod/staticmethod: set underlying function doc if possible\n+                                funcobj = getattr(val, \"__func__\", None)\n+                                if funcobj is not None:\n+                                    funcobj.__doc__ = doc\n+                                else:\n+                                    # fallback: set on the object itself\n+                                    val.__doc__ = doc\n+                            break\n+\n+\n+                            val.fget.__doc__ = doc\n+\n                         val.__doc__ = super_method.__doc__\n                         break"
  },
  "django__django-13297": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-13297",
    "model_patch": "diff --git a/django/views/generic/base.py b/django/views/generic/base.py\nindex ea5baca08d..c868c65d14 100644\n--- a/django/views/generic/base.py\n+++ b/django/views/generic/base.py\n@@ -11,11 +11,8 @@ from django.template.response import TemplateResponse\n from django.urls import reverse\n from django.utils.decorators import classonlymethod\n from django.utils.deprecation import RemovedInDjango40Warning\n-from django.utils.functional import SimpleLazyObject\n-\n logger = logging.getLogger('django.request')\n-\n-\n+from django.utils.functional import SimpleLazyObject\n class ContextMixin:\n     \"\"\"\n     A default context mixin that passes the keyword arguments received by\n@@ -27,9 +24,19 @@ class ContextMixin:\n         kwargs.setdefault('view', self)\n         if self.extra_context is not None:\n             kwargs.update(self.extra_context)\n+        # Force-evaluate SimpleLazyObject URL kwargs to native types so downstream\n+        # code (e.g. ORM filters) don't receive proxy objects which some DB\n+        for key, value in list(kwargs.items()):\n+            if isinstance(value, SimpleLazyObject):\n+                try:\n+                    kwargs[key] = str(value)\n+                except Exception:\n+                    # If coercion fails, keep the original proxy object.\n+                    pass\n         return kwargs\n \n \n+\n class View:\n     \"\"\"\n     Intentionally simple parent class for all views. Only implements"
  },
  "psf__requests-1921": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "psf__requests-1921",
    "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex a023e4e..2669547 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -11,36 +11,29 @@ requests (cookies, auth, proxies).\n import os\n from collections import Mapping\n from datetime import datetime\n-\n-from .compat import cookielib, OrderedDict, urljoin, urlparse, builtin_str\n-from .cookies import (\n-    cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar, merge_cookies)\n from .models import Request, PreparedRequest, DEFAULT_REDIRECT_LIMIT\n from .hooks import default_hooks, dispatch_hook\n from .utils import to_key_val_list, default_headers, to_native_string\n from .exceptions import TooManyRedirects, InvalidSchema\n-from .structures import CaseInsensitiveDict\n-\n-from .adapters import HTTPAdapter\n \n+from .compat import cookielib, OrderedDict, urljoin, urlparse, builtin_str\n from .utils import requote_uri, get_environ_proxies, get_netrc_auth\n-\n from .status_codes import codes\n-\n-# formerly defined here, reexposed here for backward compatibility\n-from .models import REDIRECT_STATI\n-\n-\n+from .cookies import (\n+    cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar, merge_cookies)\n+from .structures import CaseInsensitiveDict\n+from .adapters import HTTPAdapter\n def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n     \"\"\"\n     Determines appropriate setting for a given request, taking into account the\n     explicit setting on that request, and the setting in the session. If a\n     setting is a dictionary, they will be merged together using `dict_class`\n     \"\"\"\n-\n+    # If the session has no setting, use the request's setting.\n     if session_setting is None:\n         return request_setting\n \n+    # If the request has no setting, use the session's setting.\n     if request_setting is None:\n         return session_setting\n \n@@ -54,6 +47,18 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n     merged_setting = dict_class(to_key_val_list(session_setting))\n     merged_setting.update(to_key_val_list(request_setting))\n \n+    # Remove keys that are set to None on the request (explicitly unset).\n+    for (k, v) in list(request_setting.items()):\n+        if v is None:\n+            merged_setting.pop(k, None)\n+\n+    # Also treat None in the session setting as \"do not send this header\"\n+    # unless the request explicitly provides a value for it.\n+    for (k, v) in list(session_setting.items()):\n+        if v is None and k not in request_setting:\n+            merged_setting.pop(k, None)\n+\n+    return merged_setting\n     # Remove keys that are set to None.\n     for (k, v) in request_setting.items():\n         if v is None:"
  },
  "django__django-14053": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-14053",
    "model_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 494890cc23..90db25a176 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -220,6 +220,7 @@ class HashedFilesMixin:\n \n         # where to store the new paths\n         hashed_files = {}\n+        yielded_names = set()\n \n         # build a list of adjustable files\n         adjustable_paths = [\n@@ -229,14 +230,18 @@ class HashedFilesMixin:\n         # Do a single pass first. Post-process all files once, then repeat for\n         # adjustable files.\n         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n-            yield name, hashed_name, processed\n+            if name not in yielded_names:\n+                yielded_names.add(name)\n+                yield name, hashed_name, processed\n \n         paths = {path: paths[path] for path in adjustable_paths}\n \n         for i in range(self.max_post_process_passes):\n             substitutions = False\n             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n-                yield name, hashed_name, processed\n+                if name not in yielded_names:\n+                    yielded_names.add(name)\n+                    yield name, hashed_name, processed\n                 substitutions = substitutions or subst\n \n             if not substitutions:"
  },
  "django__django-16662": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-16662",
    "model_patch": "diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex a59f0c8dcb..421fc06771 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -175,7 +175,7 @@ class MigrationWriter:\n \n         # Sort imports by the package / module to be imported (the part after\n         # \"from\" in \"from ... import ...\" or after \"import\" in \"import ...\").\n-        sorted_imports = sorted(imports, key=lambda i: i.split()[1])\n+        sorted_imports = sorted(imports, key=lambda i: (i.startswith(\"from\"), i.split()[1]))\n         items[\"imports\"] = \"\\n\".join(sorted_imports) + \"\\n\" if imports else \"\"\n         if migration_imports:\n             items[\"imports\"] += ("
  },
  "sympy__sympy-17655": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "sympy__sympy-17655",
    "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 7c978c47be..33d5fa8510 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -243,40 +243,42 @@ def __hash__(self):\n \n     def __iter__(self):\n         return self.args.__iter__()\n-\n-    def __len__(self):\n-        return len(self.args)\n-\n     def __mul__(self, factor):\n         \"\"\"Multiply point's coordinates by a factor.\n-\n+        \n         Notes\n         =====\n-\n+        \n         >>> from sympy.geometry.point import Point\n-\n+        \n         When multiplying a Point by a floating point number,\n         the coordinates of the Point will be changed to Floats:\n-\n+        \n         >>> Point(1, 2)*0.1\n         Point2D(0.1, 0.2)\n-\n+        \n         If this is not desired, the `scale` method can be used or\n         else only multiply or divide by integers:\n-\n+        \n         >>> Point(1, 2).scale(1.1, 1.1)\n         Point2D(11/10, 11/5)\n         >>> Point(1, 2)*11/10\n         Point2D(11/10, 11/5)\n-\n+        \n         See Also\n         ========\n-\n+        \n         sympy.geometry.point.Point.scale\n         \"\"\"\n         factor = sympify(factor)\n         coords = [simplify(x*factor) for x in self.args]\n         return Point(coords, evaluate=False)\n+    \n+    def __rmul__(self, factor):\n+        \"\"\"Right-multiplication to support scalar * Point.\"\"\"\n+        return self.__mul__(factor)\n+    \n+\n \n     def __neg__(self):\n         \"\"\"Negate the point.\"\"\""
  },
  "django__django-12406": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-12406",
    "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex dafc11f995..0fab275e22 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -2,7 +2,6 @@\n Helper functions for creating Form classes from Django models\n and database field objects.\n \"\"\"\n-\n from itertools import chain\n \n from django.core.exceptions import (\n@@ -13,7 +12,8 @@ from django.forms.forms import BaseForm, DeclarativeFieldsMetaclass\n from django.forms.formsets import BaseFormSet, formset_factory\n from django.forms.utils import ErrorList\n from django.forms.widgets import (\n-    HiddenInput, MultipleHiddenInput, SelectMultiple,\n+    HiddenInput, MultipleHiddenInput, SelectMultiple, RadioSelect,\n+\n )\n from django.utils.text import capfirst, get_text_list\n from django.utils.translation import gettext, gettext_lazy as _\n@@ -1180,7 +1180,6 @@ class ModelChoiceField(ChoiceField):\n                             ' the available choices.'),\n     }\n     iterator = ModelChoiceIterator\n-\n     def __init__(self, queryset, *, empty_label=\"---------\",\n                  required=True, widget=None, label=None, initial=None,\n                  help_text='', to_field_name=None, limit_choices_to=None,\n@@ -1189,11 +1188,17 @@ class ModelChoiceField(ChoiceField):\n             self.empty_label = None\n         else:\n             self.empty_label = empty_label\n+        # RadioSelect has an inherent unfilled state; do not present a blank\n+        # option for required ModelChoiceField when using radio buttons.\n+        if widget is not None and (widget is RadioSelect or isinstance(widget, RadioSelect)) and required:\n+            self.empty_label = None\n \n         # Call Field instead of ChoiceField __init__() because we don't need\n         # ChoiceField.__init__().\n         Field.__init__(\n             self, required=required, widget=widget, label=label,\n+\n+\n             initial=initial, help_text=help_text, **kwargs\n         )\n         self.queryset = queryset"
  },
  "sympy__sympy-24213": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "sympy__sympy-24213",
    "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex a436880c4b..4eb964c11c 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -49,7 +49,6 @@ def __str__(self):\n         If it does not exist, then it makes a list of symbols (or names) of\n         the base dimensions.\n         \"\"\"\n-\n         if self.name != \"\":\n             return self.name\n         else:\n@@ -173,9 +172,8 @@ def _collect_factor_and_dimension(self, expr):\n         elif isinstance(expr, Add):\n             factor, dim = self._collect_factor_and_dimension(expr.args[0])\n             for addend in expr.args[1:]:\n-                addend_factor, addend_dim = \\\n-                    self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                addend_factor, addend_dim = self._collect_factor_and_dimension(addend)\n+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):\n                     raise ValueError(\n                         'Dimension of \"{}\" is {}, '\n                         'but it should be {}'.format("
  },
  "sphinx-doc__sphinx-9658": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "sphinx-doc__sphinx-9658",
    "model_patch": "diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\nindex 87707d48f..ed3f02ebb 100644\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -12,7 +12,7 @@ import sys\n import typing\n from struct import Struct\n from types import TracebackType\n-from typing import Any, Callable, Dict, Generator, List, Optional, Tuple, Type, TypeVar, Union\n+from typing import Any, Callable, Dict, Generator, List, Optional, Tuple, TypeVar, Union\n \n from docutils import nodes\n from docutils.parsers.rst.states import Inliner\n@@ -146,7 +146,6 @@ def restify(cls: Optional[Type]) -> str:\n     except (AttributeError, TypeError):\n         return repr(cls)\n \n-\n def _restify_py37(cls: Optional[Type]) -> str:\n     \"\"\"Convert python class to a reST reference.\"\"\"\n     from sphinx.util import inspect  # lazy loading\n@@ -192,10 +191,12 @@ def _restify_py37(cls: Optional[Type]) -> str:\n     elif isinstance(cls, typing._SpecialForm):\n         return ':py:obj:`~%s.%s`' % (cls.__module__, cls._name)\n     elif hasattr(cls, '__qualname__'):\n+        qname = cls.__qualname__ or getattr(cls, '__name__', '')\n         if cls.__module__ == 'typing':\n-            return ':py:class:`~%s.%s`' % (cls.__module__, cls.__qualname__)\n+            return ':py:class:`~%s.%s`' % (cls.__module__, qname)\n         else:\n-            return ':py:class:`%s.%s`' % (cls.__module__, cls.__qualname__)\n+            return ':py:class:`%s.%s`' % (cls.__module__, qname)\n+\n     elif isinstance(cls, ForwardRef):\n         return ':py:class:`%s`' % cls.__forward_arg__\n     else:"
  },
  "pytest-dev__pytest-7490": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "pytest-dev__pytest-7490",
    "model_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 560548aea..66cc9cac0 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -2,7 +2,6 @@ import os\n import warnings\n from functools import lru_cache\n from typing import Callable\n-from typing import Dict\n from typing import Iterable\n from typing import Iterator\n from typing import List\n@@ -20,13 +19,13 @@ from _pytest._code import getfslineno\n from _pytest._code.code import ExceptionInfo\n from _pytest._code.code import TerminalRepr\n from _pytest.compat import cached_property\n-from _pytest.compat import overload\n+\n from _pytest.compat import TYPE_CHECKING\n from _pytest.config import Config\n from _pytest.config import ConftestImportFailure\n from _pytest.config import PytestPluginManager\n from _pytest.deprecated import NODE_USE_FROM_PARENT\n-from _pytest.fixtures import FixtureDef\n+\n from _pytest.fixtures import FixtureLookupError\n from _pytest.mark.structures import Mark\n from _pytest.mark.structures import MarkDecorator\n@@ -281,6 +280,19 @@ class Node(metaclass=NodeMeta):\n             self.own_markers.append(marker_.mark)\n         else:\n             self.own_markers.insert(0, marker_.mark)\n+        # If an xfail/skip evaluation was cached on this node, invalidate it so\n+        # dynamically-added markers (e.g., xfail added during setup) are\n+        # re-evaluated when runtest hooks run.\n+        try:\n+            from _pytest.skipping import xfailed_key\n+        except Exception:\n+            xfailed_key = None\n+        if xfailed_key is not None and xfailed_key in self._store:\n+            try:\n+                del self._store[xfailed_key]\n+            except KeyError:\n+                # defensive: ignore if already removed\n+                pass\n \n     def iter_markers(self, name: Optional[str] = None) -> Iterator[Mark]:\n         \"\"\"\n@@ -304,12 +316,6 @@ class Node(metaclass=NodeMeta):\n                 if name is None or getattr(mark, \"name\", None) == name:\n                     yield node, mark\n \n-    @overload\n-    def get_closest_marker(self, name: str) -> Optional[Mark]:\n-        raise NotImplementedError()\n-\n-    @overload  # noqa: F811\n-    def get_closest_marker(self, name: str, default: Mark) -> Mark:  # noqa: F811\n         raise NotImplementedError()\n \n     def get_closest_marker(  # noqa: F811"
  }
}