diff --git a/requests/models.py b/requests/models.py
index 9c624d3..3b25ea4 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -40,15 +40,6 @@ REDIRECT_STATI = (
     codes.moved,              # 301
     codes.found,              # 302
     codes.other,              # 303
-    codes.temporary_redirect, # 307
-    codes.permanent_redirect, # 308
-)
-
-DEFAULT_REDIRECT_LIMIT = 30
-CONTENT_CHUNK_SIZE = 10 * 1024
-ITER_CHUNK_SIZE = 512
-
-
 class RequestEncodingMixin(object):
     @property
     def path_url(self):
@@ -70,12 +61,12 @@ class RequestEncodingMixin(object):
             url.append(query)
 
         return ''.join(url)
-
-    @staticmethod
-    def _encode_params(data):
-        """Encode parameters in a piece of data.
-
-        Will successfully encode parameters when passed as a dict or a list of
+if isinstance(data, str):
+            return to_native_string(data)
+        elif isinstance(data, (bytes, bytearray)):
+            return data
+        elif hasattr(data, 'read'):
+            return data
         2-tuples. Order is retained if data is a list of 2-tuples but arbitrary
         if parameters are supplied as a dict.
         """
@@ -95,6 +86,24 @@ class RequestEncodingMixin(object):
                             (k.encode('utf-8') if isinstance(k, str) else k,
                              v.encode('utf-8') if isinstance(v, str) else v))
             return urlencode(result, doseq=True)
+        else:
+            return data
+                    if v is not None:
+                        result.append(
+                            (k.encode('utf-8') if isinstance(k, str) else k,
+                             v.encode('utf-8') if isinstance(v, str) else v))
+            return urlencode(result, doseq=True)
+        else:
+            return data
+            for k, vs in to_key_val_list(data):
+                if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):
+                    vs = [vs]
+                for v in vs:
+                    if v is not None:
+                        result.append(
+                            (k.encode('utf-8') if isinstance(k, str) else k,
+                             v.encode('utf-8') if isinstance(v, str) else v))
+            return urlencode(result, doseq=True)
         else:
             return data