2025-10-04 01:36:28,590 - INFO - Creating container for sympy__sympy-17655...
2025-10-04 01:36:28,917 - INFO - Container for sympy__sympy-17655 created: 18be6b33489e8f4460b3c98f7b9cc0dfeff1f73cdb6d29c1ea6c60a12838d500
2025-10-04 01:36:29,062 - INFO - Container for sympy__sympy-17655 started: 18be6b33489e8f4460b3c98f7b9cc0dfeff1f73cdb6d29c1ea6c60a12838d500
2025-10-04 01:36:29,062 - INFO - Intermediate patch for sympy__sympy-17655 written to logs/run_evaluation/my_evaluation_run_17/gpt-5-mini/sympy__sympy-17655/patch.diff, now applying to container...
2025-10-04 01:36:29,350 - INFO - Failed to apply patch to container: git apply --verbose
2025-10-04 01:36:29,419 - INFO - Failed to apply patch to container: git apply --verbose --reject
2025-10-04 01:36:29,495 - INFO - >>>>> Applied Patch:
patching file sympy/geometry/point.py
patch unexpectedly ends in middle of line
Hunk #2 succeeded at 212 with fuzz 2.

2025-10-04 01:36:29,856 - INFO - Git diff before:
diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..463bafcdfd 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -101,11 +101,7 @@ class Point(GeometryEntity):
     >>> Point(0.5, 0.25, evaluate=False)
     Point2D(0.5, 0.25)
 
-    """
-
-    is_Point = True
-
-    def __new__(cls, *args, **kwargs):
+def __new__(cls, *args, **kwargs):
         evaluate = kwargs.get('evaluate', global_evaluate[0])
         on_morph = kwargs.get('on_morph', 'ignore')
 
@@ -216,22 +212,30 @@ def __add__(self, other):
         try:
             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
         except TypeError:
-            raise GeometryError("Don't know how to add {} and a Point object".format(other))
+            # Attempt to handle scalar * Point (e.g. 2*Point2D(1,1)) where the
+            # left multiplication produces a Mul containing a Point. Extract
+            # the Point and scalar factor and rebuild a Point so normalization
+            # succeeds.
+            try:
+                if getattr(other, 'is_Mul', False):
+                    # find Point factor inside the Mul
+                    point_factors = [a for a in other.args if getattr(a, 'is_Point', False)]
+                    if len(point_factors) == 1:
+                        pt = point_factors[0]
+                        # scalar = other / pt
+                        scalar = other/pt
+                        # use Point.__mul__ to produce a Point
+                        other = pt * scalar
+                        s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
+                    else:
+                        raise TypeError
+                else:
+                    raise TypeError
+            except TypeError:
+                raise GeometryError("Don't know how to add {} and a Point object".format(other))
 
         coords = [simplify(a + b) for a, b in zip(s, o)]
         return Point(coords, evaluate=False)
-
-    def __contains__(self, item):
-        return item in self.args
-
-    def __div__(self, divisor):
-        """Divide point's coordinates by a factor."""
-        divisor = sympify(divisor)
-        coords = [simplify(x/divisor) for x in self.args]
-        return Point(coords, evaluate=False)
-
-    def __eq__(self, other):
-        if not isinstance(other, Point) or len(self.args) != len(other.args):
             return False
         return self.args == other.args
2025-10-04 01:36:29,856 - INFO - Eval script for sympy__sympy-17655 written to logs/run_evaluation/my_evaluation_run_17/gpt-5-mini/sympy__sympy-17655/eval.sh; copying to container...
2025-10-04 01:36:34,403 - INFO - Test runtime: 4.49 seconds
2025-10-04 01:36:34,403 - INFO - Test output for sympy__sympy-17655 written to logs/run_evaluation/my_evaluation_run_17/gpt-5-mini/sympy__sympy-17655/test_output.txt
2025-10-04 01:36:34,508 - INFO - Git diff after:
diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..463bafcdfd 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -101,11 +101,7 @@ class Point(GeometryEntity):
     >>> Point(0.5, 0.25, evaluate=False)
     Point2D(0.5, 0.25)
 
-    """
-
-    is_Point = True
-
-    def __new__(cls, *args, **kwargs):
+def __new__(cls, *args, **kwargs):
         evaluate = kwargs.get('evaluate', global_evaluate[0])
         on_morph = kwargs.get('on_morph', 'ignore')
 
@@ -216,22 +212,30 @@ def __add__(self, other):
         try:
             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
         except TypeError:
-            raise GeometryError("Don't know how to add {} and a Point object".format(other))
+            # Attempt to handle scalar * Point (e.g. 2*Point2D(1,1)) where the
+            # left multiplication produces a Mul containing a Point. Extract
+            # the Point and scalar factor and rebuild a Point so normalization
+            # succeeds.
+            try:
+                if getattr(other, 'is_Mul', False):
+                    # find Point factor inside the Mul
+                    point_factors = [a for a in other.args if getattr(a, 'is_Point', False)]
+                    if len(point_factors) == 1:
+                        pt = point_factors[0]
+                        # scalar = other / pt
+                        scalar = other/pt
+                        # use Point.__mul__ to produce a Point
+                        other = pt * scalar
+                        s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
+                    else:
+                        raise TypeError
+                else:
+                    raise TypeError
+            except TypeError:
+                raise GeometryError("Don't know how to add {} and a Point object".format(other))
 
         coords = [simplify(a + b) for a, b in zip(s, o)]
         return Point(coords, evaluate=False)
-
-    def __contains__(self, item):
-        return item in self.args
-
-    def __div__(self, divisor):
-        """Divide point's coordinates by a factor."""
-        divisor = sympify(divisor)
-        coords = [simplify(x/divisor) for x in self.args]
-        return Point(coords, evaluate=False)
-
-    def __eq__(self, other):
-        if not isinstance(other, Point) or len(self.args) != len(other.args):
             return False
         return self.args == other.args
2025-10-04 01:36:34,508 - INFO - Grading answer for sympy__sympy-17655...
2025-10-04 01:36:34,511 - INFO - report: {'sympy__sympy-17655': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_point', 'test_point3D']}, 'PASS_TO_PASS': {'success': [], 'failure': ['test_Point2D', 'test_issue_9214', 'test_issue_11617', 'test_transform', 'test_concyclic_doctest_bug', 'test_arguments', 'test_unit', 'test_dot', 'test__normalize_dimension']}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for sympy__sympy-17655: resolved: False
2025-10-04 01:36:34,512 - INFO - Attempting to stop container sweb.eval.sympy__sympy-17655.my_evaluation_run_17...
2025-10-04 01:36:49,637 - INFO - Attempting to remove container sweb.eval.sympy__sympy-17655.my_evaluation_run_17...
2025-10-04 01:36:49,669 - INFO - Container sweb.eval.sympy__sympy-17655.my_evaluation_run_17 removed.
2025-10-04 01:36:49,669 - INFO - Attempting to remove image swebench/sweb.eval.x86_64.sympy_1776_sympy-17655:latest...
2025-10-04 01:36:49,878 - INFO - Image swebench/sweb.eval.x86_64.sympy_1776_sympy-17655:latest removed.
