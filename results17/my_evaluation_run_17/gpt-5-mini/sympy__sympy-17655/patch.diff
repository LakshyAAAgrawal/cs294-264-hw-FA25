diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..463bafcdfd 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -101,11 +101,7 @@ class Point(GeometryEntity):
     >>> Point(0.5, 0.25, evaluate=False)
     Point2D(0.5, 0.25)
 
-    """
-
-    is_Point = True
-
-    def __new__(cls, *args, **kwargs):
+def __new__(cls, *args, **kwargs):
         evaluate = kwargs.get('evaluate', global_evaluate[0])
         on_morph = kwargs.get('on_morph', 'ignore')
 
@@ -216,22 +212,30 @@ def __add__(self, other):
         try:
             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
         except TypeError:
-            raise GeometryError("Don't know how to add {} and a Point object".format(other))
+            # Attempt to handle scalar * Point (e.g. 2*Point2D(1,1)) where the
+            # left multiplication produces a Mul containing a Point. Extract
+            # the Point and scalar factor and rebuild a Point so normalization
+            # succeeds.
+            try:
+                if getattr(other, 'is_Mul', False):
+                    # find Point factor inside the Mul
+                    point_factors = [a for a in other.args if getattr(a, 'is_Point', False)]
+                    if len(point_factors) == 1:
+                        pt = point_factors[0]
+                        # scalar = other / pt
+                        scalar = other/pt
+                        # use Point.__mul__ to produce a Point
+                        other = pt * scalar
+                        s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
+                    else:
+                        raise TypeError
+                else:
+                    raise TypeError
+            except TypeError:
+                raise GeometryError("Don't know how to add {} and a Point object".format(other))
 
         coords = [simplify(a + b) for a, b in zip(s, o)]
         return Point(coords, evaluate=False)
-
-    def __contains__(self, item):
-        return item in self.args
-
-    def __div__(self, divisor):
-        """Divide point's coordinates by a factor."""
-        divisor = sympify(divisor)
-        coords = [simplify(x/divisor) for x in self.args]
-        return Point(coords, evaluate=False)
-
-    def __eq__(self, other):
-        if not isinstance(other, Point) or len(self.args) != len(other.args):
             return False
         return self.args == other.args