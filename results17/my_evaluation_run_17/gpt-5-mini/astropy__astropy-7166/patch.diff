diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d1..4b04ddb23 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -511,22 +511,49 @@ class InheritDocstrings(type):
         >>> from astropy.utils.misc import InheritDocstrings
         >>> class A(metaclass=InheritDocstrings):
         ...     def wiggle(self):
-        ...         "Wiggle the thingamajig"
-        ...         pass
-        >>> class B(A):
-        ...     def wiggle(self):
-        ...         pass
-        >>> B.wiggle.__doc__
-        u'Wiggle the thingamajig'
-    """
-
-    def __init__(cls, name, bases, dct):
+def __init__(cls, name, bases, dct):
         def is_public_member(key):
             return (
                 (key.startswith('__') and key.endswith('__')
                  and len(key) > 4) or
                 not key.startswith('_'))
 
+        for key, val in dct.items():
+            if not is_public_member(key):
+                continue
+
+            # Functions, staticmethods, and classmethods: copy docstring to the
+            # underlying function object if missing.
+            if inspect.isfunction(val) or isinstance(val, (staticmethod, classmethod)):
+                func = val.__func__ if isinstance(val, (staticmethod, classmethod)) else val
+                if func.__doc__ is None:
+                    for base in cls.__mro__[1:]:
+                        super_method = getattr(base, key, None)
+                        if super_method is not None:
+                            super_func = getattr(super_method, '__func__', super_method)
+                            func.__doc__ = getattr(super_func, '__doc__', None)
+                            break
+
+            # Properties: copy the fget docstring from the first base property that has one.
+            elif isinstance(val, property):
+                fget = val.fget
+                if fget is not None and fget.__doc__ is None:
+                    for base in cls.__mro__[1:]:
+                        super_prop = getattr(base, key, None)
+                        if isinstance(super_prop, property) and super_prop.fget is not None:
+                            fget.__doc__ = super_prop.fget.__doc__
+                            break
+
+        super().__init__(name, bases, dct)
+            elif isinstance(val, property):
+                fget = val.fget
+                if fget is not None and fget.__doc__ is None:
+                    for base in cls.__mro__[1:]:
+                        super_prop = getattr(base, key, None)
+                        if isinstance(super_prop, property) and super_prop.fget is not None:
+                            fget.__doc__ = super_prop.fget.__doc__
+                            break
+
         for key, val in dct.items():
             if (inspect.isfunction(val) and
                 is_public_member(key) and