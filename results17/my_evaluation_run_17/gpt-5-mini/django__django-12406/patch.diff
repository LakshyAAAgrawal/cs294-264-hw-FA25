diff --git a/django/forms/models.py b/django/forms/models.py
index dafc11f995..66a2c2640c 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -6,14 +6,12 @@ and database field objects.
 from itertools import chain
 
 from django.core.exceptions import (
-    NON_FIELD_ERRORS, FieldError, ImproperlyConfigured, ValidationError,
-)
 from django.forms.fields import ChoiceField, Field
 from django.forms.forms import BaseForm, DeclarativeFieldsMetaclass
 from django.forms.formsets import BaseFormSet, formset_factory
 from django.forms.utils import ErrorList
 from django.forms.widgets import (
-    HiddenInput, MultipleHiddenInput, SelectMultiple,
+    HiddenInput, MultipleHiddenInput, SelectMultiple, RadioSelect,
 )
 from django.utils.text import capfirst, get_text_list
 from django.utils.translation import gettext, gettext_lazy as _
@@ -1169,8 +1167,6 @@ class ModelChoiceIterator:
             ModelChoiceIteratorValue(self.field.prepare_value(obj), obj),
             self.field.label_from_instance(obj),
         )
-
-
 class ModelChoiceField(ChoiceField):
     """A ChoiceField whose choices are a model QuerySet."""
     # This class is a subclass of ChoiceField for purity, but it doesn't
@@ -1187,6 +1183,34 @@ class ModelChoiceField(ChoiceField):
                  **kwargs):
         if required and (initial is not None):
             self.empty_label = None
+        else:
+            # If a RadioSelect widget is being used for a required field, don't
+            # provide an empty choice. Radio buttons have an inherent unselected
+            # state, and showing the empty "---------" choice makes it look like
+            # a valid selectable option.
+            is_radio = False
+            if widget is not None:
+                if isinstance(widget, type):
+                    try:
+                        is_radio = issubclass(widget, RadioSelect)
+                    except Exception:
+                        is_radio = False
+                else:
+                    is_radio = isinstance(widget, RadioSelect)
+            if required and is_radio:
+                self.empty_label = None
+            else:
+                self.empty_label = empty_label
+
+        # Call Field instead of ChoiceField __init__() because we don't need
+        # ChoiceField.__init__().
+        Field.__init__(
+            self, required=required, widget=widget, label=label,
+            initial=initial, help_text=help_text, **kwargs
+        )
+        self.queryset = queryset
+        self.limit_choices_to = limit_choices_to   # limit the queryset later.
+        self.to_field_name = to_field_name
         else:
             self.empty_label = empty_label