diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 92fe4affb9..cd06304d7d 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -267,13 +267,14 @@ class Collector:
         # if possible, bring the models in an order suitable for databases that
         # don't support transactions or cannot defer constraint checks until the
         # end of a transaction.
-        self.sort()
-        # number of objects deleted for each model label
-        deleted_counter = Counter()
-
-        # Optimize for the case with a single obj and no dependencies
-        if len(self.data) == 1 and len(instances) == 1:
-            instance = list(instances)[0]
+# Optimize for the case with a single obj and no dependencies
+          if len(self.data) == 1 and len(instances) == 1:
+              instance = list(instances)[0]
+              if self.can_fast_delete(instance):
+                  with transaction.mark_for_rollback_on_error():
+                      count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
+                  setattr(instance, model._meta.pk.attname, None)
+                  return count, {model._meta.label: count}
             if self.can_fast_delete(instance):
                 with transaction.mark_for_rollback_on_error():
                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)