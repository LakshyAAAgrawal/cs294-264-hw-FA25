diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py
index 8e8c3da06a..a4cdff5129 100644
--- a/django/core/handlers/base.py
+++ b/django/core/handlers/base.py
@@ -27,13 +27,7 @@ class BaseHandler:
         """
         Populate middleware lists from settings.MIDDLEWARE.
 
-        Must be called after the environment is fixed (see __call__ in subclasses).
-        """
-        self._view_middleware = []
-        self._template_response_middleware = []
-        self._exception_middleware = []
-
-        get_response = self._get_response_async if is_async else self._get_response
+get_response = self._get_response_async if is_async else self._get_response
         handler = convert_exception_to_response(get_response)
         handler_is_async = is_async
         for middleware_path in reversed(settings.MIDDLEWARE):
@@ -50,12 +44,13 @@ class BaseHandler:
             else:
                 middleware_is_async = middleware_can_async
             try:
-                # Adapt handler, if needed.
-                handler = self.adapt_method_mode(
+                # Adapt handler for the middleware call, but don't overwrite the
+                # outer handler until we know the middleware wants to be used.
+                adapted_handler = self.adapt_method_mode(
                     middleware_is_async, handler, handler_is_async,
                     debug=settings.DEBUG, name='middleware %s' % middleware_path,
                 )
-                mw_instance = middleware(handler)
+                mw_instance = middleware(adapted_handler)
             except MiddlewareNotUsed as exc:
                 if settings.DEBUG:
                     if str(exc):
@@ -74,17 +69,18 @@ class BaseHandler:
                     0,
                     self.adapt_method_mode(is_async, mw_instance.process_view),
                 )
-            if hasattr(mw_instance, 'process_template_response'):
-                self._template_response_middleware.append(
-                    self.adapt_method_mode(is_async, mw_instance.process_template_response),
-                )
-            if hasattr(mw_instance, 'process_exception'):
-                # The exception-handling stack is still always synchronous for
+handler = convert_exception_to_response(mw_instance)
+            handler_is_async = middleware_is_async
                 # now, so adapt that way.
                 self._exception_middleware.append(
                     self.adapt_method_mode(False, mw_instance.process_exception),
                 )
 
+            handler = convert_exception_to_response(mw_instance)
+            handler_is_async = middleware_is_async
+                    self.adapt_method_mode(False, mw_instance.process_exception),
+                )
+
             handler = convert_exception_to_response(mw_instance)
             handler_is_async = middleware_is_async