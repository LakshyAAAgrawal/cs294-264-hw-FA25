diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index 7fca6eff30..449a1c09d6 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -37,28 +37,38 @@ class DatabaseClient(BaseDatabaseClient):
         temp_pgpass = None
         sigint_handler = signal.getsignal(signal.SIGINT)
         try:
+            env = None
             if passwd:
-                # Create temporary .pgpass file.
-                temp_pgpass = NamedTemporaryFile(mode='w+')
+                # Prefer PGPASSWORD in the subprocess environment. If the current
+                # locale can't encode the password, fall back to a temporary .pgpass file.
                 try:
-                    print(
-                        _escape_pgpass(host) or '*',
-                        str(port) or '*',
-                        _escape_pgpass(dbname) or '*',
-                        _escape_pgpass(user) or '*',
-                        _escape_pgpass(passwd),
-                        file=temp_pgpass,
-                        sep=':',
-                        flush=True,
-                    )
-                    os.environ['PGPASSFILE'] = temp_pgpass.name
+                    env = os.environ.copy()
+                    env['PGPASSWORD'] = passwd
                 except UnicodeEncodeError:
-                    # If the current locale can't encode the data, let the
-                    # user input the password manually.
-                    pass
+                    # Create temporary .pgpass file as a fallback.
+                    temp_pgpass = NamedTemporaryFile(mode='w+')
+                    try:
+                        print(
+                            _escape_pgpass(host) or '*',
+                            str(port) or '*',
+                            _escape_pgpass(dbname) or '*',
+                            _escape_pgpass(user) or '*',
+                            _escape_pgpass(passwd),
+                            file=temp_pgpass,
+                            sep=':',
+                            flush=True,
+                        )
+                        env = os.environ.copy()
+                        env['PGPASSFILE'] = temp_pgpass.name
+                    except UnicodeEncodeError:
+                        # If even writing to a file fails, let the user input the password manually.
+                        env = None
             # Allow SIGINT to pass to psql to abort queries.
             signal.signal(signal.SIGINT, signal.SIG_IGN)
-            subprocess.check_call(args)
+            if env is not None:
+                subprocess.run(args, check=True, env=env)
+            else:
+                subprocess.run(args, check=True)
         finally:
             # Restore the original SIGINT handler.
             signal.signal(signal.SIGINT, sigint_handler)
@@ -67,5 +77,13 @@ class DatabaseClient(BaseDatabaseClient):
                 if 'PGPASSFILE' in os.environ:  # unit tests need cleanup
                     del os.environ['PGPASSFILE']
 
+    def runshell(self):
+        DatabaseClient.runshell_db(self.connection.get_connection_params())
+            signal.signal(signal.SIGINT, sigint_handler)
+            if temp_pgpass:
+                temp_pgpass.close()
+                if 'PGPASSFILE' in os.environ:  # unit tests need cleanup
+                    del os.environ['PGPASSFILE']
+
     def runshell(self):
         DatabaseClient.runshell_db(self.connection.get_connection_params())