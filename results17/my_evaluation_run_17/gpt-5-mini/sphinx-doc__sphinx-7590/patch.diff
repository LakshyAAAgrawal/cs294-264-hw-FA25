diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py
index fe52d881d..de50cf501 100644
--- a/sphinx/domains/cpp.py
+++ b/sphinx/domains/cpp.py
@@ -4655,19 +4655,28 @@ class DefinitionParser(BaseParser):
         if self.skip_word('nullptr'):
             return ASTPointerLiteral()
         if self.skip_word('true'):
-            return ASTBooleanLiteral(True)
-        if self.skip_word('false'):
-            return ASTBooleanLiteral(False)
-        for regex in [float_literal_re, binary_literal_re, hex_literal_re,
+for regex in [float_literal_re, binary_literal_re, hex_literal_re,
                       integer_literal_re, octal_literal_re]:
             pos = self.pos
             if self.match(regex):
+                # consume builtin suffix letters like u, U, l, L, f, F
                 while self.current_char in 'uUlLfF':
                     self.pos += 1
+                # support user-defined literal suffix (identifier) starting
+                # with a letter or underscore (e.g. 12_km, 0.5_Pa)
+                if (self.current_char.isalpha() or self.current_char == '_'):
+                    while (self.current_char.isalnum() or self.current_char == '_'):
+                        self.pos += 1
                 return ASTNumberLiteral(self.definition[pos:self.pos])
-
+        
         string = self._parse_string()
         if string is not None:
+            # support user-defined string literal suffix immediately after
+            # the closing quote (e.g. "abc"_s)
+            if (self.current_char.isalpha() or self.current_char == '_'):
+                # compute start of the original string slice and extend it with the suffix
+                start = self.pos - len(string)
+                while (self.current_char.isalnum() or self.current_char == '_'):
             return ASTStringLiteral(string)
 
         # character-literal