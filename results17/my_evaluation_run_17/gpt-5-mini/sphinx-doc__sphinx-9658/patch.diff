diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py
index b562f47fd..96f3c62cd 100644
--- a/sphinx/ext/autodoc/mock.py
+++ b/sphinx/ext/autodoc/mock.py
@@ -48,13 +48,19 @@ class _MockObject:
     def __contains__(self, key: str) -> bool:
         return False
 
-    def __iter__(self) -> Iterator:
-        return iter([])
-
-    def __mro_entries__(self, bases: Tuple) -> Tuple:
-        return (self.__class__,)
-
-    def __getitem__(self, key: Any) -> "_MockObject":
+def _make_subclass(name: str, module: str, superclass: Any = _MockObject,
+                   attributes: Any = None, decorator_args: Tuple = ()) -> Any:
+    # If a display-name (like "torch.nn.Module") was passed as the module,
+    # strip the trailing class name to recover the real module ("torch.nn").
+    if '.' in module:
+        head, tail = module.rsplit('.', 1)
+        if tail and tail[0].isupper():
+            module = head
+    attrs = {'__module__': module,
+             '__display_name__': module + '.' + name,
+             '__sphinx_decorator_args__': decorator_args}
+    attrs.update(attributes or {})
+    return type(name, (superclass,), attrs)
         return _make_subclass(str(key), self.__display_name__, self.__class__)()
 
     def __getattr__(self, key: str) -> "_MockObject":
@@ -62,13 +68,6 @@ class _MockObject:
 
     def __call__(self, *args: Any, **kwargs: Any) -> Any:
         call = self.__class__()
-        call.__sphinx_decorator_args__ = args
-        return call
-
-    def __repr__(self) -> str:
-        return self.__display_name__
-
-
 def _make_subclass(name: str, module: str, superclass: Any = _MockObject,
                    attributes: Any = None, decorator_args: Tuple = ()) -> Any:
     attrs = {'__module__': module,