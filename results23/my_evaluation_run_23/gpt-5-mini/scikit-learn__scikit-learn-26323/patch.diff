diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py
index 4eddd12b1..5d1ca21b8 100644
--- a/sklearn/compose/_column_transformer.py
+++ b/sklearn/compose/_column_transformer.py
@@ -263,48 +263,61 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):
             return self.transformers
 
     @_transformers.setter
-    def _transformers(self, value):
-        try:
-            self.transformers = [
-                (name, trans, col)
-                for ((name, trans), (_, _, col)) in zip(value, self.transformers)
-            ]
-        except (TypeError, ValueError):
-            self.transformers = value
+@_transformers.setter
+def _transformers(self, value):
+    try:
+        self.transformers = [
+            (name, trans, col)
+            for ((name, trans), (_, _, col)) in zip(value, self.transformers)
+        ]
+    except (TypeError, ValueError):
+        self.transformers = value
 
-    def set_output(self, *, transform=None):
-        """Set the output container when `"transform"` and `"fit_transform"` are called.
+def set_output(self, *, transform=None):
+    """Set the output container when `"transform"` and `"fit_transform"` are called.
 
-        Calling `set_output` will set the output of all estimators in `transformers`
-        and `transformers_`.
+    Calling `set_output` will set the output of all estimators in `transformers`
+    and `transformers_`.
 
-        Parameters
-        ----------
-        transform : {"default", "pandas"}, default=None
-            Configure output of `transform` and `fit_transform`.
+    Parameters
+    ----------
+    transform : {"default", "pandas"}, default=None
+        Configure output of `transform` and `fit_transform`.
 
-            - `"default"`: Default output format of a transformer
-            - `"pandas"`: DataFrame output
-            - `None`: Transform configuration is unchanged
+        - `"default"`: Default output format of a transformer
+        - `"pandas"`: DataFrame output
+        - `None`: Transform configuration is unchanged
 
-        Returns
-        -------
-        self : estimator instance
-            Estimator instance.
-        """
-        super().set_output(transform=transform)
-        transformers = (
-            trans
-            for _, trans, _ in chain(
-                self.transformers, getattr(self, "transformers_", [])
-            )
-            if trans not in {"passthrough", "drop"}
+    Returns
+    -------
+    self : estimator instance
+        Estimator instance.
+    """
+    super().set_output(transform=transform)
+    # Set output for all named transformers (excluding "passthrough" and "drop").
+    transformers = (
+        trans
+        for _, trans, _ in chain(
+            self.transformers, getattr(self, "transformers_", [])
         )
-        for trans in transformers:
-            _safe_set_output(trans, transform=transform)
+        if trans not in {"passthrough", "drop"}
+    )
 
-        return self
+    # Include the remainder transformer if it is an estimator (not "passthrough"/"drop").
+    remainder_trans = None
+    if hasattr(self, "_remainder"):
+        # self._remainder is a tuple ('remainder', transformer, columns)
+        _, rem_trans, _ = self._remainder
+        if rem_trans not in {"passthrough", "drop"}:
+            remainder_trans = rem_trans
+    else:
+        if self.remainder not in {"passthrough", "drop"}:
+            remainder_trans = self.remainder
+
+    for trans in chain(transformers, [remainder_trans] if remainder_trans is not None else []):
+        _safe_set_output(trans, transform=transform)
 
+    return self
     def get_params(self, deep=True):
         """Get parameters for this estimator.