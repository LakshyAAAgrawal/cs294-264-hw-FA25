diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..e58295c52d 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -145,34 +145,57 @@ def __new__(cls, *args, **kwargs):
                 raise ValueError(message)
             elif on_morph == 'warn':
                 warnings.warn(message)
-            else:
-                raise ValueError(filldedent('''
-                        on_morph value should be 'error',
-                        'warn' or 'ignore'.'''))
-        if any(coords[dim:]):
-            raise ValueError('Nonzero coordinates cannot be removed.')
-        if any(a.is_number and im(a) for a in coords):
-            raise ValueError('Imaginary coordinates are not permitted.')
-        if not all(isinstance(a, Expr) for a in coords):
-            raise TypeError('Coordinates must be valid SymPy expressions.')
-
-        # pad with zeros appropriately
-        coords = coords[:dim] + (S.Zero,)*(dim - len(coords))
-
-        # Turn any Floats into rationals and simplify
-        # any expressions before we instantiate
-        if evaluate:
-            coords = coords.xreplace(dict(
-                [(f, simplify(nsimplify(f, rational=True)))
-                 for f in coords.atoms(Float)]))
-
-        # return 2D or 3D instances
-        if len(coords) == 2:
-            kwargs['_nocheck'] = True
-            return Point2D(*coords, **kwargs)
-        elif len(coords) == 3:
-            kwargs['_nocheck'] = True
-            return Point3D(*coords, **kwargs)
+def __add__(self, other):
+        """Add other to self by incrementing self's coordinates by
+        those of other.
+    
+        Notes
+        =====
+    
+        >>> from sympy.geometry.point import Point
+    
+        When sequences of coordinates are passed to Point methods, they
+        are converted to a Point internally. This __add__ method does
+        not do that so if floating point values are used, a floating
+        point result (in terms of SymPy Floats) will be returned.
+    
+        >>> Point(1, 2) + (.1, .2)
+        Point2D(1.1, 2.2)
+    
+        If this is not desired, the `translate` method can be used or
+        another Point can be added:
+    
+        >>> Point(1, 2).translate(.1, .2)
+        Point2D(11/10, 11/5)
+        >>> Point(1, 2) + Point(.1, .2)
+        Point2D(11/10, 11/5)
+    
+        See Also
+        ========
+    
+        sympy.geometry.point.Point.translate
+    
+        """
+        # Handle cases like 2*Point(...) where the left operand's Mul was
+        # constructed by SymPy (so scalar.__mul__(Point) returned a Mul).
+        # Convert such Mul into Point * scalar so Point.__mul__ is used.
+        if getattr(other, 'is_Mul', False):
+            for arg in other.args:
+                if isinstance(arg, Point):
+                    scalar = S.One
+                    for a in other.args:
+                        if a is not arg:
+                            scalar = scalar * a
+                    other = arg * scalar
+                    break
+
+        try:
+            s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
+        except TypeError:
+            raise GeometryError("Don't know how to add {} and a Point object".format(other))
+    
+        coords = [simplify(a + b) for a, b in zip(s, o)]
+        return Point(coords, evaluate=False)
 
         # the general Point
         return GeometryEntity.__new__(cls, *coords)