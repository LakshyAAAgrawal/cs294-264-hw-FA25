diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..f076f6cc22 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -167,11 +167,31 @@ def __new__(cls, *args, **kwargs):
                  for f in coords.atoms(Float)]))
 
         # return 2D or 3D instances
-        if len(coords) == 2:
-            kwargs['_nocheck'] = True
-            return Point2D(*coords, **kwargs)
-        elif len(coords) == 3:
-            kwargs['_nocheck'] = True
+        try:
+            s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
+        except TypeError:
+            # If other is a Mul like 2*Point, try to extract the Point and
+            # scale it using Point.__mul__ so that scalar*Point behaves
+            # the same as Point*scalar.
+            from sympy.core.mul import Mul
+            if isinstance(other, Mul):
+                point_part = None
+                factor = None
+                for a in other.args:
+                    if isinstance(a, Point):
+                        point_part = a
+                    else:
+                        factor = a if factor is None else factor * a
+                if point_part is not None:
+                    if factor is None:
+                        factor = 1
+                    # Use the Point.__mul__ implementation to get a Point
+                    other = point_part.__mul__(factor)
+                    s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
+                else:
+                    raise GeometryError("Don't know how to add {} and a Point object".format(other))
+            else:
+                raise GeometryError("Don't know how to add {} and a Point object".format(other))
             return Point3D(*coords, **kwargs)
 
         # the general Point