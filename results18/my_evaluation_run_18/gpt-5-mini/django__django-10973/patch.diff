diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index 7fca6eff30..eaf6372213 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -18,47 +18,19 @@ class DatabaseClient(BaseDatabaseClient):
 
     @classmethod
     def runshell_db(cls, conn_params):
-        args = [cls.executable_name]
-
-        host = conn_params.get('host', '')
-        port = conn_params.get('port', '')
-        dbname = conn_params.get('database', '')
-        user = conn_params.get('user', '')
-        passwd = conn_params.get('password', '')
-
-        if user:
-            args += ['-U', user]
-        if host:
-            args += ['-h', host]
-        if port:
-            args += ['-p', str(port)]
-        args += [dbname]
-
-        temp_pgpass = None
-        sigint_handler = signal.getsignal(signal.SIGINT)
+sigint_handler = signal.getsignal(signal.SIGINT)
+        env = os.environ.copy()
         try:
             if passwd:
-                # Create temporary .pgpass file.
-                temp_pgpass = NamedTemporaryFile(mode='w+')
-                try:
-                    print(
-                        _escape_pgpass(host) or '*',
-                        str(port) or '*',
-                        _escape_pgpass(dbname) or '*',
-                        _escape_pgpass(user) or '*',
-                        _escape_pgpass(passwd),
-                        file=temp_pgpass,
-                        sep=':',
-                        flush=True,
-                    )
-                    os.environ['PGPASSFILE'] = temp_pgpass.name
-                except UnicodeEncodeError:
-                    # If the current locale can't encode the data, let the
-                    # user input the password manually.
-                    pass
+                # Provide the password via the PGPASSWORD environment variable for the
+                # child process instead of creating a temporary .pgpass file.
+                env['PGPASSWORD'] = passwd
             # Allow SIGINT to pass to psql to abort queries.
             signal.signal(signal.SIGINT, signal.SIG_IGN)
-            subprocess.check_call(args)
+            subprocess.run(args, check=True, env=env)
+        finally:
+            # Restore the original SIGINT handler.
+            signal.signal(signal.SIGINT, sigint_handler)
         finally:
             # Restore the original SIGINT handler.
             signal.signal(signal.SIGINT, sigint_handler)