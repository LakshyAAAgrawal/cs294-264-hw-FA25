diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py
index 4eddd12b1..1008163d2 100644
--- a/sklearn/compose/_column_transformer.py
+++ b/sklearn/compose/_column_transformer.py
@@ -232,49 +232,45 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):
 
     def __init__(
         self,
-        transformers,
-        *,
-        remainder="drop",
-        sparse_threshold=0.3,
-        n_jobs=None,
-        transformer_weights=None,
-        verbose=False,
-        verbose_feature_names_out=True,
-    ):
-        self.transformers = transformers
-        self.remainder = remainder
-        self.sparse_threshold = sparse_threshold
-        self.n_jobs = n_jobs
-        self.transformer_weights = transformer_weights
-        self.verbose = verbose
-        self.verbose_feature_names_out = verbose_feature_names_out
+def set_output(self, *, transform=None):
+        """Set the output container when `"transform"` and `"fit_transform"` are called.
 
-    @property
-    def _transformers(self):
-        """
-        Internal list of transformer only containing the name and
-        transformers, dropping the columns. This is for the implementation
-        of get_params via BaseComposition._get_params which expects lists
-        of tuples of len 2.
-        """
-        try:
-            return [(name, trans) for name, trans, _ in self.transformers]
-        except (TypeError, ValueError):
-            return self.transformers
+        Calling `set_output` will set the output of all estimators in `transformers`
+        and `transformers_`.
 
-    @_transformers.setter
-    def _transformers(self, value):
-        try:
-            self.transformers = [
-                (name, trans, col)
-                for ((name, trans), (_, _, col)) in zip(value, self.transformers)
-            ]
-        except (TypeError, ValueError):
-            self.transformers = value
+        Parameters
+        ----------
+        transform : {"default", "pandas"}, default=None
+            Configure output of `transform` and `fit_transform`.
 
-    def set_output(self, *, transform=None):
-        """Set the output container when `"transform"` and `"fit_transform"` are called.
+            - `"default"`: Default output format of a transformer
+            - `"pandas"`: DataFrame output
+            - `None`: Transform configuration is unchanged
 
+        Returns
+        -------
+        self : estimator instance
+            Estimator instance.
+        """
+        super().set_output(transform=transform)
+        transformers = (
+            trans
+            for _, trans, _ in chain(
+                self.transformers, getattr(self, "transformers_", [])
+            )
+            if trans not in {"passthrough", "drop"}
+        )
+        for trans in transformers:
+            _safe_set_output(trans, transform=transform)
+
+        # Ensure the remainder estimator (if present and not "drop"/"passthrough")
+        # also has its output configured. The remainder may be provided as the
+        # `remainder` attribute and thus not present in `self.transformers`.
+        remainder = getattr(self, "remainder", None)
+        if remainder is not None and remainder not in {"passthrough", "drop"}:
+            _safe_set_output(remainder, transform=transform)
+
+        return self
         Calling `set_output` will set the output of all estimators in `transformers`
         and `transformers_`.
 
@@ -303,6 +299,21 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):
         for trans in transformers:
             _safe_set_output(trans, transform=transform)
 
+        # Ensure the remainder estimator (if present and not "drop"/"passthrough")
+        # also has its output configured. The remainder may be provided as the
+        # `remainder` attribute and thus not present in `self.transformers`.
+        remainder = getattr(self, "remainder", None)
+        if remainder is not None and remainder not in {"passthrough", "drop"}:
+            _safe_set_output(remainder, transform=transform)
+
+        return self
+                self.transformers, getattr(self, "transformers_", [])
+            )
+            if trans not in {"passthrough", "drop"}
+        )
+        for trans in transformers:
+            _safe_set_output(trans, transform=transform)
+
         return self
 
     def get_params(self, deep=True):