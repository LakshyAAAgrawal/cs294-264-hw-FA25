diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d1..8a1d26907 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -491,9 +491,6 @@ def did_you_mean(s, candidates, n=3, cutoff=0.8, fix=None):
                        matches[-1])
         return 'Did you mean {0}?'.format(matches)
 
-    return ''
-
-
 class InheritDocstrings(type):
     """
     This metaclass makes methods of a class automatically have their
@@ -527,6 +524,38 @@ class InheritDocstrings(type):
                  and len(key) > 4) or
                 not key.startswith('_'))
 
+        for key, val in dct.items():
+            if (is_public_member(key) and getattr(val, '__doc__', None) is None):
+                # Determine the target function object that should receive the
+                # inherited docstring. For plain functions this is the function
+                # itself; for properties use the fget; for classmethod/staticmethod
+                # use the underlying __func__.
+                target = None
+                if inspect.isfunction(val):
+                    target = val
+                elif isinstance(val, property):
+                    target = val.fget
+                elif isinstance(val, (classmethod, staticmethod)):
+                    target = val.__func__
+                if target is None:
+                    continue
+
+                for base in cls.__mro__[1:]:
+                    super_method = getattr(base, key, None)
+                    if super_method is not None:
+                        # Prefer the descriptor's __doc__, but fall back to
+                        # underlying function docstrings for descriptors.
+                        doc = getattr(super_method, '__doc__', None)
+                        if doc is None:
+                            if isinstance(super_method, property) and super_method.fget is not None:
+                                doc = super_method.fget.__doc__
+                            elif isinstance(super_method, (classmethod, staticmethod)) and getattr(super_method, '__func__', None) is not None:
+                                doc = super_method.__func__.__doc__
+                        if doc:
+                            target.__doc__ = doc
+                            break
+
+        super().__init__(name, bases, dct)
         for key, val in dct.items():
             if (inspect.isfunction(val) and
                 is_public_member(key) and