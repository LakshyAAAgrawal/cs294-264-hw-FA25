diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py
index 87707d48f..bd8c3e7aa 100644
--- a/sphinx/util/typing.py
+++ b/sphinx/util/typing.py
@@ -155,21 +155,27 @@ def _restify_py37(cls: Optional[Type]) -> str:
             cls.__module__ == 'typing' and cls.__origin__ is Union):
         # Union
         if len(cls.__args__) > 1 and cls.__args__[-1] is NoneType:
-            if len(cls.__args__) > 2:
-                args = ', '.join(restify(a) for a in cls.__args__[:-1])
-                return ':py:obj:`~typing.Optional`\\ [:obj:`~typing.Union`\\ [%s]]' % args
-            else:
-                return ':py:obj:`~typing.Optional`\\ [%s]' % restify(cls.__args__[0])
+elif isinstance(cls, typing._SpecialForm):
+        return ':py:obj:`~%s.%s`' % (cls.__module__, cls._name)
+    elif hasattr(cls, '__qualname__'):
+        qual = getattr(cls, '__qualname__', None) or getattr(cls, '__name__', None)
+        if not qual:
+            return repr(cls)
+        if cls.__module__ == 'typing':
+            return ':py:class:`~%s.%s`' % (cls.__module__, qual)
         else:
-            args = ', '.join(restify(a) for a in cls.__args__)
-            return ':py:obj:`~typing.Union`\\ [%s]' % args
-    elif inspect.isgenericalias(cls):
-        if isinstance(cls.__origin__, typing._SpecialForm):
-            text = restify(cls.__origin__)  # type: ignore
-        elif getattr(cls, '_name', None):
-            if cls.__module__ == 'typing':
-                text = ':py:class:`~%s.%s`' % (cls.__module__, cls._name)
-            else:
+            return ':py:class:`%s.%s`' % (cls.__module__, qual)
+    elif isinstance(cls, ForwardRef):
+        return ':py:class:`%s`' % cls.__forward_arg__
+    else:
+        # not a class (ex. TypeVar)
+        name = getattr(cls, '__name__', None)
+        if not name:
+            return repr(cls)
+        if cls.__module__ == 'typing':
+            return ':py:obj:`~%s.%s`' % (cls.__module__, name)
+        else:
+            return ':py:obj:`%s.%s`' % (cls.__module__, name)
                 text = ':py:class:`%s.%s`' % (cls.__module__, cls._name)
         else:
             text = restify(cls.__origin__)