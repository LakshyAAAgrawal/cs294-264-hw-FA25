diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index 7fca6eff30..df498e344f 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -11,54 +11,39 @@ def _escape_pgpass(txt):
     Escape a fragment of a PostgreSQL .pgpass file.
     """
     return txt.replace('\\', '\\\\').replace(':', '\\:')
-
-
-class DatabaseClient(BaseDatabaseClient):
-    executable_name = 'psql'
-
-    @classmethod
-    def runshell_db(cls, conn_params):
-        args = [cls.executable_name]
-
-        host = conn_params.get('host', '')
-        port = conn_params.get('port', '')
-        dbname = conn_params.get('database', '')
-        user = conn_params.get('user', '')
-        passwd = conn_params.get('password', '')
-
-        if user:
-            args += ['-U', user]
-        if host:
-            args += ['-h', host]
-        if port:
-            args += ['-p', str(port)]
-        args += [dbname]
-
-        temp_pgpass = None
-        sigint_handler = signal.getsignal(signal.SIGINT)
-        try:
-            if passwd:
-                # Create temporary .pgpass file.
-                temp_pgpass = NamedTemporaryFile(mode='w+')
-                try:
-                    print(
-                        _escape_pgpass(host) or '*',
-                        str(port) or '*',
-                        _escape_pgpass(dbname) or '*',
-                        _escape_pgpass(user) or '*',
-                        _escape_pgpass(passwd),
-                        file=temp_pgpass,
-                        sep=':',
-                        flush=True,
-                    )
-                    os.environ['PGPASSFILE'] = temp_pgpass.name
-                except UnicodeEncodeError:
-                    # If the current locale can't encode the data, let the
-                    # user input the password manually.
-                    pass
-            # Allow SIGINT to pass to psql to abort queries.
-            signal.signal(signal.SIGINT, signal.SIG_IGN)
-            subprocess.check_call(args)
+def runshell_db(cls, conn_params):
+            args = [cls.executable_name]
+
+            host = conn_params.get('host', '')
+            port = conn_params.get('port', '')
+            dbname = conn_params.get('database', '')
+            user = conn_params.get('user', '')
+            passwd = conn_params.get('password', '')
+
+            if user:
+                args += ['-U', user]
+            if host:
+                args += ['-h', host]
+            if port:
+                args += ['-p', str(port)]
+            args += [dbname]
+
+            sigint_handler = signal.getsignal(signal.SIGINT)
+            try:
+                env = os.environ.copy()
+                if passwd:
+                    try:
+                        env['PGPASSWORD'] = passwd
+                    except UnicodeEncodeError:
+                        # If the current locale can't encode the data, let the
+                        # user input the password manually.
+                        pass
+                # Allow SIGINT to pass to psql to abort queries.
+                signal.signal(signal.SIGINT, signal.SIG_IGN)
+                subprocess.run(args, env=env, check=True)
+            finally:
+                # Restore the original SIGINT handler.
+                signal.signal(signal.SIGINT, sigint_handler)
         finally:
             # Restore the original SIGINT handler.
             signal.signal(signal.SIGINT, sigint_handler)