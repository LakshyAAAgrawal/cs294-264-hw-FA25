2025-10-03 19:35:45,212 - INFO - Creating container for sympy__sympy-17655...
2025-10-03 19:35:45,359 - INFO - Container for sympy__sympy-17655 created: 63806261c18067e45ce666839dab243f695014d17c2db971ae897d6ff8167b29
2025-10-03 19:35:45,534 - INFO - Container for sympy__sympy-17655 started: 63806261c18067e45ce666839dab243f695014d17c2db971ae897d6ff8167b29
2025-10-03 19:35:45,534 - INFO - Intermediate patch for sympy__sympy-17655 written to logs/run_evaluation/my_evaluation_run_8/gpt-5-mini/sympy__sympy-17655/patch.diff, now applying to container...
2025-10-03 19:35:45,660 - INFO - Failed to apply patch to container: git apply --verbose
2025-10-03 19:35:45,718 - INFO - Failed to apply patch to container: git apply --verbose --reject
2025-10-03 19:35:45,776 - INFO - >>>>> Applied Patch:
patching file sympy/geometry/point.py
patch unexpectedly ends in middle of line
Hunk #1 succeeded at 145 with fuzz 1.

2025-10-03 19:35:46,109 - INFO - Git diff before:
diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..0f09f61dd3 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -145,34 +145,63 @@ def __new__(cls, *args, **kwargs):
                 raise ValueError(message)
             elif on_morph == 'warn':
                 warnings.warn(message)
-            else:
-                raise ValueError(filldedent('''
-                        on_morph value should be 'error',
-                        'warn' or 'ignore'.'''))
-        if any(coords[dim:]):
-            raise ValueError('Nonzero coordinates cannot be removed.')
-        if any(a.is_number and im(a) for a in coords):
-            raise ValueError('Imaginary coordinates are not permitted.')
-        if not all(isinstance(a, Expr) for a in coords):
-            raise TypeError('Coordinates must be valid SymPy expressions.')
-
-        # pad with zeros appropriately
-        coords = coords[:dim] + (S.Zero,)*(dim - len(coords))
-
-        # Turn any Floats into rationals and simplify
-        # any expressions before we instantiate
-        if evaluate:
-            coords = coords.xreplace(dict(
-                [(f, simplify(nsimplify(f, rational=True)))
-                 for f in coords.atoms(Float)]))
-
-        # return 2D or 3D instances
-        if len(coords) == 2:
-            kwargs['_nocheck'] = True
-            return Point2D(*coords, **kwargs)
-        elif len(coords) == 3:
-            kwargs['_nocheck'] = True
-            return Point3D(*coords, **kwargs)
+def __add__(self, other):
+        """Add other to self by incrementing self's coordinates by
+        those of other.
+
+        Notes
+        =====
+
+        >>> from sympy.geometry.point import Point
+
+        When sequences of coordinates are passed to Point methods, they
+        are converted to a Point internally. This __add__ method does
+        not do that so if floating point values are used, a floating
+        point result (in terms of SymPy Floats) will be returned.
+
+        >>> Point(1, 2) + (.1, .2)
+        Point2D(1.1, 2.2)
+
+        If this is not desired, the `translate` method can be used or
+        another Point can be added:
+
+        >>> Point(1, 2).translate(.1, .2)
+        Point2D(11/10, 11/5)
+        >>> Point(1, 2) + Point(.1, .2)
+        Point2D(11/10, 11/5)
+
+        See Also
+        ========
+        sympy.geometry.point.Point.translate
+
+        """
+        # Handle expressions like `2*Point(...)` where `other` is a Mul
+        # containing a Point. In that case extract the Point and scalar
+        # and perform the scaled addition.
+        if getattr(other, 'is_Mul', False):
+            point_args = [arg for arg in other.args if isinstance(arg, Point)]
+            if len(point_args) == 1:
+                p = point_args[0]
+                factor = S.One
+                for a in other.args:
+                    if a is not p:
+                        factor = factor * a
+                try:
+                    s, o = Point._normalize_dimension(self, p*factor)
+                except TypeError:
+                    # fall through to the original handling
+                    pass
+                else:
+                    coords = [simplify(a + b) for a, b in zip(s, o)]
+                    return Point(coords, evaluate=False)
+
+        try:
+            s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
+        except TypeError:
+            raise GeometryError("Don't know how to add {} and a Point object".format(other))
+
+        coords = [simplify(a + b) for a, b in zip(s, o)]
+        return Point(coords, evaluate=False)
 
         # the general Point
         return GeometryEntity.__new__(cls, *coords)
2025-10-03 19:35:46,109 - INFO - Eval script for sympy__sympy-17655 written to logs/run_evaluation/my_evaluation_run_8/gpt-5-mini/sympy__sympy-17655/eval.sh; copying to container...
2025-10-03 19:35:49,545 - INFO - Test runtime: 3.38 seconds
2025-10-03 19:35:49,545 - INFO - Test output for sympy__sympy-17655 written to logs/run_evaluation/my_evaluation_run_8/gpt-5-mini/sympy__sympy-17655/test_output.txt
2025-10-03 19:35:49,624 - INFO - Git diff after:
diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..0f09f61dd3 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -145,34 +145,63 @@ def __new__(cls, *args, **kwargs):
                 raise ValueError(message)
             elif on_morph == 'warn':
                 warnings.warn(message)
-            else:
-                raise ValueError(filldedent('''
-                        on_morph value should be 'error',
-                        'warn' or 'ignore'.'''))
-        if any(coords[dim:]):
-            raise ValueError('Nonzero coordinates cannot be removed.')
-        if any(a.is_number and im(a) for a in coords):
-            raise ValueError('Imaginary coordinates are not permitted.')
-        if not all(isinstance(a, Expr) for a in coords):
-            raise TypeError('Coordinates must be valid SymPy expressions.')
-
-        # pad with zeros appropriately
-        coords = coords[:dim] + (S.Zero,)*(dim - len(coords))
-
-        # Turn any Floats into rationals and simplify
-        # any expressions before we instantiate
-        if evaluate:
-            coords = coords.xreplace(dict(
-                [(f, simplify(nsimplify(f, rational=True)))
-                 for f in coords.atoms(Float)]))
-
-        # return 2D or 3D instances
-        if len(coords) == 2:
-            kwargs['_nocheck'] = True
-            return Point2D(*coords, **kwargs)
-        elif len(coords) == 3:
-            kwargs['_nocheck'] = True
-            return Point3D(*coords, **kwargs)
+def __add__(self, other):
+        """Add other to self by incrementing self's coordinates by
+        those of other.
+
+        Notes
+        =====
+
+        >>> from sympy.geometry.point import Point
+
+        When sequences of coordinates are passed to Point methods, they
+        are converted to a Point internally. This __add__ method does
+        not do that so if floating point values are used, a floating
+        point result (in terms of SymPy Floats) will be returned.
+
+        >>> Point(1, 2) + (.1, .2)
+        Point2D(1.1, 2.2)
+
+        If this is not desired, the `translate` method can be used or
+        another Point can be added:
+
+        >>> Point(1, 2).translate(.1, .2)
+        Point2D(11/10, 11/5)
+        >>> Point(1, 2) + Point(.1, .2)
+        Point2D(11/10, 11/5)
+
+        See Also
+        ========
+        sympy.geometry.point.Point.translate
+
+        """
+        # Handle expressions like `2*Point(...)` where `other` is a Mul
+        # containing a Point. In that case extract the Point and scalar
+        # and perform the scaled addition.
+        if getattr(other, 'is_Mul', False):
+            point_args = [arg for arg in other.args if isinstance(arg, Point)]
+            if len(point_args) == 1:
+                p = point_args[0]
+                factor = S.One
+                for a in other.args:
+                    if a is not p:
+                        factor = factor * a
+                try:
+                    s, o = Point._normalize_dimension(self, p*factor)
+                except TypeError:
+                    # fall through to the original handling
+                    pass
+                else:
+                    coords = [simplify(a + b) for a, b in zip(s, o)]
+                    return Point(coords, evaluate=False)
+
+        try:
+            s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
+        except TypeError:
+            raise GeometryError("Don't know how to add {} and a Point object".format(other))
+
+        coords = [simplify(a + b) for a, b in zip(s, o)]
+        return Point(coords, evaluate=False)
 
         # the general Point
         return GeometryEntity.__new__(cls, *coords)
2025-10-03 19:35:49,624 - INFO - Grading answer for sympy__sympy-17655...
2025-10-03 19:35:49,628 - INFO - report: {'sympy__sympy-17655': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_point', 'test_point3D']}, 'PASS_TO_PASS': {'success': [], 'failure': ['test_Point2D', 'test_issue_9214', 'test_issue_11617', 'test_transform', 'test_concyclic_doctest_bug', 'test_arguments', 'test_unit', 'test_dot', 'test__normalize_dimension']}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for sympy__sympy-17655: resolved: False
2025-10-03 19:35:49,628 - INFO - Attempting to stop container sweb.eval.sympy__sympy-17655.my_evaluation_run_8...
2025-10-03 19:36:04,778 - INFO - Attempting to remove container sweb.eval.sympy__sympy-17655.my_evaluation_run_8...
2025-10-03 19:36:05,229 - INFO - Container sweb.eval.sympy__sympy-17655.my_evaluation_run_8 removed.
2025-10-03 19:36:05,229 - INFO - Attempting to remove image swebench/sweb.eval.x86_64.sympy_1776_sympy-17655:latest...
2025-10-03 19:36:05,386 - INFO - Image swebench/sweb.eval.x86_64.sympy_1776_sympy-17655:latest removed.
