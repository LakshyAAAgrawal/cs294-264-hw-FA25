diff --git a/django/forms/models.py b/django/forms/models.py
index dafc11f995..8627141514 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -10,9 +10,9 @@ from django.core.exceptions import (
 )
 from django.forms.fields import ChoiceField, Field
 from django.forms.forms import BaseForm, DeclarativeFieldsMetaclass
-from django.forms.formsets import BaseFormSet, formset_factory
-from django.forms.utils import ErrorList
 from django.forms.widgets import (
+    HiddenInput, MultipleHiddenInput, SelectMultiple, RadioSelect,
+)
     HiddenInput, MultipleHiddenInput, SelectMultiple,
 )
 from django.utils.text import capfirst, get_text_list
@@ -1166,23 +1166,26 @@ class ModelChoiceIterator:
 
     def choice(self, obj):
         return (
-            ModelChoiceIteratorValue(self.field.prepare_value(obj), obj),
-            self.field.label_from_instance(obj),
-        )
-
-
-class ModelChoiceField(ChoiceField):
-    """A ChoiceField whose choices are a model QuerySet."""
-    # This class is a subclass of ChoiceField for purity, but it doesn't
-    # actually use any of ChoiceField's implementation.
-    default_error_messages = {
-        'invalid_choice': _('Select a valid choice. That choice is not one of'
-                            ' the available choices.'),
-    }
-    iterator = ModelChoiceIterator
-
-    def __init__(self, queryset, *, empty_label="---------",
+def __init__(self, queryset, *, empty_label="---------",
                  required=True, widget=None, label=None, initial=None,
+                 help_text='', to_field_name=None, limit_choices_to=None,
+                 blank=False, **kwargs):
+        # Call Field instead of ChoiceField __init__() because we don't need
+        # ChoiceField.__init__().
+        Field.__init__(
+            self, required=required, widget=widget, label=label,
+            initial=initial, help_text=help_text, **kwargs
+        )
+        if (
+            (required and initial is not None) or
+            (isinstance(self.widget, RadioSelect) and not blank)
+        ):
+            self.empty_label = None
+        else:
+            self.empty_label = empty_label
+        self.queryset = queryset
+        self.limit_choices_to = limit_choices_to   # limit the queryset later.
+        self.to_field_name = to_field_name
                  help_text='', to_field_name=None, limit_choices_to=None,
                  **kwargs):
         if required and (initial is not None):