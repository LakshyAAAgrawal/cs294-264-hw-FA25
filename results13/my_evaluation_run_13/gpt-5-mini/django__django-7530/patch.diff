diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py
index 0b39536f5b..353a1ab943 100644
--- a/django/core/management/commands/makemigrations.py
+++ b/django/core/management/commands/makemigrations.py
@@ -75,38 +75,36 @@ class Command(BaseCommand):
         if self.exit_code:
             warnings.warn(
                 "The --exit option is deprecated in favor of the --check option.",
-                RemovedInDjango20Warning
-            )
-
-        # Make sure the app they asked for exists
-        app_labels = set(app_labels)
-        bad_app_labels = set()
-        for app_label in app_labels:
-            try:
-                apps.get_app_config(app_label)
-            except LookupError:
-                bad_app_labels.add(app_label)
-        if bad_app_labels:
-            for app_label in bad_app_labels:
-                self.stderr.write("App '%s' could not be found. Is it in INSTALLED_APPS?" % app_label)
-            sys.exit(2)
-
-        # Load the current graph state. Pass in None for the connection so
-        # the loader doesn't try to resolve replaced migrations from DB.
-        loader = MigrationLoader(None, ignore_no_migrations=True)
-
-        # Raise an error if any migrations are applied before their dependencies.
-        consistency_check_labels = set(config.label for config in apps.get_app_configs())
-        # Non-default databases are only checked if database routers used.
-        aliases_to_check = connections if settings.DATABASE_ROUTERS else [DEFAULT_DB_ALIAS]
-        for alias in sorted(aliases_to_check):
-            connection = connections[alias]
-            if (connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any(
-                    # At least one model must be migrated to the database.
-                    router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)
-                    for app_label in consistency_check_labels
-                    for model in apps.get_models(app_label)
-            )):
+# Make sure the app they asked for exists
+          app_labels = set(app_labels)
+          bad_app_labels = set()
+          for app_label in app_labels:
+              try:
+                  apps.get_app_config(app_label)
+              except LookupError:
+                  bad_app_labels.add(app_label)
+          if bad_app_labels:
+              for app_label in bad_app_labels:
+                  self.stderr.write("App '%s' could not be found. Is it in INSTALLED_APPS?" % app_label)
+              sys.exit(2)
+    
+          # Load the current graph state. Pass in None for the connection so
+          # the loader doesn't try to resolve replaced migrations from DB.
+          loader = MigrationLoader(None, ignore_no_migrations=True)
+    
+          # Raise an error if any migrations are applied before their dependencies.
+          consistency_check_labels = set(config.label for config in apps.get_app_configs())
+          # Non-default databases are only checked if database routers used.
+          aliases_to_check = connections if settings.DATABASE_ROUTERS else [DEFAULT_DB_ALIAS]
+          for alias in sorted(aliases_to_check):
+              connection = connections[alias]
+              if (connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any(
+                      # At least one model must be migrated to the database.
+                      router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)
+                      for app_label in consistency_check_labels
+                      for model in apps.get_app_config(app_label).get_models()
+              )):
+                  loader.check_consistent_history(connection)
                 loader.check_consistent_history(connection)
 
         # Before anything else, see if there's conflicting apps and drop out