diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py
index 4eddd12b1..329071fea 100644
--- a/sklearn/compose/_column_transformer.py
+++ b/sklearn/compose/_column_transformer.py
@@ -234,33 +234,48 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):
         self,
         transformers,
         *,
-        remainder="drop",
-        sparse_threshold=0.3,
-        n_jobs=None,
-        transformer_weights=None,
-        verbose=False,
-        verbose_feature_names_out=True,
-    ):
-        self.transformers = transformers
-        self.remainder = remainder
-        self.sparse_threshold = sparse_threshold
-        self.n_jobs = n_jobs
-        self.transformer_weights = transformer_weights
-        self.verbose = verbose
-        self.verbose_feature_names_out = verbose_feature_names_out
-
-    @property
-    def _transformers(self):
-        """
-        Internal list of transformer only containing the name and
-        transformers, dropping the columns. This is for the implementation
-        of get_params via BaseComposition._get_params which expects lists
-        of tuples of len 2.
+def set_output(self, *, transform=None):
+        """Set the output container when `"transform"` and `"fit_transform"` are called.
+    
+        Calling `set_output` will set the output of all estimators in `transformers`
+        and `transformers_`.
+    
+        Parameters
+        ----------
+        transform : {"default", "pandas"}, default=None
+            Configure output of `transform` and `fit_transform`.
+    
+            - `"default"`: Default output format of a transformer
+            - `"pandas"`: DataFrame output
+            - `None`: Transform configuration is unchanged
+    
+        Returns
+        -------
+        self : estimator instance
+            Estimator instance.
         """
-        try:
-            return [(name, trans) for name, trans, _ in self.transformers]
-        except (TypeError, ValueError):
-            return self.transformers
+        super().set_output(transform=transform)
+        # Collect transformers from the user-specified transformers and the
+        # fitted transformers (if present). Strings 'passthrough' and 'drop' are
+        # skipped.
+        transformers = (
+            trans
+            for _, trans, _ in chain(
+                self.transformers, getattr(self, "transformers_", [])
+            )
+            if trans not in {"passthrough", "drop"}
+        )
+        for trans in transformers:
+            _safe_set_output(trans, transform=transform)
+    
+        # If the remainder is an estimator (not 'drop' or 'passthrough'),
+        # make sure to configure its output as well. This is necessary because
+        # `remainder` is stored separately from `transformers` and may be an
+        # estimator provided by the user prior to fitting.
+        if getattr(self, "remainder", None) not in {"passthrough", "drop", None}:
+            _safe_set_output(self.remainder, transform=transform)
+    
+        return self
 
     @_transformers.setter
     def _transformers(self, value):