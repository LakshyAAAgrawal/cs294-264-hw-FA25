diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 92fe4affb9..efde5f6199 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -266,16 +266,22 @@ class Collector:
 
         # if possible, bring the models in an order suitable for databases that
         # don't support transactions or cannot defer constraint checks until the
-        # end of a transaction.
-        self.sort()
-        # number of objects deleted for each model label
-        deleted_counter = Counter()
-
-        # Optimize for the case with a single obj and no dependencies
-        if len(self.data) == 1 and len(instances) == 1:
-            instance = list(instances)[0]
-            if self.can_fast_delete(instance):
-                with transaction.mark_for_rollback_on_error():
+# Optimize for the case with a single obj and no dependencies
+          if len(self.data) == 1 and len(instances) == 1:
+              instance = list(instances)[0]
+              if self.can_fast_delete(instance):
+                  with transaction.mark_for_rollback_on_error():
+                      # send pre_delete signal for non-auto-created models
+                      if not model._meta.auto_created:
+                          signals.pre_delete.send(sender=model, instance=instance, using=self.using)
+                      count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
+                      # send post_delete signal for non-auto-created models
+                      if not model._meta.auto_created:
+                          signals.post_delete.send(sender=model, instance=instance, using=self.using)
+                      # clear the instance PK so the in-memory instance reflects deletion
+                      setattr(instance, model._meta.pk.attname, None)
+                  return count, {model._meta.label: count}
+
                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
                 return count, {model._meta.label: count}