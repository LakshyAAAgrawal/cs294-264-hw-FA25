diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index a436880c4b..f2d40a1a85 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -91,38 +91,6 @@ def get_quantity_scale_factor(self, unit):
     def get_unit_system(unit_system):
         if isinstance(unit_system, UnitSystem):
             return unit_system
-
-        if unit_system not in UnitSystem._unit_systems:
-            raise ValueError(
-                "Unit system is not supported. Currently"
-                "supported unit systems are {}".format(
-                    ", ".join(sorted(UnitSystem._unit_systems))
-                )
-            )
-
-        return UnitSystem._unit_systems[unit_system]
-
-    @staticmethod
-    def get_default_unit_system():
-        return UnitSystem._unit_systems["SI"]
-
-    @property
-    def dim(self):
-        """
-        Give the dimension of the system.
-
-        That is return the number of units forming the basis.
-        """
-        return len(self._base_units)
-
-    @property
-    def is_consistent(self):
-        """
-        Check if the underlying dimension system is consistent.
-        """
-        # test is performed in DimensionSystem
-        return self.get_dimension_system().is_consistent
-
     @property
     def derived_units(self) -> tDict[Dimension, Quantity]:
         return self._derived_units
@@ -173,13 +141,16 @@ def _collect_factor_and_dimension(self, expr):
         elif isinstance(expr, Add):
             factor, dim = self._collect_factor_and_dimension(expr.args[0])
             for addend in expr.args[1:]:
-                addend_factor, addend_dim = \
-                    self._collect_factor_and_dimension(addend)
-                if dim != addend_dim:
+                addend_factor, addend_dim = self._collect_factor_and_dimension(addend)
+                # consider equivalent dimensions according to the current
+                # dimension system rather than requiring exact object equality
+                dim_sys = self.get_dimension_system()
+                deps1 = dim_sys.get_dimensional_dependencies(dim, mark_dimensionless=True)
+                deps2 = dim_sys.get_dimensional_dependencies(addend_dim, mark_dimensionless=True)
+                if deps1 != deps2:
                     raise ValueError(
                         'Dimension of "{}" is {}, '
-                        'but it should be {}'.format(
-                            addend, addend_dim, dim))
+                        'but it should be {}'.format(addend, addend_dim, dim))
                 factor += addend_factor
             return factor, dim
         elif isinstance(expr, Derivative):