+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   sympy/physics/units/unitsystem.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	sympy/physics/units/unitsystem.py.orig

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 8d9d9ffdba25d753ae469e0d393e8d039dd18af5
Author: SWE-bench <setup@swebench.config>
Date:   Wed Sep 10 16:54:54 2025 +0000

    SWE-bench
+ git -c core.fileMode=false diff e8c22f6eac7314be8d92590bfff92ced79ee03e2
diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index a436880c4b..f2d40a1a85 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -91,38 +91,6 @@ def get_quantity_scale_factor(self, unit):
     def get_unit_system(unit_system):
         if isinstance(unit_system, UnitSystem):
             return unit_system
-
-        if unit_system not in UnitSystem._unit_systems:
-            raise ValueError(
-                "Unit system is not supported. Currently"
-                "supported unit systems are {}".format(
-                    ", ".join(sorted(UnitSystem._unit_systems))
-                )
-            )
-
-        return UnitSystem._unit_systems[unit_system]
-
-    @staticmethod
-    def get_default_unit_system():
-        return UnitSystem._unit_systems["SI"]
-
-    @property
-    def dim(self):
-        """
-        Give the dimension of the system.
-
-        That is return the number of units forming the basis.
-        """
-        return len(self._base_units)
-
-    @property
-    def is_consistent(self):
-        """
-        Check if the underlying dimension system is consistent.
-        """
-        # test is performed in DimensionSystem
-        return self.get_dimension_system().is_consistent
-
     @property
     def derived_units(self) -> tDict[Dimension, Quantity]:
         return self._derived_units
@@ -173,13 +141,16 @@ def _collect_factor_and_dimension(self, expr):
         elif isinstance(expr, Add):
             factor, dim = self._collect_factor_and_dimension(expr.args[0])
             for addend in expr.args[1:]:
-                addend_factor, addend_dim = \
-                    self._collect_factor_and_dimension(addend)
-                if dim != addend_dim:
+                addend_factor, addend_dim = self._collect_factor_and_dimension(addend)
+                # consider equivalent dimensions according to the current
+                # dimension system rather than requiring exact object equality
+                dim_sys = self.get_dimension_system()
+                deps1 = dim_sys.get_dimensional_dependencies(dim, mark_dimensionless=True)
+                deps2 = dim_sys.get_dimensional_dependencies(addend_dim, mark_dimensionless=True)
+                if deps1 != deps2:
                     raise ValueError(
                         'Dimension of "{}" is {}, '
-                        'but it should be {}'.format(
-                            addend, addend_dim, dim))
+                        'but it should be {}'.format(addend, addend_dim, dim))
                 factor += addend_factor
             return factor, dim
         elif isinstance(expr, Derivative):
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.12.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.12.dev0
    Uninstalling sympy-1.12.dev0:
      Successfully uninstalled sympy-1.12.dev0
  DEPRECATION: Legacy editable install of sympy==1.12.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.0 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout e8c22f6eac7314be8d92590bfff92ced79ee03e2 sympy/physics/units/tests/test_quantities.py
Updated 0 paths from b86b9b19fd
+ git apply -v -
Checking patch sympy/physics/units/tests/test_quantities.py...
Applied patch sympy/physics/units/tests/test_quantities.py cleanly.
+ : '>>>>> Start Test Output'
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ bin/test -C --verbose sympy/physics/units/tests/test_quantities.py
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.20-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        42468484
hash randomization: on (PYTHONHASHSEED=1375210789)

sympy/physics/units/tests/test_quantities.py[34] 
test_str_repr ok
test_eq ok
test_convert_to E
test_Quantity_definition E
test_abbrev E
test_print ok
test_Quantity_eq ok
test_add_sub E
test_quantity_abs E
test_check_unit_consistency E
test_mul_div E
test_units E
test_issue_quart E
test_issue_5565 ok
test_find_unit E
test_Quantity_derivative ok
test_quantity_postprocessing ok
test_factor_and_dimension E
test_factor_and_dimension_with_Abs f
test_dimensional_expr_of_derivative E
test_get_dimensional_expr_with_function ok
test_binary_information E
test_conversion_with_2_nonstandard_dimensions E
test_eval_subs ok
test_issue_14932 E
test_issue_14547 ok
test_deprecated_quantity_methods E
test_issue_22164 E
test_issue_22819 E
test_issue_20288 E
test_issue_24062 E
test_issue_24211 E
test_prefixed_property ok
test_physics_constant ok                                                  [FAIL]


________________________________________________________________________________
_________ sympy/physics/units/tests/test_quantities.py:test_convert_to _________
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 49, in test_convert_to
    assert q.convert_to(m) == 5000*m
  File "/testbed/sympy/physics/units/quantities.py", line 238, in convert_to
    return convert_to(self, other, unit_system)
  File "/testbed/sympy/physics/units/util.py", line 122, in convert_to
    depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)
  File "/testbed/sympy/physics/units/util.py", line 26, in _get_conversion_matrix_for_expr
    dimension_system = unit_system.get_dimension_system()
AttributeError: 'NoneType' object has no attribute 'get_dimension_system'
________________________________________________________________________________
____ sympy/physics/units/tests/test_quantities.py:test_Quantity_definition _____
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 75, in test_Quantity_definition
    assert q.scale_factor == 10
  File "/testbed/sympy/physics/units/quantities.py", line 165, in scale_factor
    unit_system = UnitSystem.get_default_unit_system()
AttributeError: type object 'UnitSystem' has no attribute 'get_default_unit_system'
________________________________________________________________________________
___________ sympy/physics/units/tests/test_quantities.py:test_abbrev ___________
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 108, in test_abbrev
    assert u.scale_factor == 2
  File "/testbed/sympy/physics/units/quantities.py", line 165, in scale_factor
    unit_system = UnitSystem.get_default_unit_system()
AttributeError: type object 'UnitSystem' has no attribute 'get_default_unit_system'
________________________________________________________________________________
__________ sympy/physics/units/tests/test_quantities.py:test_add_sub ___________
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 144, in test_add_sub
    assert (u + v.convert_to(u)) == (1 + S.Half)*u
  File "/testbed/sympy/physics/units/quantities.py", line 238, in convert_to
    return convert_to(self, other, unit_system)
  File "/testbed/sympy/physics/units/util.py", line 122, in convert_to
    depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)
  File "/testbed/sympy/physics/units/util.py", line 26, in _get_conversion_matrix_for_expr
    dimension_system = unit_system.get_dimension_system()
AttributeError: 'NoneType' object has no attribute 'get_dimension_system'
________________________________________________________________________________
________ sympy/physics/units/tests/test_quantities.py:test_quantity_abs ________
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 169, in test_quantity_abs
    Dq1 = Dimension(Quantity.get_dimensional_expr(expr))
  File "/testbed/sympy/physics/units/quantities.py", line 195, in get_dimensional_expr
    return unit_system.get_dimensional_expr(expr)
AttributeError: 'NoneType' object has no attribute 'get_dimensional_expr'
________________________________________________________________________________
___ sympy/physics/units/tests/test_quantities.py:test_check_unit_consistency ___
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 191, in test_check_unit_consistency
    raises(ValueError, lambda: check_unit_consistency(u + w))
  File "/testbed/sympy/testing/pytest.py", line 116, in raises
    code()
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 191, in <lambda>
    raises(ValueError, lambda: check_unit_consistency(u + w))
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 189, in check_unit_consistency
    SI._collect_factor_and_dimension(expr)
  File "/testbed/sympy/physics/units/unitsystem.py", line 142, in _collect_factor_and_dimension
    factor, dim = self._collect_factor_and_dimension(expr.args[0])
  File "/testbed/sympy/physics/units/unitsystem.py", line 126, in _collect_factor_and_dimension
    return expr.scale_factor, expr.dimension
  File "/testbed/sympy/physics/units/quantities.py", line 165, in scale_factor
    unit_system = UnitSystem.get_default_unit_system()
AttributeError: type object 'UnitSystem' has no attribute 'get_default_unit_system'
________________________________________________________________________________
__________ sympy/physics/units/tests/test_quantities.py:test_mul_div ___________
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 219, in test_mul_div
    assert v1 == v2.convert_to(v1)
  File "/testbed/sympy/physics/units/quantities.py", line 238, in convert_to
    return convert_to(self, other, unit_system)
  File "/testbed/sympy/physics/units/util.py", line 122, in convert_to
    depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)
  File "/testbed/sympy/physics/units/util.py", line 26, in _get_conversion_matrix_for_expr
    dimension_system = unit_system.get_dimension_system()
AttributeError: 'NoneType' object has no attribute 'get_dimension_system'
________________________________________________________________________________
___________ sympy/physics/units/tests/test_quantities.py:test_units ____________
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 256, in test_units
    assert convert_to((5*m/s * day) / km, 1) == 432
  File "/testbed/sympy/physics/units/util.py", line 109, in convert_to
    expr = expr.replace(lambda x: isinstance(x, Quantity),
  File "/testbed/sympy/core/basic.py", line 1630, in replace
    rv = walk(self, rec_replace)
  File "/testbed/sympy/core/basic.py", line 1605, in walk
    newargs = tuple([walk(a, F) for a in args])
  File "/testbed/sympy/core/basic.py", line 1605, in <listcomp>
    newargs = tuple([walk(a, F) for a in args])
  File "/testbed/sympy/core/basic.py", line 1605, in walk
    newargs = tuple([walk(a, F) for a in args])
  File "/testbed/sympy/core/basic.py", line 1605, in <listcomp>
    newargs = tuple([walk(a, F) for a in args])
  File "/testbed/sympy/core/basic.py", line 1615, in walk
    rv = F(rv)
  File "/testbed/sympy/core/basic.py", line 1623, in rec_replace
    v = _value(expr, result)
  File "/testbed/sympy/core/basic.py", line 1589, in <lambda>
    _value = lambda expr, result: value(expr)
  File "/testbed/sympy/physics/units/util.py", line 110, in <lambda>
    lambda x: x.convert_to(target_units, unit_system))
  File "/testbed/sympy/physics/units/quantities.py", line 238, in convert_to
    return convert_to(self, other, unit_system)
  File "/testbed/sympy/physics/units/util.py", line 122, in convert_to
    depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)
  File "/testbed/sympy/physics/units/util.py", line 26, in _get_conversion_matrix_for_expr
    dimension_system = unit_system.get_dimension_system()
AttributeError: 'NoneType' object has no attribute 'get_dimension_system'
________________________________________________________________________________
________ sympy/physics/units/tests/test_quantities.py:test_issue_quart _________
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 278, in test_issue_quart
    assert convert_to(4 * quart / inch ** 3, meter) == 231
  File "/testbed/sympy/physics/units/util.py", line 109, in convert_to
    expr = expr.replace(lambda x: isinstance(x, Quantity),
  File "/testbed/sympy/core/basic.py", line 1630, in replace
    rv = walk(self, rec_replace)
  File "/testbed/sympy/core/basic.py", line 1605, in walk
    newargs = tuple([walk(a, F) for a in args])
  File "/testbed/sympy/core/basic.py", line 1605, in <listcomp>
    newargs = tuple([walk(a, F) for a in args])
  File "/testbed/sympy/core/basic.py", line 1605, in walk
    newargs = tuple([walk(a, F) for a in args])
  File "/testbed/sympy/core/basic.py", line 1605, in <listcomp>
    newargs = tuple([walk(a, F) for a in args])
  File "/testbed/sympy/core/basic.py", line 1615, in walk
    rv = F(rv)
  File "/testbed/sympy/core/basic.py", line 1623, in rec_replace
    v = _value(expr, result)
  File "/testbed/sympy/core/basic.py", line 1589, in <lambda>
    _value = lambda expr, result: value(expr)
  File "/testbed/sympy/physics/units/util.py", line 110, in <lambda>
    lambda x: x.convert_to(target_units, unit_system))
  File "/testbed/sympy/physics/units/quantities.py", line 238, in convert_to
    return convert_to(self, other, unit_system)
  File "/testbed/sympy/physics/units/util.py", line 122, in convert_to
    depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)
  File "/testbed/sympy/physics/units/util.py", line 26, in _get_conversion_matrix_for_expr
    dimension_system = unit_system.get_dimension_system()
AttributeError: 'NoneType' object has no attribute 'get_dimension_system'
________________________________________________________________________________
_________ sympy/physics/units/tests/test_quantities.py:test_find_unit __________
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 288, in test_find_unit
    assert find_unit(coulomb) == ['C', 'coulomb', 'coulombs', 'planck_charge', 'elementary_charge']
  File "/testbed/sympy/physics/units/__init__.py", line 257, in find_unit
    if quantity.dimension == other.dimension:
  File "/testbed/sympy/physics/units/quantities.py", line 147, in dimension
    unit_system = UnitSystem.get_default_unit_system()
AttributeError: type object 'UnitSystem' has no attribute 'get_default_unit_system'
________________________________________________________________________________
____ sympy/physics/units/tests/test_quantities.py:test_factor_and_dimension ____
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 342, in test_factor_and_dimension
    assert (1001, length) == SI._collect_factor_and_dimension(meter + km)
  File "/testbed/sympy/physics/units/unitsystem.py", line 142, in _collect_factor_and_dimension
    factor, dim = self._collect_factor_and_dimension(expr.args[0])
  File "/testbed/sympy/physics/units/unitsystem.py", line 126, in _collect_factor_and_dimension
    return expr.scale_factor, expr.dimension
  File "/testbed/sympy/physics/units/quantities.py", line 165, in scale_factor
    unit_system = UnitSystem.get_default_unit_system()
AttributeError: type object 'UnitSystem' has no attribute 'get_default_unit_system'
________________________________________________________________________________
 sympy/physics/units/tests/test_quantities.py:test_dimensional_expr_of_derivative 
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 405, in test_dimensional_expr_of_derivative
    assert SI._collect_factor_and_dimension(dl_dt) ==\
  File "/testbed/sympy/physics/units/unitsystem.py", line 157, in _collect_factor_and_dimension
    factor, dim = self._collect_factor_and_dimension(expr.args[0])
  File "/testbed/sympy/physics/units/unitsystem.py", line 126, in _collect_factor_and_dimension
    return expr.scale_factor, expr.dimension
  File "/testbed/sympy/physics/units/quantities.py", line 165, in scale_factor
    unit_system = UnitSystem.get_default_unit_system()
AttributeError: type object 'UnitSystem' has no attribute 'get_default_unit_system'
________________________________________________________________________________
_____ sympy/physics/units/tests/test_quantities.py:test_binary_information _____
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 422, in test_binary_information
    assert convert_to(kibibyte, byte) == 1024*byte
  File "/testbed/sympy/physics/units/util.py", line 122, in convert_to
    depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)
  File "/testbed/sympy/physics/units/util.py", line 26, in _get_conversion_matrix_for_expr
    dimension_system = unit_system.get_dimension_system()
AttributeError: 'NoneType' object has no attribute 'get_dimension_system'
________________________________________________________________________________
 sympy/physics/units/tests/test_quantities.py:test_conversion_with_2_nonstandard_dimensions 
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 454, in test_conversion_with_2_nonstandard_dimensions
    assert convert_to(
  File "/testbed/sympy/physics/units/util.py", line 109, in convert_to
    expr = expr.replace(lambda x: isinstance(x, Quantity),
  File "/testbed/sympy/core/basic.py", line 1630, in replace
    rv = walk(self, rec_replace)
  File "/testbed/sympy/core/basic.py", line 1605, in walk
    newargs = tuple([walk(a, F) for a in args])
  File "/testbed/sympy/core/basic.py", line 1605, in <listcomp>
    newargs = tuple([walk(a, F) for a in args])
  File "/testbed/sympy/core/basic.py", line 1615, in walk
    rv = F(rv)
  File "/testbed/sympy/core/basic.py", line 1623, in rec_replace
    v = _value(expr, result)
  File "/testbed/sympy/core/basic.py", line 1589, in <lambda>
    _value = lambda expr, result: value(expr)
  File "/testbed/sympy/physics/units/util.py", line 110, in <lambda>
    lambda x: x.convert_to(target_units, unit_system))
  File "/testbed/sympy/physics/units/quantities.py", line 238, in convert_to
    return convert_to(self, other, unit_system)
  File "/testbed/sympy/physics/units/util.py", line 122, in convert_to
    depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)
  File "/testbed/sympy/physics/units/util.py", line 26, in _get_conversion_matrix_for_expr
    dimension_system = unit_system.get_dimension_system()
AttributeError: 'NoneType' object has no attribute 'get_dimension_system'
________________________________________________________________________________
________ sympy/physics/units/tests/test_quantities.py:test_issue_14932 _________
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 471, in test_issue_14932
    assert (log(inch) - log(2)).simplify() == log(inch/2)
  File "/testbed/sympy/core/basic.py", line 1816, in simplify
    return simplify(self, **kwargs)
  File "/testbed/sympy/simplify/simplify.py", line 723, in simplify
    expr = quantity_simplify(expr)
  File "/testbed/sympy/physics/units/util.py", line 163, in quantity_simplify
    d = sift(expr.atoms(Quantity), lambda i: i.dimension)
  File "/testbed/sympy/utilities/iterables.py", line 669, in sift
    m[keyfunc(i)].append(i)
  File "/testbed/sympy/physics/units/util.py", line 163, in <lambda>
    d = sift(expr.atoms(Quantity), lambda i: i.dimension)
  File "/testbed/sympy/physics/units/quantities.py", line 147, in dimension
    unit_system = UnitSystem.get_default_unit_system()
AttributeError: type object 'UnitSystem' has no attribute 'get_default_unit_system'
________________________________________________________________________________
 sympy/physics/units/tests/test_quantities.py:test_deprecated_quantity_methods _
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 502, in test_deprecated_quantity_methods
    step.set_dimension(length)
  File "/testbed/sympy/physics/units/quantities.py", line 104, in set_dimension
    unit_system.set_quantity_dimension(self, dimension)
AttributeError: 'NoneType' object has no attribute 'set_quantity_dimension'
________________________________________________________________________________
________ sympy/physics/units/tests/test_quantities.py:test_issue_22164 _________
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 520, in test_issue_22164
    SI._collect_factor_and_dimension(expr)
  File "/testbed/sympy/physics/units/unitsystem.py", line 136, in _collect_factor_and_dimension
    factor, dim = self._collect_factor_and_dimension(expr.base)
  File "/testbed/sympy/physics/units/unitsystem.py", line 126, in _collect_factor_and_dimension
    return expr.scale_factor, expr.dimension
  File "/testbed/sympy/physics/units/quantities.py", line 165, in scale_factor
    unit_system = UnitSystem.get_default_unit_system()
AttributeError: type object 'UnitSystem' has no attribute 'get_default_unit_system'
________________________________________________________________________________
________ sympy/physics/units/tests/test_quantities.py:test_issue_22819 _________
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 526, in test_issue_22819
    assert tonne.convert_to(gram) == 1000000*gram
  File "/testbed/sympy/physics/units/quantities.py", line 238, in convert_to
    return convert_to(self, other, unit_system)
  File "/testbed/sympy/physics/units/util.py", line 122, in convert_to
    depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)
  File "/testbed/sympy/physics/units/util.py", line 26, in _get_conversion_matrix_for_expr
    dimension_system = unit_system.get_dimension_system()
AttributeError: 'NoneType' object has no attribute 'get_dimension_system'
________________________________________________________________________________
________ sympy/physics/units/tests/test_quantities.py:test_issue_20288 _________
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 541, in test_issue_20288
    assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))
  File "/testbed/sympy/physics/units/unitsystem.py", line 144, in _collect_factor_and_dimension
    addend_factor, addend_dim = self._collect_factor_and_dimension(addend)
  File "/testbed/sympy/physics/units/unitsystem.py", line 164, in _collect_factor_and_dimension
    fds = [self._collect_factor_and_dimension(arg) for arg in expr.args]
  File "/testbed/sympy/physics/units/unitsystem.py", line 164, in <listcomp>
    fds = [self._collect_factor_and_dimension(arg) for arg in expr.args]
  File "/testbed/sympy/physics/units/unitsystem.py", line 131, in _collect_factor_and_dimension
    arg_factor, arg_dim = self._collect_factor_and_dimension(arg)
  File "/testbed/sympy/physics/units/unitsystem.py", line 136, in _collect_factor_and_dimension
    factor, dim = self._collect_factor_and_dimension(expr.base)
  File "/testbed/sympy/physics/units/unitsystem.py", line 126, in _collect_factor_and_dimension
    return expr.scale_factor, expr.dimension
  File "/testbed/sympy/physics/units/quantities.py", line 165, in scale_factor
    unit_system = UnitSystem.get_default_unit_system()
AttributeError: type object 'UnitSystem' has no attribute 'get_default_unit_system'
________________________________________________________________________________
________ sympy/physics/units/tests/test_quantities.py:test_issue_24062 _________
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 558, in test_issue_24062
    dim = SI._collect_factor_and_dimension(expr)[1]
  File "/testbed/sympy/physics/units/unitsystem.py", line 131, in _collect_factor_and_dimension
    arg_factor, arg_dim = self._collect_factor_and_dimension(arg)
  File "/testbed/sympy/physics/units/unitsystem.py", line 136, in _collect_factor_and_dimension
    factor, dim = self._collect_factor_and_dimension(expr.base)
  File "/testbed/sympy/physics/units/unitsystem.py", line 126, in _collect_factor_and_dimension
    return expr.scale_factor, expr.dimension
  File "/testbed/sympy/physics/units/quantities.py", line 165, in scale_factor
    unit_system = UnitSystem.get_default_unit_system()
AttributeError: type object 'UnitSystem' has no attribute 'get_default_unit_system'
________________________________________________________________________________
________ sympy/physics/units/tests/test_quantities.py:test_issue_24211 _________
Traceback (most recent call last):
  File "/testbed/sympy/physics/units/tests/test_quantities.py", line 578, in test_issue_24211
    SI._collect_factor_and_dimension(expr)
  File "/testbed/sympy/physics/units/unitsystem.py", line 142, in _collect_factor_and_dimension
    factor, dim = self._collect_factor_and_dimension(expr.args[0])
  File "/testbed/sympy/physics/units/unitsystem.py", line 131, in _collect_factor_and_dimension
    arg_factor, arg_dim = self._collect_factor_and_dimension(arg)
  File "/testbed/sympy/physics/units/unitsystem.py", line 126, in _collect_factor_and_dimension
    return expr.scale_factor, expr.dimension
  File "/testbed/sympy/physics/units/quantities.py", line 165, in scale_factor
    unit_system = UnitSystem.get_default_unit_system()
AttributeError: type object 'UnitSystem' has no attribute 'get_default_unit_system'

 tests finished: 12 passed, 1 expected to fail, 21 exceptions, in 0.85 seconds =
DO *NOT* COMMIT!
+ : '>>>>> End Test Output'
+ git checkout e8c22f6eac7314be8d92590bfff92ced79ee03e2 sympy/physics/units/tests/test_quantities.py
Updated 1 path from b86b9b19fd
