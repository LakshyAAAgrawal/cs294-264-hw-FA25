diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py
index 335e10996..3e751778b 100644
--- a/src/_pytest/skipping.py
+++ b/src/_pytest/skipping.py
@@ -220,8 +220,6 @@ def evaluate_xfail_marks(item: Item) -> Optional[Xfail]:
                 return Xfail(reason, run, strict, raises)
 
     return None
-
-
 # Whether skipped due to skip or skipif marks.
 skipped_by_mark_key = StoreKey[bool]()
 # Saves the xfail mark evaluation. Can be refreshed during call if None.
@@ -260,8 +258,11 @@ def pytest_runtest_call(item: Item) -> Generator[None, None, None]:
 @hookimpl(hookwrapper=True)
 def pytest_runtest_makereport(item: Item, call: CallInfo[None]):
     outcome = yield
-    rep = outcome.get_result()
+    # Re-evaluate xfail marks in case they were added during test execution.
     xfailed = item._store.get(xfailed_key, None)
+    if xfailed is None:
+        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)
+    rep = outcome.get_result()
     # unittest special case, see setting of unexpectedsuccess_key
     if unexpectedsuccess_key in item._store and rep.when == "call":
         reason = item._store[unexpectedsuccess_key]
@@ -291,21 +292,6 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):
             else:
                 rep.outcome = "passed"
                 rep.wasxfail = xfailed.reason
-
-    if (
-        item._store.get(skipped_by_mark_key, True)
-        and rep.skipped
-        and type(rep.longrepr) is tuple
-    ):
-        # skipped by mark.skipif; change the location of the failure
-        # to point to the item definition, otherwise it will display
-        # the location of where the skip exception was raised within pytest
-        _, _, reason = rep.longrepr
-        filename, line = item.reportinfo()[:2]
-        assert line is not None
-        rep.longrepr = str(filename), line + 1, reason
-
-
 def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str]]:
     if hasattr(report, "wasxfail"):
         if report.skipped: