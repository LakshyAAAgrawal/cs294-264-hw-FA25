diff --git a/django/views/generic/base.py b/django/views/generic/base.py
index ea5baca08d..d3402959e2 100644
--- a/django/views/generic/base.py
+++ b/django/views/generic/base.py
@@ -9,13 +9,12 @@ from django.http import (
 )
 from django.template.response import TemplateResponse
 from django.urls import reverse
-from django.utils.decorators import classonlymethod
 from django.utils.deprecation import RemovedInDjango40Warning
-from django.utils.functional import SimpleLazyObject
+from django.utils.decorators import classonlymethod
+from django.utils.functional import SimpleLazyObject, empty
 
 logger = logging.getLogger('django.request')
 
-
 class ContextMixin:
     """
     A default context mixin that passes the keyword arguments received by
@@ -27,9 +26,26 @@ class ContextMixin:
         kwargs.setdefault('view', self)
         if self.extra_context is not None:
             kwargs.update(self.extra_context)
+        # Resolve any SimpleLazyObject values so consumers (e.g. ORM filters)
+        # receive a sensible value rather than passing a LazyObject directly.
+        for key, value in list(kwargs.items()):
+            if isinstance(value, SimpleLazyObject):
+                # If the proxy is already initialized, unwrap to the real object
+                wrapped = getattr(value, '_wrapped', empty)
+                if wrapped is not empty:
+                    kwargs[key] = wrapped
+                else:
+                    # Not yet initialized: coerce to str for common URL kwargs
+                    # (slugs) to avoid DB parameter binding errors; otherwise
+                    # fall back to leaving the lazy object.
+                    try:
+                        kwargs[key] = str(value)
+                    except Exception:
+                        kwargs[key] = value
         return kwargs
 
 
+
 class View:
     """
     Intentionally simple parent class for all views. Only implements