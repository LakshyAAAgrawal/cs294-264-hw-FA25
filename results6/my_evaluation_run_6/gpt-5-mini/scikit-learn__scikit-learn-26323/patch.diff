diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py
index 4eddd12b1..f8e362436 100644
--- a/sklearn/compose/_column_transformer.py
+++ b/sklearn/compose/_column_transformer.py
@@ -33,38 +33,44 @@ __all__ = ["ColumnTransformer", "make_column_transformer", "make_column_selector
 
 
 _ERR_MSG_1DCOLUMN = (
-    "1D data passed to a transformer that expects 2D data. "
-    "Try to specify the column selection as a list of one "
-    "item instead of a scalar."
-)
-
+def set_output(self, *, transform=None):
+        """Set the output container when `"transform"` and `"fit_transform"` are called.
 
-class ColumnTransformer(TransformerMixin, _BaseComposition):
-    """Applies transformers to columns of an array or pandas DataFrame.
+        Calling `set_output` will set the output of all estimators in `transformers`
+        and `transformers_`.
 
-    This estimator allows different columns or column subsets of the input
-    to be transformed separately and the features generated by each transformer
-    will be concatenated to form a single feature space.
-    This is useful for heterogeneous or columnar data, to combine several
-    feature extraction mechanisms or transformations into a single transformer.
+        Parameters
+        ----------
+        transform : {"default", "pandas"}, default=None
+            Configure output of `transform` and `fit_transform`.
 
-    Read more in the :ref:`User Guide <column_transformer>`.
+            - `"default"`: Default output format of a transformer
+            - `"pandas"`: DataFrame output
+            - `None`: Transform configuration is unchanged
 
-    .. versionadded:: 0.20
+        Returns
+        -------
+        self : estimator instance
+            Estimator instance.
+        """
+        super().set_output(transform=transform)
+        transformers = (
+            trans
+            for _, trans, _ in chain(
+                self.transformers, getattr(self, "transformers_", [])
+            )
+            if trans not in {"passthrough", "drop"}
+        )
+        # Also configure the remainder estimator (if it's an estimator and not
+        # 'passthrough' or 'drop') so its output configuration is consistent.
+        remainder = getattr(self, "remainder", None)
+        if remainder not in {"passthrough", "drop", None}:
+            _safe_set_output(remainder, transform=transform)
 
-    Parameters
-    ----------
-    transformers : list of tuples
-        List of (name, transformer, columns) tuples specifying the
-        transformer objects to be applied to subsets of the data.
+        for trans in transformers:
+            _safe_set_output(trans, transform=transform)
 
-        name : str
-            Like in Pipeline and FeatureUnion, this allows the transformer and
-            its parameters to be set using ``set_params`` and searched in grid
-            search.
-        transformer : {'drop', 'passthrough'} or estimator
-            Estimator must support :term:`fit` and :term:`transform`.
-            Special-cased strings 'drop' and 'passthrough' are accepted as
+        return self
             well, to indicate to drop the columns or to pass them through
             untransformed, respectively.
         columns :  str, array-like of str, int, array-like of int, \