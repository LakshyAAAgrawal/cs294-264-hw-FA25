diff --git a/requests/models.py b/requests/models.py
index 9c624d3..3ed4962 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -71,32 +71,38 @@ class RequestEncodingMixin(object):
 
         return ''.join(url)
 
-    @staticmethod
-    def _encode_params(data):
-        """Encode parameters in a piece of data.
-
-        Will successfully encode parameters when passed as a dict or a list of
-        2-tuples. Order is retained if data is a list of 2-tuples but arbitrary
-        if parameters are supplied as a dict.
-        """
-
-        if isinstance(data, (str, bytes)):
-            return to_native_string(data)
-        elif hasattr(data, 'read'):
-            return data
-        elif hasattr(data, '__iter__'):
-            result = []
-            for k, vs in to_key_val_list(data):
-                if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):
-                    vs = [vs]
-                for v in vs:
-                    if v is not None:
-                        result.append(
-                            (k.encode('utf-8') if isinstance(k, str) else k,
-                             v.encode('utf-8') if isinstance(v, str) else v))
-            return urlencode(result, doseq=True)
-        else:
-            return data
+@staticmethod
+	def _encode_params(data):
+		"""Encode parameters in a piece of data.
+	
+		Will successfully encode parameters when passed as a dict or a list of
+		2-tuples. Order is retained if data is a list of 2-tuples but arbitrary
+		if parameters are supplied as a dict.
+		"""
+	
+		if isinstance(data, (str, bytes)):
+			# On Python 3, bytes are a valid request body and must be left as-is.
+			# to_native_string decodes bytes using the provided encoding (default
+			# 'ascii') which raises UnicodeDecodeError for non-ASCII binary payloads.
+			# Skip decoding for bytes on Python 3 so binary payloads are preserved.
+			if not is_py2 and isinstance(data, bytes):
+				return data
+			return to_native_string(data)
+		elif hasattr(data, 'read'):
+			return data
+		elif hasattr(data, '__iter__'):
+			result = []
+			for k, vs in to_key_val_list(data):
+				if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):
+					vs = [vs]
+				for v in vs:
+					if v is not None:
+						result.append(
+							(k.encode('utf-8') if isinstance(k, str) else k,
+							 v.encode('utf-8') if isinstance(v, str) else v))
+			return urlencode(result, doseq=True)
+		else:
+			return data
 
     @staticmethod
     def _encode_files(files, data):