diff --git a/django/forms/models.py b/django/forms/models.py
index dafc11f995..41e263dccd 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -1181,21 +1181,26 @@ class ModelChoiceField(ChoiceField):
     }
     iterator = ModelChoiceIterator
 
-    def __init__(self, queryset, *, empty_label="---------",
+def __init__(self, queryset, *, empty_label="---------",
                  required=True, widget=None, label=None, initial=None,
                  help_text='', to_field_name=None, limit_choices_to=None,
                  **kwargs):
-        if required and (initial is not None):
-            self.empty_label = None
-        else:
-            self.empty_label = empty_label
-
         # Call Field instead of ChoiceField __init__() because we don't need
         # ChoiceField.__init__().
         Field.__init__(
             self, required=required, widget=widget, label=label,
             initial=initial, help_text=help_text, **kwargs
         )
+        # For required fields with an initial value, don't show the empty label.
+        # Additionally, RadioSelect widgets represent an explicit unfilled state,
+        # so for required related/model choice fields using a RadioSelect (or a
+        # subclass such as AdminRadioSelect) we should not include the blank
+        # option even if empty_label was given.
+        from django.forms.widgets import RadioSelect
+        if (required and (initial is not None)) or (isinstance(self.widget, RadioSelect) and required):
+            self.empty_label = None
+        else:
+            self.empty_label = empty_label
         self.queryset = queryset
         self.limit_choices_to = limit_choices_to   # limit the queryset later.
         self.to_field_name = to_field_name