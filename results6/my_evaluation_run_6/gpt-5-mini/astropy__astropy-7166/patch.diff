diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d1..2e9d95345 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -517,17 +517,7 @@ class InheritDocstrings(type):
         ...     def wiggle(self):
         ...         pass
         >>> B.wiggle.__doc__
-        u'Wiggle the thingamajig'
-    """
-
-    def __init__(cls, name, bases, dct):
-        def is_public_member(key):
-            return (
-                (key.startswith('__') and key.endswith('__')
-                 and len(key) > 4) or
-                not key.startswith('_'))
-
-        for key, val in dct.items():
+for key, val in dct.items():
             if (inspect.isfunction(val) and
                 is_public_member(key) and
                 val.__doc__ is None):
@@ -536,7 +526,24 @@ class InheritDocstrings(type):
                     if super_method is not None:
                         val.__doc__ = super_method.__doc__
                         break
-
+            elif isinstance(val, property) and is_public_member(key):
+                fget = val.fget
+                if fget is not None and fget.__doc__ is None:
+                    for base in cls.__mro__[1:]:
+                        super_method = getattr(base, key, None)
+                        if isinstance(super_method, property) and super_method.fget is not None:
+                            fget.__doc__ = super_method.fget.__doc__
+                            break
+            # property objects, so update the fget function's __doc__ when
+            # available and missing.
+            elif isinstance(val, property) and is_public_member(key):
+                fget = val.fget
+                if fget is not None and fget.__doc__ is None:
+                    for base in cls.__mro__[1:]:
+                        super_method = getattr(base, key, None)
+                        if isinstance(super_method, property) and super_method.fget is not None:
+                            fget.__doc__ = super_method.fget.__doc__
+                            break
         super().__init__(name, bases, dct)