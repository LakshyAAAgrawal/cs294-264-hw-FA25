ModelForm RadioSelect showing the "---------" empty choice for a ForeignKey with blank=False is a known Django issue that was reported as ticket #26813 and fixed upstream (see the linked ticket + commit). ([code.djangoproject.com](https://code.djangoproject.com/ticket/26813?utm_source=openai))

What happened
- By default ModelChoiceField will normally produce an "empty" choice (empty_label) for the widget. For RadioSelect that empty choice is confusing when the model field has blank=False. This was addressed upstream so RadioSelect won't get the empty choice when blank=False. ([docs.djangoproject.com](https://docs.djangoproject.com/ko/4.2//ref/forms/fields/?utm_source=openai))

What you can do right now (two simple options)

1) Best long-term fix — upgrade Django
- Upgrade to a Django release that contains commit da79ee47 (the upstream fix for #26813). The fix prevents the empty choice for a ModelChoiceField rendered with RadioSelect when the model field has blank=False. ([git.multapplied.net](https://git.multapplied.net/Django/django/commit/da79ee472d803963dc3ea81ee67767dc06068aac?utm_source=openai))

2) Immediate/workaround in your form — remove the empty label
- Explicitly override the auto-generated field in your ModelForm and tell the ModelChoiceField not to create an empty choice by setting empty_label=None. Example:

from django import forms
from django.forms import RadioSelect
from .models import TestRun, BatchData

class TestRunForm(forms.ModelForm):
    # override the ModelChoiceField to remove the empty option
    data_file = forms.ModelChoiceField(
        queryset=BatchData.objects.all(),
        widget=RadioSelect,
        empty_label=None,   # <-- remove the '---------' empty choice
        required=True,      # ensure the field is required if your model has blank=False
    )

    class Meta:
        model = TestRun
        fields = ['data_file']

- Alternative: if you prefer to keep the Meta.widgets approach, you can remove the empty option in __init__:

class TestRunForm(forms.ModelForm):
    class Meta:
        model = TestRun
        fields = ['data_file']
        widgets = {'data_file': RadioSelect()}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        field = self.fields['data_file']
        if hasattr(field, 'empty_label'):
            field.empty_label = None

Why empty_label=None works
- ModelChoiceField uses the empty_label attribute to add the "---------" choice. Setting empty_label=None disables it. The Django docs explain empty_label and note that no empty choice is created when certain conditions apply (and that RadioSelect + blank=False is handled by the upstream fix). ([docs.djangoproject.com](https://docs.djangoproject.com/ko/4.2//ref/forms/fields/?utm_source=openai))

References
- Ticket describing the issue: #26813. ([code.djangoproject.com](https://code.djangoproject.com/ticket/26813?utm_source=openai))
- Django forms docs on ModelChoiceField.empty_label (how to set empty_label=None). ([docs.djangoproject.com](https://docs.djangoproject.com/ko/4.2//ref/forms/fields/?utm_source=openai))
- Upstream commit that implemented the fix (da79ee47). ([git.multapplied.net](https://git.multapplied.net/Django/django/commit/da79ee472d803963dc3ea81ee67767dc06068aac?utm_source=openai))

If you want, I can:
- 1) show the specific places in your codebase to change (search for your ModelForm), or
- 2) prepare a tiny patch that overrides the form field or updates __init__ as shown above.

Which would you like me to do?

No changes detected to generate a patch.