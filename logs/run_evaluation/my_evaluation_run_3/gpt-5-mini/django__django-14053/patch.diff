diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py
index 494890cc23..933a8105bd 100644
--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@ -200,7 +200,7 @@ class HashedFilesMixin:
 
         return converter
 
-    def post_process(self, paths, dry_run=False, **options):
+def post_process(self, paths, dry_run=False, **options):
         """
         Post process the given dictionary of files (called from collectstatic).
 
@@ -226,9 +226,14 @@ class HashedFilesMixin:
             path for path in paths
             if matches_patterns(path, self._patterns)
         ]
+        # Track which original names we've already yielded to avoid duplicates
+        yielded = set()
         # Do a single pass first. Post-process all files once, then repeat for
         # adjustable files.
         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):
+            if name in yielded:
+                continue
+            yielded.add(name)
             yield name, hashed_name, processed
 
         paths = {path: paths[path] for path in adjustable_paths}
@@ -236,6 +241,12 @@ class HashedFilesMixin:
         for i in range(self.max_post_process_passes):
             substitutions = False
             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
+                # Even if we've already yielded this name, we must still account
+                # for substitutions so the loop termination logic remains correct.
+                if name in yielded:
+                    substitutions = substitutions or subst
+                    continue
+                yielded.add(name)
                 yield name, hashed_name, processed
                 substitutions = substitutions or subst
 
@@ -247,7 +258,6 @@ class HashedFilesMixin:
 
         # Store the processed paths
         self.hashed_files.update(hashed_files)
-
     def _post_process(self, paths, adjustable_paths, hashed_files):
         # Sort the files by directory level
         def path_level(name):