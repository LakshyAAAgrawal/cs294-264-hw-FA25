diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index 7fca6eff30..2c4edeff19 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -37,28 +37,40 @@ class DatabaseClient(BaseDatabaseClient):
         temp_pgpass = None
         sigint_handler = signal.getsignal(signal.SIGINT)
         try:
+            env = None
             if passwd:
-                # Create temporary .pgpass file.
-                temp_pgpass = NamedTemporaryFile(mode='w+')
+                # Prefer passing the password via the environment (PGPASSWORD)
+                # by creating a copy of the current environment and setting
+                # PGPASSWORD. This is simpler and more reliable than creating
+                # a temp .pgpass file in the common case.
                 try:
-                    print(
-                        _escape_pgpass(host) or '*',
-                        str(port) or '*',
-                        _escape_pgpass(dbname) or '*',
-                        _escape_pgpass(user) or '*',
-                        _escape_pgpass(passwd),
-                        file=temp_pgpass,
-                        sep=':',
-                        flush=True,
-                    )
-                    os.environ['PGPASSFILE'] = temp_pgpass.name
+                    env = os.environ.copy()
+                    env['PGPASSWORD'] = passwd
                 except UnicodeEncodeError:
-                    # If the current locale can't encode the data, let the
-                    # user input the password manually.
-                    pass
+                    # If the current locale can't encode the password into the
+                    # environment, fall back to creating a temporary .pgpass file.
+                    temp_pgpass = NamedTemporaryFile(mode='w+')
+                    try:
+                        print(
+                            _escape_pgpass(host) or '*',
+                            str(port) or '*',
+                            _escape_pgpass(dbname) or '*',
+                            _escape_pgpass(user) or '*',
+                            _escape_pgpass(passwd),
+                            file=temp_pgpass,
+                            sep=':',
+                            flush=True,
+                        )
+                        os.environ['PGPASSFILE'] = temp_pgpass.name
+                    except UnicodeEncodeError:
+                        # If even writing the file fails due to encoding, let the
+                        # user input the password manually.
+                        temp_pgpass.close()
+                        temp_pgpass = None
             # Allow SIGINT to pass to psql to abort queries.
             signal.signal(signal.SIGINT, signal.SIG_IGN)
-            subprocess.check_call(args)
+            # Use subprocess.run and pass env when available.
+            subprocess.run(args, env=env, check=True)
         finally:
             # Restore the original SIGINT handler.
             signal.signal(signal.SIGINT, sigint_handler)