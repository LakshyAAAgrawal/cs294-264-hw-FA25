diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 92fe4affb9..6c02e1b637 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -270,13 +270,18 @@ class Collector:
         self.sort()
         # number of objects deleted for each model label
         deleted_counter = Counter()
-
-        # Optimize for the case with a single obj and no dependencies
-        if len(self.data) == 1 and len(instances) == 1:
-            instance = list(instances)[0]
-            if self.can_fast_delete(instance):
-                with transaction.mark_for_rollback_on_error():
-                    count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
+if len(self.data) == 1 and len(instances) == 1:
+              instance = list(instances)[0]
+              if self.can_fast_delete(instance):
+                  with transaction.mark_for_rollback_on_error():
+                      count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
+                  # Clear the PK on the instance to reflect that it has been deleted.
+                  try:
+                      instance.pk = None
+                  except Exception:
+                      # Be conservative: if instance doesn't support pk assignment, ignore.
+                      pass
+                  return count, {model._meta.label: count}
                 return count, {model._meta.label: count}
 
         with transaction.atomic(using=self.using, savepoint=False):