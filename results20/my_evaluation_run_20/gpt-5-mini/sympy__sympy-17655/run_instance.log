2025-10-04 03:51:09,057 - INFO - Creating container for sympy__sympy-17655...
2025-10-04 03:51:09,215 - INFO - Container for sympy__sympy-17655 created: 656cceabb8ee01efc8656b79fb456327651042fa427ebb3392d4717b0ec2bff6
2025-10-04 03:51:09,351 - INFO - Container for sympy__sympy-17655 started: 656cceabb8ee01efc8656b79fb456327651042fa427ebb3392d4717b0ec2bff6
2025-10-04 03:51:09,352 - INFO - Intermediate patch for sympy__sympy-17655 written to logs/run_evaluation/my_evaluation_run_20/gpt-5-mini/sympy__sympy-17655/patch.diff, now applying to container...
2025-10-04 03:51:09,486 - INFO - Failed to apply patch to container: git apply --verbose
2025-10-04 03:51:09,546 - INFO - Failed to apply patch to container: git apply --verbose --reject
2025-10-04 03:51:09,624 - INFO - >>>>> Applied Patch:
patching file sympy/geometry/point.py
patch unexpectedly ends in middle of line
Hunk #1 succeeded at 175 with fuzz 2.

2025-10-04 03:51:09,935 - INFO - Git diff before:
diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..56f1d49459 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -175,38 +175,73 @@ def __new__(cls, *args, **kwargs):
             return Point3D(*coords, **kwargs)
 
         # the general Point
-        return GeometryEntity.__new__(cls, *coords)
-
-    def __abs__(self):
+def __abs__(self):
         """Returns the distance between this point and the origin."""
         origin = Point([0]*len(self))
         return Point.distance(origin, self)
-
+    
     def __add__(self, other):
+def __add__(self, other):
         """Add other to self by incrementing self's coordinates by
         those of other.
-
+    
         Notes
         =====
-
+    
         >>> from sympy.geometry.point import Point
-
+    
         When sequences of coordinates are passed to Point methods, they
         are converted to a Point internally. This __add__ method does
         not do that so if floating point values are used, a floating
         point result (in terms of SymPy Floats) will be returned.
-
+    
         >>> Point(1, 2) + (.1, .2)
         Point2D(1.1, 2.2)
-
+    
         If this is not desired, the `translate` method can be used or
         another Point can be added:
-
+    
         >>> Point(1, 2).translate(.1, .2)
         Point2D(11/10, 11/5)
         >>> Point(1, 2) + Point(.1, .2)
         Point2D(11/10, 11/5)
-
+    
+        See Also
+        ========
+    
+        sympy.geometry.point.Point.translate
+    
+        """
+        # Handle cases like scalar * Point (e.g., 2*Point2D(1,1)) where the
+        # left-hand multiplication produces a Mul instance containing a
+        # Point factor. In that case extract the scalar and the Point and
+        # perform the addition accordingly.
+        if hasattr(other, 'is_Mul') and other.is_Mul:
+            point_factor = None
+            for f in other.args:
+                if isinstance(f, Point):
+                    point_factor = f
+                    break
+            if point_factor is not None:
+                scalar = 1
+                for f in other.args:
+                    if f is not point_factor:
+                        scalar = scalar * f
+                scalar = sympify(scalar)
+                try:
+                    s, o = Point._normalize_dimension(self, Point(point_factor, evaluate=False))
+                except TypeError:
+                    raise GeometryError("Don't know how to add {} and a Point object".format(other))
+                coords = [simplify(a + scalar*b) for a, b in zip(s, o)]
+                return Point(coords, evaluate=False)
+    
+        try:
+            s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
+        except TypeError:
+            raise GeometryError("Don't know how to add {} and a Point object".format(other))
+    
+        coords = [simplify(a + b) for a, b in zip(s, o)]
+        return Point(coords, evaluate=False)
         See Also
         ========
2025-10-04 03:51:09,936 - INFO - Eval script for sympy__sympy-17655 written to logs/run_evaluation/my_evaluation_run_20/gpt-5-mini/sympy__sympy-17655/eval.sh; copying to container...
2025-10-04 03:51:13,975 - INFO - Test runtime: 3.99 seconds
2025-10-04 03:51:13,975 - INFO - Test output for sympy__sympy-17655 written to logs/run_evaluation/my_evaluation_run_20/gpt-5-mini/sympy__sympy-17655/test_output.txt
2025-10-04 03:51:14,087 - INFO - Git diff after:
diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..56f1d49459 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -175,38 +175,73 @@ def __new__(cls, *args, **kwargs):
             return Point3D(*coords, **kwargs)
 
         # the general Point
-        return GeometryEntity.__new__(cls, *coords)
-
-    def __abs__(self):
+def __abs__(self):
         """Returns the distance between this point and the origin."""
         origin = Point([0]*len(self))
         return Point.distance(origin, self)
-
+    
     def __add__(self, other):
+def __add__(self, other):
         """Add other to self by incrementing self's coordinates by
         those of other.
-
+    
         Notes
         =====
-
+    
         >>> from sympy.geometry.point import Point
-
+    
         When sequences of coordinates are passed to Point methods, they
         are converted to a Point internally. This __add__ method does
         not do that so if floating point values are used, a floating
         point result (in terms of SymPy Floats) will be returned.
-
+    
         >>> Point(1, 2) + (.1, .2)
         Point2D(1.1, 2.2)
-
+    
         If this is not desired, the `translate` method can be used or
         another Point can be added:
-
+    
         >>> Point(1, 2).translate(.1, .2)
         Point2D(11/10, 11/5)
         >>> Point(1, 2) + Point(.1, .2)
         Point2D(11/10, 11/5)
-
+    
+        See Also
+        ========
+    
+        sympy.geometry.point.Point.translate
+    
+        """
+        # Handle cases like scalar * Point (e.g., 2*Point2D(1,1)) where the
+        # left-hand multiplication produces a Mul instance containing a
+        # Point factor. In that case extract the scalar and the Point and
+        # perform the addition accordingly.
+        if hasattr(other, 'is_Mul') and other.is_Mul:
+            point_factor = None
+            for f in other.args:
+                if isinstance(f, Point):
+                    point_factor = f
+                    break
+            if point_factor is not None:
+                scalar = 1
+                for f in other.args:
+                    if f is not point_factor:
+                        scalar = scalar * f
+                scalar = sympify(scalar)
+                try:
+                    s, o = Point._normalize_dimension(self, Point(point_factor, evaluate=False))
+                except TypeError:
+                    raise GeometryError("Don't know how to add {} and a Point object".format(other))
+                coords = [simplify(a + scalar*b) for a, b in zip(s, o)]
+                return Point(coords, evaluate=False)
+    
+        try:
+            s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
+        except TypeError:
+            raise GeometryError("Don't know how to add {} and a Point object".format(other))
+    
+        coords = [simplify(a + b) for a, b in zip(s, o)]
+        return Point(coords, evaluate=False)
         See Also
         ========
2025-10-04 03:51:14,087 - INFO - Grading answer for sympy__sympy-17655...
2025-10-04 03:51:14,089 - INFO - report: {'sympy__sympy-17655': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_point', 'test_point3D']}, 'PASS_TO_PASS': {'success': [], 'failure': ['test_Point2D', 'test_issue_9214', 'test_issue_11617', 'test_transform', 'test_concyclic_doctest_bug', 'test_arguments', 'test_unit', 'test_dot', 'test__normalize_dimension']}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for sympy__sympy-17655: resolved: False
2025-10-04 03:51:14,089 - INFO - Attempting to stop container sweb.eval.sympy__sympy-17655.my_evaluation_run_20...
2025-10-04 03:51:29,364 - INFO - Attempting to remove container sweb.eval.sympy__sympy-17655.my_evaluation_run_20...
2025-10-04 03:51:29,382 - INFO - Container sweb.eval.sympy__sympy-17655.my_evaluation_run_20 removed.
2025-10-04 03:51:29,382 - INFO - Attempting to remove image swebench/sweb.eval.x86_64.sympy_1776_sympy-17655:latest...
2025-10-04 03:51:29,578 - INFO - Image swebench/sweb.eval.x86_64.sympy_1776_sympy-17655:latest removed.
