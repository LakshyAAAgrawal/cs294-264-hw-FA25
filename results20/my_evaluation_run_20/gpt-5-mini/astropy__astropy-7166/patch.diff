diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d1..01bce9f76 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -528,15 +528,32 @@ class InheritDocstrings(type):
                 not key.startswith('_'))
 
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
-                is_public_member(key) and
-                val.__doc__ is None):
-                for base in cls.__mro__[1:]:
-                    super_method = getattr(base, key, None)
-                    if super_method is not None:
-                        val.__doc__ = super_method.__doc__
-                        break
-
+                    # determine the "target" object whose __doc__ should be updated
+                    target = None
+                    # plain functions
+                    if inspect.isfunction(val):
+                        target = val
+                    # classmethod and staticmethod wrap the function in __func__
+                    elif isinstance(val, (classmethod, staticmethod)):
+                        target = val.__func__
+                    # property uses fget as the callable to document
+                    elif isinstance(val, property):
+                        target = val.fget
+
+                    if target is not None and is_public_member(key) and getattr(target, '__doc__', None) is None:
+                        for base in cls.__mro__[1:]:
+                            super_method = getattr(base, key, None)
+                            if super_method is not None:
+                                # unwrap descriptors on the base as well
+                                if isinstance(super_method, (classmethod, staticmethod)):
+                                    super_target = super_method.__func__
+                                elif isinstance(super_method, property):
+                                    super_target = super_method.fget
+                                else:
+                                    super_target = super_method
+                                if getattr(super_target, '__doc__', None) is not None:
+                                    target.__doc__ = super_target.__doc__
+                                    break
         super().__init__(name, bases, dct)