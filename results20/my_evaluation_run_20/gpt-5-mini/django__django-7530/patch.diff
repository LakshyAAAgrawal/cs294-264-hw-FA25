diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py
index 0b39536f5b..32ae8b4b35 100644
--- a/django/core/management/commands/makemigrations.py
+++ b/django/core/management/commands/makemigrations.py
@@ -93,19 +93,19 @@ class Command(BaseCommand):
 
         # Load the current graph state. Pass in None for the connection so
         # the loader doesn't try to resolve replaced migrations from DB.
-        loader = MigrationLoader(None, ignore_no_migrations=True)
-
-        # Raise an error if any migrations are applied before their dependencies.
-        consistency_check_labels = set(config.label for config in apps.get_app_configs())
-        # Non-default databases are only checked if database routers used.
-        aliases_to_check = connections if settings.DATABASE_ROUTERS else [DEFAULT_DB_ALIAS]
-        for alias in sorted(aliases_to_check):
-            connection = connections[alias]
-            if (connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any(
-                    # At least one model must be migrated to the database.
-                    router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)
-                    for app_label in consistency_check_labels
-                    for model in apps.get_models(app_label)
+# Raise an error if any migrations are applied before their dependencies.
+    consistency_check_labels = set(config.label for config in apps.get_app_configs())
+    # Non-default databases are only checked if database routers used.
+    aliases_to_check = connections if settings.DATABASE_ROUTERS else [DEFAULT_DB_ALIAS]
+    for alias in sorted(aliases_to_check):
+        connection = connections[alias]
+        if (connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any(
+                # At least one model must be migrated to the database.
+                router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)
+                for app_label in consistency_check_labels
+                for model in apps.get_app_config(app_label).get_models()
+        )):
+            loader.check_consistent_history(connection)
             )):
                 loader.check_consistent_history(connection)