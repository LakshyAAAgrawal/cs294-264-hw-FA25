diff --git a/requests/utils.py b/requests/utils.py
index 132cd2b..55b7f2d 100644
--- a/requests/utils.py
+++ b/requests/utils.py
@@ -625,8 +625,6 @@ def parse_header_links(value):
 _null = '\x00'.encode('ascii')  # encoding to ASCII for Python 3
 _null2 = _null * 2
 _null3 = _null * 3
-
-
 def guess_json_utf(data):
     # JSON always starts with two ASCII characters, so detection is as
     # easy as counting the nulls and from their location and count
@@ -655,7 +653,6 @@ def guess_json_utf(data):
         # Did not detect a valid UTF-32 ascii-range character
     return None
 
-
 def prepend_scheme_if_needed(url, new_scheme):
     '''Given a URL that may or may not have a scheme, prepend the given scheme.
     Does not replace a present scheme with the one provided as an argument.'''
@@ -683,7 +680,7 @@ def get_auth_from_url(url):
     return auth
 
 
-def to_native_string(string, encoding='ascii'):
+def to_native_string(string, encoding='utf-8'):
     """
     Given a string object, regardless of type, returns a representation of that
     string in the native string type, encoding and decoding where necessary.
@@ -699,9 +696,6 @@ def to_native_string(string, encoding='ascii'):
         else:
             out = string.decode(encoding)
 
-    return out
-
-
 def urldefragauth(url):
     """
     Given a url remove the fragment and the authentication part
@@ -715,3 +709,11 @@ def urldefragauth(url):
     netloc = netloc.rsplit('@', 1)[-1]
 
     return urlunparse((scheme, netloc, path, params, query, ''))
+
+    # see func:`prepend_scheme_if_needed`
+    if not netloc:
+        netloc, path = path, netloc
+
+    netloc = netloc.rsplit('@', 1)[-1]
+
+    return urlunparse((scheme, netloc, path, params, query, ''))