+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   requests/sessions.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	requests/sessions.py.orig

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit c642bc928dcda93bed57f3deaed2252690a76754
Author: SWE-bench <setup@swebench.config>
Date:   Wed Sep 10 14:59:29 2025 +0000

    SWE-bench
+ git -c core.fileMode=false diff 3c88e520da24ae6f736929a750876e7654accc3d
diff --git a/requests/sessions.py b/requests/sessions.py
index a023e4e..e2be978 100644
--- a/requests/sessions.py
+++ b/requests/sessions.py
@@ -19,40 +19,21 @@ from .models import Request, PreparedRequest, DEFAULT_REDIRECT_LIMIT
 from .hooks import default_hooks, dispatch_hook
 from .utils import to_key_val_list, default_headers, to_native_string
 from .exceptions import TooManyRedirects, InvalidSchema
-from .structures import CaseInsensitiveDict
-
-from .adapters import HTTPAdapter
-
-from .utils import requote_uri, get_environ_proxies, get_netrc_auth
-
-from .status_codes import codes
-
-# formerly defined here, reexposed here for backward compatibility
-from .models import REDIRECT_STATI
-
-
 def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
-    """
-    Determines appropriate setting for a given request, taking into account the
-    explicit setting on that request, and the setting in the session. If a
-    setting is a dictionary, they will be merged together using `dict_class`
-    """
-
-    if session_setting is None:
-        return request_setting
-
+    """Determine setting for a request, merging session and request values."""
+    if session_setting is None: return request_setting
     if request_setting is None:
+        # No per-request override; filter out keys set to None in session.
+        if isinstance(session_setting, Mapping):
+            filtered = dict_class(to_key_val_list(session_setting))
+            for k, v in list(filtered.items()):
+                if v is None: del filtered[k]
+            return filtered
         return session_setting
-
-    # Bypass if not a dictionary (e.g. verify)
-    if not (
-            isinstance(session_setting, Mapping) and
-            isinstance(request_setting, Mapping)
-    ):
+    if not (isinstance(session_setting, Mapping) and isinstance(request_setting, Mapping)):
         return request_setting
-
     merged_setting = dict_class(to_key_val_list(session_setting))
-    merged_setting.update(to_key_val_list(request_setting))
+
 
     # Remove keys that are set to None.
     for (k, v) in request_setting.items():
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install .
Processing /testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Building wheels for collected packages: requests
  Building wheel for requests (setup.py): started
  Building wheel for requests (setup.py): finished with status 'done'
  Created wheel for requests: filename=requests-2.3.0-py2.py3-none-any.whl size=441326 sha256=d25b368fbfb15ec36bf9310b182418e40a12c1eca9699b426c9515c4d052142b
  Stored in directory: /tmp/pip-ephem-wheel-cache-l4gygdzp/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built requests
Installing collected packages: requests
  Attempting uninstall: requests
    Found existing installation: requests 2.3.0
    Uninstalling requests-2.3.0:
      Successfully uninstalled requests-2.3.0
Successfully installed requests-2.3.0
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout 3c88e520da24ae6f736929a750876e7654accc3d test_requests.py
Updated 0 paths from cf441cd
+ git apply -v -
Checking patch test_requests.py...
Applied patch test_requests.py cleanly.
+ : '>>>>> Start Test Output'
+ pytest -rA test_requests.py
============================= test session starts ==============================
platform linux -- Python 3.9.20, pytest-7.4.4, pluggy-1.0.0
rootdir: /testbed
collected 119 items

test_requests.py FFFFFFFFFFFFFFF..F.FF......FFFFFFFFFF......FF..F..F..F. [ 46%]
F.FFFFFFFF.FFFFFFFFFFF.FFF......................................         [100%]

=================================== FAILURES ===================================
____________ RequestsTestCase.test_BASICAUTH_TUPLE_HTTP_200_OK_GET _____________

self = <test_requests.RequestsTestCase testMethod=test_BASICAUTH_TUPLE_HTTP_200_OK_GET>

    def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self):
        auth = ('user', 'pass')
        url = httpbin('basic-auth', 'user', 'pass')
    
>       r = requests.get(url, auth=auth)

test_requests.py:250: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe313610>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
______________ RequestsTestCase.test_DIGESTAUTH_QUOTES_QOP_VALUE _______________

self = <test_requests.RequestsTestCase testMethod=test_DIGESTAUTH_QUOTES_QOP_VALUE>

    def test_DIGESTAUTH_QUOTES_QOP_VALUE(self):
    
        auth = HTTPDigestAuth('user', 'pass')
        url = httpbin('digest-auth', 'auth', 'user', 'pass')
    
>       r = requests.get(url, auth=auth)

test_requests.py:353: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3c2880>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
_____________ RequestsTestCase.test_DIGESTAUTH_WRONG_HTTP_401_GET ______________

self = <test_requests.RequestsTestCase testMethod=test_DIGESTAUTH_WRONG_HTTP_401_GET>

    def test_DIGESTAUTH_WRONG_HTTP_401_GET(self):
    
        auth = HTTPDigestAuth('user', 'wrongpass')
        url = httpbin('digest-auth', 'auth', 'user', 'pass')
    
>       r = requests.get(url, auth=auth)

test_requests.py:337: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe4cb9a0>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
_______________ RequestsTestCase.test_DIGEST_AUTH_RETURNS_COOKIE _______________

self = <test_requests.RequestsTestCase testMethod=test_DIGEST_AUTH_RETURNS_COOKIE>

    def test_DIGEST_AUTH_RETURNS_COOKIE(self):
        url = httpbin('digest-auth', 'auth', 'user', 'pass')
        auth = HTTPDigestAuth('user', 'pass')
>       r = requests.get(url)

test_requests.py:308: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3c0d60>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
____________ RequestsTestCase.test_DIGEST_AUTH_SETS_SESSION_COOKIES ____________

self = <test_requests.RequestsTestCase testMethod=test_DIGEST_AUTH_SETS_SESSION_COOKIES>

    def test_DIGEST_AUTH_SETS_SESSION_COOKIES(self):
        url = httpbin('digest-auth', 'auth', 'user', 'pass')
        auth = HTTPDigestAuth('user', 'pass')
>       s = requests.Session()

test_requests.py:317: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3fa3d0>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
_________________ RequestsTestCase.test_DIGEST_HTTP_200_OK_GET _________________

self = <test_requests.RequestsTestCase testMethod=test_DIGEST_HTTP_200_OK_GET>

    def test_DIGEST_HTTP_200_OK_GET(self):
    
        auth = HTTPDigestAuth('user', 'pass')
        url = httpbin('digest-auth', 'auth', 'user', 'pass')
    
>       r = requests.get(url, auth=auth)

test_requests.py:294: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3f7e50>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
_____________________ RequestsTestCase.test_DIGEST_STREAM ______________________

self = <test_requests.RequestsTestCase testMethod=test_DIGEST_STREAM>

    def test_DIGEST_STREAM(self):
    
        auth = HTTPDigestAuth('user', 'pass')
        url = httpbin('digest-auth', 'auth', 'user', 'pass')
    
>       r = requests.get(url, auth=auth, stream=True)

test_requests.py:326: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe20f850>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
______________ RequestsTestCase.test_HTTP_200_OK_GET_ALTERNATIVE _______________

self = <test_requests.RequestsTestCase testMethod=test_HTTP_200_OK_GET_ALTERNATIVE>

    def test_HTTP_200_OK_GET_ALTERNATIVE(self):
        r = requests.Request('GET', httpbin('get'))
>       s = requests.Session()

test_requests.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3dae50>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
___________ RequestsTestCase.test_HTTP_200_OK_GET_WITH_MIXED_PARAMS ____________

self = <test_requests.RequestsTestCase testMethod=test_HTTP_200_OK_GET_WITH_MIXED_PARAMS>

    def test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self):
        heads = {'User-agent': 'Mozilla/5.0'}
    
>       r = requests.get(httpbin('get') + '?test=true', params={'q': 'test'}, headers=heads)

test_requests.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3ca100>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
______________ RequestsTestCase.test_HTTP_200_OK_GET_WITH_PARAMS _______________

self = <test_requests.RequestsTestCase testMethod=test_HTTP_200_OK_GET_WITH_PARAMS>

    def test_HTTP_200_OK_GET_WITH_PARAMS(self):
        heads = {'User-agent': 'Mozilla/5.0'}
    
>       r = requests.get(httpbin('user-agent'), headers=heads)

test_requests.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3f7160>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
____________________ RequestsTestCase.test_HTTP_200_OK_HEAD ____________________

self = <test_requests.RequestsTestCase testMethod=test_HTTP_200_OK_HEAD>

    def test_HTTP_200_OK_HEAD(self):
>       r = requests.head(httpbin('get'))

test_requests.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:77: in head
    return request('head', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe166d00>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
____________________ RequestsTestCase.test_HTTP_200_OK_PUT _____________________

self = <test_requests.RequestsTestCase testMethod=test_HTTP_200_OK_PUT>

    def test_HTTP_200_OK_PUT(self):
>       r = requests.put(httpbin('put'))

test_requests.py:243: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:99: in put
    return request('put', url, data=data, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3fcc40>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
______________ RequestsTestCase.test_HTTP_302_ALLOW_REDIRECT_GET _______________

self = <test_requests.RequestsTestCase testMethod=test_HTTP_302_ALLOW_REDIRECT_GET>

    def test_HTTP_302_ALLOW_REDIRECT_GET(self):
>       r = requests.get(httpbin('redirect', '1'))

test_requests.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe313f10>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
_________________ RequestsTestCase.test_POSTBIN_GET_POST_FILES _________________

self = <test_requests.RequestsTestCase testMethod=test_POSTBIN_GET_POST_FILES>

    def test_POSTBIN_GET_POST_FILES(self):
    
        url = httpbin('post')
>       post1 = requests.post(url).raise_for_status()

test_requests.py:359: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:88: in post
    return request('post', url, data=data, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3cf820>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
____________ RequestsTestCase.test_POSTBIN_GET_POST_FILES_WITH_DATA ____________

self = <test_requests.RequestsTestCase testMethod=test_POSTBIN_GET_POST_FILES_WITH_DATA>

    def test_POSTBIN_GET_POST_FILES_WITH_DATA(self):
    
        url = httpbin('post')
>       post1 = requests.post(url).raise_for_status()

test_requests.py:377: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:88: in post
    return request('post', url, data=data, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3cad30>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
__________________ RequestsTestCase.test_basicauth_with_netrc __________________

self = <test_requests.RequestsTestCase testMethod=test_basicauth_with_netrc>

    def test_basicauth_with_netrc(self):
        auth = ('user', 'pass')
        wrong_auth = ('wronguser', 'wrongpass')
        url = httpbin('basic-auth', 'user', 'pass')
    
        def get_netrc_auth_mock(url):
            return auth
        requests.sessions.get_netrc_auth = get_netrc_auth_mock
    
        # Should use netrc and work.
>       r = requests.get(url)

test_requests.py:271: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3d04f0>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
____________ RequestsTestCase.test_cannot_send_unprepared_requests _____________

self = <test_requests.RequestsTestCase testMethod=test_cannot_send_unprepared_requests>

    def test_cannot_send_unprepared_requests(self):
        r = requests.Request(url=HTTPBIN)
        with pytest.raises(ValueError):
>           requests.Session().send(r)

test_requests.py:728: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3eed60>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
________________ RequestsTestCase.test_conflicting_post_params _________________

self = <test_requests.RequestsTestCase testMethod=test_conflicting_post_params>

    def test_conflicting_post_params(self):
        url = httpbin('post')
        with open('requirements.txt') as f:
>           pytest.raises(ValueError, "requests.post(url, data='[{\"some\": \"data\"}]', files={'some': f})")
E           TypeError: 'requests.post(url, data=\'[{"some": "data"}]\', files={\'some\': f})' object (type: <class 'str'>) must be callable

test_requests.py:395: TypeError
________________ RequestsTestCase.test_cookie_persists_via_api _________________

self = <test_requests.RequestsTestCase testMethod=test_cookie_persists_via_api>

    def test_cookie_persists_via_api(self):
>       s = requests.session()

test_requests.py:170: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:550: in session
    return Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe4cbc10>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
__________________ RequestsTestCase.test_cookie_quote_wrapped __________________

self = <test_requests.RequestsTestCase testMethod=test_cookie_quote_wrapped>

    def test_cookie_quote_wrapped(self):
>       s = requests.session()

test_requests.py:165: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:550: in session
    return Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe235040>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
________________ RequestsTestCase.test_cookie_removed_on_expire ________________

self = <test_requests.RequestsTestCase testMethod=test_cookie_removed_on_expire>

    def test_cookie_removed_on_expire(self):
>       s = requests.session()

test_requests.py:152: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:550: in session
    return Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe23c610>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
________________ RequestsTestCase.test_cookie_sent_on_redirect _________________

self = <test_requests.RequestsTestCase testMethod=test_cookie_sent_on_redirect>

    def test_cookie_sent_on_redirect(self):
>       s = requests.session()

test_requests.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:550: in session
    return Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3f0850>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
__________________ RequestsTestCase.test_custom_content_type ___________________

self = <test_requests.RequestsTestCase testMethod=test_custom_content_type>

    def test_custom_content_type(self):
>       r = requests.post(httpbin('post'),
                          data={'stuff': json.dumps({'a': 123})},
                          files={'file1': ('test_requests.py', open(__file__, 'rb')),
                                 'file2': ('test_requests', open(__file__, 'rb'),
                                           'text/py-content-type')})

test_requests.py:479: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:88: in post
    return request('post', url, data=data, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe200dc0>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
____________________ RequestsTestCase.test_decompress_gzip _____________________

self = <test_requests.RequestsTestCase testMethod=test_decompress_gzip>

    def test_decompress_gzip(self):
>       r = requests.get(httpbin('gzip'))

test_requests.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe21d970>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
__________ RequestsTestCase.test_different_encodings_dont_break_post ___________

self = <test_requests.RequestsTestCase testMethod=test_different_encodings_dont_break_post>

    def test_different_encodings_dont_break_post(self):
>       r = requests.post(httpbin('post'),
                          data={'stuff': json.dumps({'a': 123})},
                          params={'blah': 'asdf1234'},
                          files={'file': ('test_requests.py', open(__file__, 'rb'))})

test_requests.py:435: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:88: in post
    return request('post', url, data=data, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3c7880>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
______________________ RequestsTestCase.test_entry_points ______________________

self = <test_requests.RequestsTestCase testMethod=test_entry_points>

    def test_entry_points(self):
    
        requests.session
>       requests.session().get

test_requests.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:550: in session
    return Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe292880>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
_______________________ RequestsTestCase.test_fixes_1329 _______________________

self = <test_requests.RequestsTestCase testMethod=test_fixes_1329>

    def test_fixes_1329(self):
        """
        Ensure that header updates are done case-insensitively.
        """
>       s = requests.Session()

test_requests.py:754: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe160910>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
________________ RequestsTestCase.test_generic_cookiejar_works _________________

self = <test_requests.RequestsTestCase testMethod=test_generic_cookiejar_works>

    def test_generic_cookiejar_works(self):
        cj = cookielib.CookieJar()
        cookiejar_from_dict({'foo': 'bar'}, cj)
>       s = requests.session()

test_requests.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:550: in session
    return Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe4d5970>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
___________ RequestsTestCase.test_header_remove_is_case_insensitive ____________

self = <test_requests.RequestsTestCase testMethod=test_header_remove_is_case_insensitive>

    def test_header_remove_is_case_insensitive(self):
        # From issue #1321
>       s = requests.Session()

test_requests.py:810: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe53c0d0>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
_______ RequestsTestCase.test_headers_on_session_with_None_are_not_sent ________

self = <test_requests.RequestsTestCase testMethod=test_headers_on_session_with_None_are_not_sent>

    def test_headers_on_session_with_None_are_not_sent(self):
        """Do not send headers in Session.headers with None values."""
>       ses = requests.Session()

test_requests.py:216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe200280>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
______________________ RequestsTestCase.test_invalid_url _______________________

self = <test_requests.RequestsTestCase testMethod=test_invalid_url>

    def test_invalid_url(self):
        with pytest.raises(MissingSchema):
>           requests.get('hiwpefhipowhefopw')

test_requests.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3f1730>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
______________ RequestsTestCase.test_mixed_case_scheme_acceptable ______________

self = <test_requests.RequestsTestCase testMethod=test_mixed_case_scheme_acceptable>

    def test_mixed_case_scheme_acceptable(self):
>       s = requests.Session()

test_requests.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3f61c0>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
_________________ RequestsTestCase.test_param_cookiejar_works __________________

self = <test_requests.RequestsTestCase testMethod=test_param_cookiejar_works>

    def test_param_cookiejar_works(self):
        cj = cookielib.CookieJar()
        cookiejar_from_dict({'foo' : 'bar'}, cj)
>       s = requests.session()

test_requests.py:203: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:550: in session
    return Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3f0130>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
____________ RequestsTestCase.test_params_are_merged_case_sensitive ____________

self = <test_requests.RequestsTestCase testMethod=test_params_are_merged_case_sensitive>

    def test_params_are_merged_case_sensitive(self):
>       s = requests.Session()

test_requests.py:816: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe36b040>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
_________________ RequestsTestCase.test_prepared_from_session __________________

self = <test_requests.RequestsTestCase testMethod=test_prepared_from_session>

    def test_prepared_from_session(self):
        class DummyAuth(requests.auth.AuthBase):
            def __call__(self, r):
                r.headers['Dummy-Auth-Test'] = 'dummy-auth-test-ok'
                return r
    
        req = requests.Request('GET', httpbin('headers'))
        assert not req.auth
    
>       s = requests.Session()

test_requests.py:536: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3f7fa0>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
_________________ RequestsTestCase.test_prepared_request_hook __________________

self = <test_requests.RequestsTestCase testMethod=test_prepared_request_hook>

    def test_prepared_request_hook(self):
        def hook(resp, **kwargs):
            resp.hook_working = True
            return resp
    
        req = requests.Request('GET', HTTPBIN, hooks={'response': hook})
        prep = req.prepare()
    
>       s = requests.Session()

test_requests.py:521: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3a1a00>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
___________________ RequestsTestCase.test_pyopenssl_redirect ___________________

self = <test_requests.RequestsTestCase testMethod=test_pyopenssl_redirect>

    def test_pyopenssl_redirect(self):
>       requests.get('https://httpbin.org/status/301')

test_requests.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe166f40>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
__________ RequestsTestCase.test_request_and_response_are_pickleable ___________

self = <test_requests.RequestsTestCase testMethod=test_request_and_response_are_pickleable>

    def test_request_and_response_are_pickleable(self):
>       r = requests.get(httpbin('get'))

test_requests.py:694: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe202850>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
________ RequestsTestCase.test_request_cookie_overrides_session_cookie _________

self = <test_requests.RequestsTestCase testMethod=test_request_cookie_overrides_session_cookie>

    def test_request_cookie_overrides_session_cookie(self):
>       s = requests.session()

test_requests.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:550: in session
    return Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe200b50>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
_____________ RequestsTestCase.test_request_cookies_not_persisted ______________

self = <test_requests.RequestsTestCase testMethod=test_request_cookies_not_persisted>

    def test_request_cookies_not_persisted(self):
>       s = requests.session()

test_requests.py:184: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:550: in session
    return Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3c7b80>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
_____________________ RequestsTestCase.test_request_ok_set _____________________

self = <test_requests.RequestsTestCase testMethod=test_request_ok_set>

    def test_request_ok_set(self):
>       r = requests.get(httpbin('status', '404'))

test_requests.py:399: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe21d880>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
_________ RequestsTestCase.test_requests_in_history_are_not_overridden _________

self = <test_requests.RequestsTestCase testMethod=test_requests_in_history_are_not_overridden>

    def test_requests_in_history_are_not_overridden(self):
>       resp = requests.get(httpbin('redirect/3'))

test_requests.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe2939d0>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
______ RequestsTestCase.test_session_hooks_are_overriden_by_request_hooks ______

self = <test_requests.RequestsTestCase testMethod=test_session_hooks_are_overriden_by_request_hooks>

    def test_session_hooks_are_overriden_by_request_hooks(self):
        hook1 = lambda x, *args, **kwargs: x
        hook2 = lambda x, *args, **kwargs: x
        assert hook1 is not hook2
>       s = requests.Session()

test_requests.py:507: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe166a60>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
______ RequestsTestCase.test_session_hooks_are_used_with_no_request_hooks ______

self = <test_requests.RequestsTestCase testMethod=test_session_hooks_are_used_with_no_request_hooks>

    def test_session_hooks_are_used_with_no_request_hooks(self):
        hook = lambda x, *args, **kwargs: x
>       s = requests.Session()

test_requests.py:496: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe299160>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
____________________ RequestsTestCase.test_session_pickling ____________________

self = <test_requests.RequestsTestCase testMethod=test_session_pickling>

    def test_session_pickling(self):
        r = requests.Request('GET', httpbin('get'))
>       s = requests.Session()

test_requests.py:742: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3cadf0>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
___________________ RequestsTestCase.test_set_cookie_on_301 ____________________

self = <test_requests.RequestsTestCase testMethod=test_set_cookie_on_301>

    def test_set_cookie_on_301(self):
>       s = requests.session()

test_requests.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:550: in session
    return Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe166d00>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
_____________________ RequestsTestCase.test_status_raising _____________________

self = <test_requests.RequestsTestCase testMethod=test_status_raising>

    def test_status_raising(self):
>       r = requests.get(httpbin('status', '404'))

test_requests.py:403: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe169b80>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
___________________ RequestsTestCase.test_time_elapsed_blank ___________________

self = <test_requests.RequestsTestCase testMethod=test_time_elapsed_blank>

    def test_time_elapsed_blank(self):
>       r = requests.get(httpbin('get'))

test_requests.py:675: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3a3bb0>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
_______________ RequestsTestCase.test_transport_adapter_ordering _______________

self = <test_requests.RequestsTestCase testMethod=test_transport_adapter_ordering>

    def test_transport_adapter_ordering(self):
>       s = requests.Session()

test_requests.py:771: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe2934f0>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
______________________ RequestsTestCase.test_unicode_get _______________________

self = <test_requests.RequestsTestCase testMethod=test_unicode_get>

    def test_unicode_get(self):
        url = httpbin('/get')
>       requests.get(url, params={'foo': 'føø'})

test_requests.py:416: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe4d5d60>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
__________________ RequestsTestCase.test_unicode_header_name ___________________

self = <test_requests.RequestsTestCase testMethod=test_unicode_header_name>

    def test_unicode_header_name(self):
>       requests.put(httpbin('put'), headers={str('Content-Type'): 'application/octet-stream'}, data='\xff') # compat.str is unicode.

test_requests.py:423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:99: in put
    return request('put', url, data=data, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe344160>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
__________________ RequestsTestCase.test_unicode_method_name ___________________

self = <test_requests.RequestsTestCase testMethod=test_unicode_method_name>

    def test_unicode_method_name(self):
        files = {'file': open('test_requests.py', 'rb')}
>       r = requests.request(method=u'POST', url=httpbin('post'), files=files)

test_requests.py:475: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe394760>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
_________________ RequestsTestCase.test_unicode_multipart_post _________________

self = <test_requests.RequestsTestCase testMethod=test_unicode_multipart_post>

    def test_unicode_multipart_post(self):
>       r = requests.post(httpbin('post'),
                          data={'stuff': u'ëlïxr'},
                          files={'file': ('test_requests.py', open(__file__, 'rb'))})

test_requests.py:442: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:88: in post
    return request('post', url, data=data, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3845e0>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
_______________ RequestsTestCase.test_uppercase_scheme_redirect ________________

self = <test_requests.RequestsTestCase testMethod=test_uppercase_scheme_redirect>

    def test_uppercase_scheme_redirect(self):
        parts = urlparse(httpbin('html'))
        url = "HTTP://" + parts.netloc + parts.path
>       r = requests.get(httpbin('redirect-to'), params={'url': url})

test_requests.py:766: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3ef280>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
_________ RequestsTestCase.test_urlencoded_get_query_multivalued_param _________

self = <test_requests.RequestsTestCase testMethod=test_urlencoded_get_query_multivalued_param>

    def test_urlencoded_get_query_multivalued_param(self):
    
>       r = requests.get(httpbin('get'), params=dict(test=['foo', 'baz']))

test_requests.py:430: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe4d5160>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
__________________ RequestsTestCase.test_user_agent_transfers __________________

self = <test_requests.RequestsTestCase testMethod=test_user_agent_transfers>

    def test_user_agent_transfers(self):
    
        heads = {
            'User-agent': 'Mozilla/5.0 (github.com/kennethreitz/requests)'
        }
    
>       r = requests.get(httpbin('user-agent'), headers=heads)

test_requests.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:43: in request
    session = sessions.Session()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7ffffe3c72e0>

    def __init__(self):
    
        #: A case-insensitive dictionary of headers to be sent on each
        #: :class:`Request <Request>` sent from this
        #: :class:`Session <Session>`.
        self.headers = default_headers()
    
        #: Default Authentication tuple or object to attach to
        #: :class:`Request <Request>`.
        self.auth = None
    
        #: Dictionary mapping protocol to the URL of the proxy (e.g.
        #: {'http': 'foo.bar:3128'}) to be used on each
        #: :class:`Request <Request>`.
        self.proxies = {}
    
        #: Event-handling hooks.
        self.hooks = default_hooks()
    
        #: Dictionary of querystring data to attach to each
        #: :class:`Request <Request>`. The dictionary values may be lists for
        #: representing multivalued query parameters.
        self.params = {}
    
        #: Stream response content default.
        self.stream = False
    
        #: SSL Verification default.
        self.verify = True
    
        #: SSL certificate default.
        self.cert = None
    
        #: Maximum number of redirects allowed. If the request exceeds this
        #: limit, a :class:`TooManyRedirects` exception is raised.
        self.max_redirects = DEFAULT_REDIRECT_LIMIT
    
        #: Should we trust the environment?
        self.trust_env = True
    
        #: A CookieJar containing all currently outstanding cookies set on this
        #: session. By default it is a
        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
        #: may be any other ``cookielib.CookieJar`` compatible object.
        self.cookies = cookiejar_from_dict({})
    
        # Default connection adapters.
        self.adapters = OrderedDict()
>       self.mount('https://', HTTPAdapter())
E       NameError: name 'HTTPAdapter' is not defined

requests/sessions.py:232: NameError
=============================== warnings summary ===============================
requests/packages/urllib3/_collections.py:7
  /testbed/requests/packages/urllib3/_collections.py:7: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
    from collections import MutableMapping

requests/sessions.py:12
  /testbed/requests/sessions.py:12: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
    from collections import Mapping

test_requests.py::RequestsTestCase::test_autoset_header_values_are_native
  /testbed/requests/models.py:164: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
    if isinstance(hook, collections.Callable):

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED test_requests.py::RequestsTestCase::test_autoset_header_values_are_native
PASSED test_requests.py::RequestsTestCase::test_basic_building
PASSED test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files
PASSED test_requests.py::RequestsTestCase::test_cookie_as_dict_items
PASSED test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_items
PASSED test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_len
PASSED test_requests.py::RequestsTestCase::test_cookie_as_dict_keys
PASSED test_requests.py::RequestsTestCase::test_cookie_as_dict_values
PASSED test_requests.py::RequestsTestCase::test_cookie_parameters
PASSED test_requests.py::RequestsTestCase::test_get_auth_from_url
PASSED test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_hashes
PASSED test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_spaces
PASSED test_requests.py::RequestsTestCase::test_get_auth_from_url_not_encoded_spaces
PASSED test_requests.py::RequestsTestCase::test_get_auth_from_url_percent_chars
PASSED test_requests.py::RequestsTestCase::test_header_keys_are_native
PASSED test_requests.py::RequestsTestCase::test_hook_receives_request_arguments
PASSED test_requests.py::RequestsTestCase::test_http_error
PASSED test_requests.py::RequestsTestCase::test_links
PASSED test_requests.py::RequestsTestCase::test_long_authinfo_in_url
PASSED test_requests.py::RequestsTestCase::test_no_content_length
PASSED test_requests.py::RequestsTestCase::test_oddball_schemes_dont_check_URLs
PASSED test_requests.py::RequestsTestCase::test_params_are_added_before_fragment
PASSED test_requests.py::RequestsTestCase::test_path_is_not_double_encoded
PASSED test_requests.py::RequestsTestCase::test_response_is_iterable
PASSED test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames
PASSED test_requests.py::TestContentEncodingDetection::test_html4_pragma
PASSED test_requests.py::TestContentEncodingDetection::test_html_charset
PASSED test_requests.py::TestContentEncodingDetection::test_none
PASSED test_requests.py::TestContentEncodingDetection::test_precedence
PASSED test_requests.py::TestContentEncodingDetection::test_xhtml_pragma
PASSED test_requests.py::TestContentEncodingDetection::test_xml
PASSED test_requests.py::TestCaseInsensitiveDict::test_contains
PASSED test_requests.py::TestCaseInsensitiveDict::test_delitem
PASSED test_requests.py::TestCaseInsensitiveDict::test_docstring_example
PASSED test_requests.py::TestCaseInsensitiveDict::test_equality
PASSED test_requests.py::TestCaseInsensitiveDict::test_fixes_649
PASSED test_requests.py::TestCaseInsensitiveDict::test_get
PASSED test_requests.py::TestCaseInsensitiveDict::test_getitem
PASSED test_requests.py::TestCaseInsensitiveDict::test_iter
PASSED test_requests.py::TestCaseInsensitiveDict::test_iterable_init
PASSED test_requests.py::TestCaseInsensitiveDict::test_kwargs_init
PASSED test_requests.py::TestCaseInsensitiveDict::test_len
PASSED test_requests.py::TestCaseInsensitiveDict::test_lower_items
PASSED test_requests.py::TestCaseInsensitiveDict::test_mapping_init
PASSED test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case
PASSED test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case
PASSED test_requests.py::TestCaseInsensitiveDict::test_setdefault
PASSED test_requests.py::TestCaseInsensitiveDict::test_update
PASSED test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged
PASSED test_requests.py::UtilsTestCase::test_address_in_network
PASSED test_requests.py::UtilsTestCase::test_dotted_netmask
PASSED test_requests.py::UtilsTestCase::test_get_auth_from_url
PASSED test_requests.py::UtilsTestCase::test_get_environ_proxies
PASSED test_requests.py::UtilsTestCase::test_get_environ_proxies_ip_ranges
PASSED test_requests.py::UtilsTestCase::test_is_ipv4_address
PASSED test_requests.py::UtilsTestCase::test_is_valid_cidr
PASSED test_requests.py::UtilsTestCase::test_super_len_io_streams
PASSED test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int
PASSED test_requests.py::TestMorselToCookieExpires::test_expires_invalid_str
PASSED test_requests.py::TestMorselToCookieExpires::test_expires_none
PASSED test_requests.py::TestMorselToCookieExpires::test_expires_valid_str
PASSED test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str
PASSED test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int
FAILED test_requests.py::RequestsTestCase::test_BASICAUTH_TUPLE_HTTP_200_OK_GET
FAILED test_requests.py::RequestsTestCase::test_DIGESTAUTH_QUOTES_QOP_VALUE
FAILED test_requests.py::RequestsTestCase::test_DIGESTAUTH_WRONG_HTTP_401_GET
FAILED test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE - ...
FAILED test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES
FAILED test_requests.py::RequestsTestCase::test_DIGEST_HTTP_200_OK_GET - Name...
FAILED test_requests.py::RequestsTestCase::test_DIGEST_STREAM - NameError: na...
FAILED test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE
FAILED test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS
FAILED test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_PARAMS
FAILED test_requests.py::RequestsTestCase::test_HTTP_200_OK_HEAD - NameError:...
FAILED test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT - NameError: ...
FAILED test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET
FAILED test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES - Name...
FAILED test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA
FAILED test_requests.py::RequestsTestCase::test_basicauth_with_netrc - NameEr...
FAILED test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests
FAILED test_requests.py::RequestsTestCase::test_conflicting_post_params - Typ...
FAILED test_requests.py::RequestsTestCase::test_cookie_persists_via_api - Nam...
FAILED test_requests.py::RequestsTestCase::test_cookie_quote_wrapped - NameEr...
FAILED test_requests.py::RequestsTestCase::test_cookie_removed_on_expire - Na...
FAILED test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect - Nam...
FAILED test_requests.py::RequestsTestCase::test_custom_content_type - NameErr...
FAILED test_requests.py::RequestsTestCase::test_decompress_gzip - NameError: ...
FAILED test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post
FAILED test_requests.py::RequestsTestCase::test_entry_points - NameError: nam...
FAILED test_requests.py::RequestsTestCase::test_fixes_1329 - NameError: name ...
FAILED test_requests.py::RequestsTestCase::test_generic_cookiejar_works - Nam...
FAILED test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive
FAILED test_requests.py::RequestsTestCase::test_headers_on_session_with_None_are_not_sent
FAILED test_requests.py::RequestsTestCase::test_invalid_url - NameError: name...
FAILED test_requests.py::RequestsTestCase::test_mixed_case_scheme_acceptable
FAILED test_requests.py::RequestsTestCase::test_param_cookiejar_works - NameE...
FAILED test_requests.py::RequestsTestCase::test_params_are_merged_case_sensitive
FAILED test_requests.py::RequestsTestCase::test_prepared_from_session - NameE...
FAILED test_requests.py::RequestsTestCase::test_prepared_request_hook - NameE...
FAILED test_requests.py::RequestsTestCase::test_pyopenssl_redirect - NameErro...
FAILED test_requests.py::RequestsTestCase::test_request_and_response_are_pickleable
FAILED test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie
FAILED test_requests.py::RequestsTestCase::test_request_cookies_not_persisted
FAILED test_requests.py::RequestsTestCase::test_request_ok_set - NameError: n...
FAILED test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden
FAILED test_requests.py::RequestsTestCase::test_session_hooks_are_overriden_by_request_hooks
FAILED test_requests.py::RequestsTestCase::test_session_hooks_are_used_with_no_request_hooks
FAILED test_requests.py::RequestsTestCase::test_session_pickling - NameError:...
FAILED test_requests.py::RequestsTestCase::test_set_cookie_on_301 - NameError...
FAILED test_requests.py::RequestsTestCase::test_status_raising - NameError: n...
FAILED test_requests.py::RequestsTestCase::test_time_elapsed_blank - NameErro...
FAILED test_requests.py::RequestsTestCase::test_transport_adapter_ordering - ...
FAILED test_requests.py::RequestsTestCase::test_unicode_get - NameError: name...
FAILED test_requests.py::RequestsTestCase::test_unicode_header_name - NameErr...
FAILED test_requests.py::RequestsTestCase::test_unicode_method_name - NameErr...
FAILED test_requests.py::RequestsTestCase::test_unicode_multipart_post - Name...
FAILED test_requests.py::RequestsTestCase::test_uppercase_scheme_redirect - N...
FAILED test_requests.py::RequestsTestCase::test_urlencoded_get_query_multivalued_param
FAILED test_requests.py::RequestsTestCase::test_user_agent_transfers - NameEr...
================== 56 failed, 63 passed, 3 warnings in 1.68s ===================
+ : '>>>>> End Test Output'
+ git checkout 3c88e520da24ae6f736929a750876e7654accc3d test_requests.py
Updated 1 path from cf441cd
