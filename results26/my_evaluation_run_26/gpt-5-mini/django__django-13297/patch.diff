diff --git a/django/views/generic/base.py b/django/views/generic/base.py
index ea5baca08d..9631537207 100644
--- a/django/views/generic/base.py
+++ b/django/views/generic/base.py
@@ -13,23 +13,33 @@ from django.utils.decorators import classonlymethod
 from django.utils.deprecation import RemovedInDjango40Warning
 from django.utils.functional import SimpleLazyObject
 
-logger = logging.getLogger('django.request')
-
-
 class ContextMixin:
     """
     A default context mixin that passes the keyword arguments received by
     get_context_data() as the template context.
     """
     extra_context = None
-
     def get_context_data(self, **kwargs):
         kwargs.setdefault('view', self)
         if self.extra_context is not None:
             kwargs.update(self.extra_context)
+        # Resolve any SimpleLazyObject values so callers that expect concrete
+        # types (e.g., slugs) don't receive lazy proxy objects which can cause
+        # errors when used in database operations.
+        for key, value in list(kwargs.items()):
+            if isinstance(value, SimpleLazyObject):
+                try:
+                    # Force evaluation of the lazy object and replace with the
+                    # underlying wrapped object.
+                    value._setup()
+                    kwargs[key] = value._wrapped
+                except Exception:
+                    # If forcing evaluation fails, fall back to string conversion.
+                    kwargs[key] = str(value)
         return kwargs
 
 
+
 class View:
     """
     Intentionally simple parent class for all views. Only implements