diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 92fe4affb9..170f45735a 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -265,17 +265,16 @@ class Collector:
             self.data[model] = sorted(instances, key=attrgetter("pk"))
 
         # if possible, bring the models in an order suitable for databases that
-        # don't support transactions or cannot defer constraint checks until the
-        # end of a transaction.
-        self.sort()
-        # number of objects deleted for each model label
-        deleted_counter = Counter()
-
         # Optimize for the case with a single obj and no dependencies
-        if len(self.data) == 1 and len(instances) == 1:
-            instance = list(instances)[0]
-            if self.can_fast_delete(instance):
-                with transaction.mark_for_rollback_on_error():
+        if len(self.data) == 1:
+            model, instances = next(iter(self.data.items()))
+            if len(instances) == 1:
+                instance = list(instances)[0]
+                if self.can_fast_delete(instance):
+                    with transaction.mark_for_rollback_on_error():
+                        count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
+                    # Clear the instance's PK to reflect that it no longer exists in DB.
+
                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
                 return count, {model._meta.label: count}