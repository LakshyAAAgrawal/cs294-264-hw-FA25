diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py
index 87707d48f..88d5320c1 100644
--- a/sphinx/util/typing.py
+++ b/sphinx/util/typing.py
@@ -145,8 +145,6 @@ def restify(cls: Optional[Type]) -> str:
                 return _restify_py36(cls)
     except (AttributeError, TypeError):
         return repr(cls)
-
-
 def _restify_py37(cls: Optional[Type]) -> str:
     """Convert python class to a reST reference."""
     from sphinx.util import inspect  # lazy loading
@@ -192,10 +190,15 @@ def _restify_py37(cls: Optional[Type]) -> str:
     elif isinstance(cls, typing._SpecialForm):
         return ':py:obj:`~%s.%s`' % (cls.__module__, cls._name)
     elif hasattr(cls, '__qualname__'):
+        # Use a safe qualifier: prefer __qualname__ but fall back to __name__
+        qual = getattr(cls, '__qualname__', None) or getattr(cls, '__name__', None)
+        if not qual:
+            # As a last resort, use repr to avoid empty trailing dots like "torch.nn."
+            qual = getattr(cls, '__name__', None) or repr(cls)
         if cls.__module__ == 'typing':
-            return ':py:class:`~%s.%s`' % (cls.__module__, cls.__qualname__)
+            return ':py:class:`~%s.%s`' % (cls.__module__, qual)
         else:
-            return ':py:class:`%s.%s`' % (cls.__module__, cls.__qualname__)
+            return ':py:class:`%s.%s`' % (cls.__module__, qual)
     elif isinstance(cls, ForwardRef):
         return ':py:class:`%s`' % cls.__forward_arg__
     else:
@@ -204,6 +207,11 @@ def _restify_py37(cls: Optional[Type]) -> str:
             return ':py:obj:`~%s.%s`' % (cls.__module__, cls.__name__)
         else:
             return ':py:obj:`%s.%s`' % (cls.__module__, cls.__name__)
+        # not a class (ex. TypeVar)
+        if cls.__module__ == 'typing':
+            return ':py:obj:`~%s.%s`' % (cls.__module__, cls.__name__)
+        else:
+            return ':py:obj:`%s.%s`' % (cls.__module__, cls.__name__)
 
 
 def _restify_py36(cls: Optional[Type]) -> str: