diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d1..35f51ad3a 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -523,21 +523,48 @@ class InheritDocstrings(type):
     def __init__(cls, name, bases, dct):
         def is_public_member(key):
             return (
-                (key.startswith('__') and key.endswith('__')
-                 and len(key) > 4) or
-                not key.startswith('_'))
+                (key.startswith('__') and key.endswith('__') and len(key) > 4)
+                or not key.startswith('_')
+            )
 
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
-                is_public_member(key) and
-                val.__doc__ is None):
+            if ((inspect.isfunction(val) or
+                 isinstance(val, (property, classmethod, staticmethod)))
+                and is_public_member(key) and
+                getattr(val, '__doc__', None) is None):
                 for base in cls.__mro__[1:]:
                     super_method = getattr(base, key, None)
                     if super_method is not None:
-                        val.__doc__ = super_method.__doc__
+                        # Handle properties: copy docstring to the fget if possible
+                        if isinstance(val, property):
+                            super_doc = getattr(super_method, '__doc__', None)
+                            if super_doc is None and hasattr(super_method, 'fget'):
+                                super_doc = getattr(super_method.fget, '__doc__', None)
+                            if super_doc is not None:
+                                try:
+                                    if getattr(val, 'fget', None) is not None and getattr(val.fget, '__doc__', None) is None:
+                                        val.fget.__doc__ = super_doc
+                                    else:
+                                        # Fallback: set property's __doc__ if available
+                                        val.__doc__ = super_doc
+                                except Exception:
+                                    pass
+                        # Handle classmethod/staticmethod by updating the underlying function
+                        elif isinstance(val, (classmethod, staticmethod)):
+                            func = getattr(val, '__func__', None)
+                            super_doc = getattr(super_method, '__doc__', None)
+                            if super_doc is None and hasattr(super_method, '__func__'):
+                                super_doc = getattr(super_method.__func__, '__doc__', None)
+                            if func is not None and super_doc is not None and getattr(func, '__doc__', None) is None:
+                                try:
+                                    func.__doc__ = super_doc
+                                except Exception:
+                                    pass
+                        else:
+                            # Plain functions: copy docstring directly
+                            val.__doc__ = getattr(super_method, '__doc__', None)
                         break
-
-        super().__init__(name, bases, dct)
+    super().__init__(name, bases, dct)
 
 
 class OrderedDescriptor(metaclass=abc.ABCMeta):