diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d1..92581f892 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -528,14 +528,41 @@ class InheritDocstrings(type):
                 not key.startswith('_'))
 
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
-                is_public_member(key) and
-                val.__doc__ is None):
-                for base in cls.__mro__[1:]:
-                    super_method = getattr(base, key, None)
-                    if super_method is not None:
-                        val.__doc__ = super_method.__doc__
-                        break
+            if not is_public_member(key):
+                continue
+
+            # Handle plain functions, classmethod/staticmethod wrappers, and
+            # properties. Only inherit docstrings when none are present.
+            if inspect.isfunction(val):
+                if val.__doc__ is None:
+                    for base in cls.__mro__[1:]:
+                        super_method = getattr(base, key, None)
+                        if super_method is not None:
+                            val.__doc__ = super_method.__doc__
+                            break
+            elif isinstance(val, (classmethod, staticmethod)):
+                func = val.__func__
+                if func.__doc__ is None:
+                    for base in cls.__mro__[1:]:
+                        super_method = getattr(base, key, None)
+                        if super_method is not None:
+                            doc = getattr(super_method, '__doc__', None)
+                            if doc:
+                                func.__doc__ = doc
+                                break
+            elif isinstance(val, property):
+                # property.__doc__ is typically taken from fget; if missing,
+                # inherit and replace the property on the class with one that
+                # has the inherited docstring.
+                if val.__doc__ is None:
+                    for base in cls.__mro__[1:]:
+                        super_attr = getattr(base, key, None)
+                        if super_attr is not None:
+                            doc = getattr(super_attr, '__doc__', None)
+                            if doc:
+                                new_prop = property(val.fget, val.fset, val.fdel, doc)
+                                setattr(cls, key, new_prop)
+                                break
 
         super().__init__(name, bases, dct)
 
@@ -751,7 +778,7 @@ class OrderedDescriptorContainer(type):
         ('y', <TypedAttribute(name=y, type=(float, int))>),
         ('z', <TypedAttribute(name=z, type=(float, int))>)])
 
-    .. note::
+    .. note:
 
         Hopefully it is clear from these examples that this construction
         also allows a class of type `OrderedDescriptorContainer` to use
@@ -1126,4 +1153,4 @@ def dtype_bytes_or_chars(dtype):
     """
     match = re.search(r'(\d+)$', dtype.str)
     out = int(match.group(1)) if match else None
-    return out
+    return out
\ No newline at end of file