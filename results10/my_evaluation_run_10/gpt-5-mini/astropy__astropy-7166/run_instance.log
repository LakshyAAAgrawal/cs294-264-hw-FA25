2025-10-03 21:22:44,274 - INFO - Creating container for astropy__astropy-7166...
2025-10-03 21:22:44,830 - INFO - Container for astropy__astropy-7166 created: 42b3f7a79019572e1ce52668d54e5bbd177fdf5eb7bba776cbab366718db8251
2025-10-03 21:22:45,110 - INFO - Container for astropy__astropy-7166 started: 42b3f7a79019572e1ce52668d54e5bbd177fdf5eb7bba776cbab366718db8251
2025-10-03 21:22:45,110 - INFO - Intermediate patch for astropy__astropy-7166 written to logs/run_evaluation/my_evaluation_run_10/gpt-5-mini/astropy__astropy-7166/patch.diff, now applying to container...
2025-10-03 21:22:45,382 - INFO - >>>>> Applied Patch:
Checking patch astropy/utils/misc.py...
Applied patch astropy/utils/misc.py cleanly.

2025-10-03 21:22:46,039 - INFO - Git diff before:
diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d1..92581f892 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -528,14 +528,41 @@ class InheritDocstrings(type):
                 not key.startswith('_'))
 
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
-                is_public_member(key) and
-                val.__doc__ is None):
-                for base in cls.__mro__[1:]:
-                    super_method = getattr(base, key, None)
-                    if super_method is not None:
-                        val.__doc__ = super_method.__doc__
-                        break
+            if not is_public_member(key):
+                continue
+
+            # Handle plain functions, classmethod/staticmethod wrappers, and
+            # properties. Only inherit docstrings when none are present.
+            if inspect.isfunction(val):
+                if val.__doc__ is None:
+                    for base in cls.__mro__[1:]:
+                        super_method = getattr(base, key, None)
+                        if super_method is not None:
+                            val.__doc__ = super_method.__doc__
+                            break
+            elif isinstance(val, (classmethod, staticmethod)):
+                func = val.__func__
+                if func.__doc__ is None:
+                    for base in cls.__mro__[1:]:
+                        super_method = getattr(base, key, None)
+                        if super_method is not None:
+                            doc = getattr(super_method, '__doc__', None)
+                            if doc:
+                                func.__doc__ = doc
+                                break
+            elif isinstance(val, property):
+                # property.__doc__ is typically taken from fget; if missing,
+                # inherit and replace the property on the class with one that
+                # has the inherited docstring.
+                if val.__doc__ is None:
+                    for base in cls.__mro__[1:]:
+                        super_attr = getattr(base, key, None)
+                        if super_attr is not None:
+                            doc = getattr(super_attr, '__doc__', None)
+                            if doc:
+                                new_prop = property(val.fget, val.fset, val.fdel, doc)
+                                setattr(cls, key, new_prop)
+                                break
 
         super().__init__(name, bases, dct)
 
@@ -751,7 +778,7 @@ class OrderedDescriptorContainer(type):
         ('y', <TypedAttribute(name=y, type=(float, int))>),
         ('z', <TypedAttribute(name=z, type=(float, int))>)])
 
-    .. note::
+    .. note:
 
         Hopefully it is clear from these examples that this construction
         also allows a class of type `OrderedDescriptorContainer` to use
@@ -1126,4 +1153,4 @@ def dtype_bytes_or_chars(dtype):
     """
     match = re.search(r'(\d+)$', dtype.str)
     out = int(match.group(1)) if match else None
-    return out
+    return out
\ No newline at end of file
2025-10-03 21:22:46,040 - INFO - Eval script for astropy__astropy-7166 written to logs/run_evaluation/my_evaluation_run_10/gpt-5-mini/astropy__astropy-7166/eval.sh; copying to container...
2025-10-03 21:22:55,234 - INFO - Test runtime: 9.13 seconds
2025-10-03 21:22:55,235 - INFO - Test output for astropy__astropy-7166 written to logs/run_evaluation/my_evaluation_run_10/gpt-5-mini/astropy__astropy-7166/test_output.txt
2025-10-03 21:22:55,457 - INFO - Git diff after:
diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d1..92581f892 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -528,14 +528,41 @@ class InheritDocstrings(type):
                 not key.startswith('_'))
 
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
-                is_public_member(key) and
-                val.__doc__ is None):
-                for base in cls.__mro__[1:]:
-                    super_method = getattr(base, key, None)
-                    if super_method is not None:
-                        val.__doc__ = super_method.__doc__
-                        break
+            if not is_public_member(key):
+                continue
+
+            # Handle plain functions, classmethod/staticmethod wrappers, and
+            # properties. Only inherit docstrings when none are present.
+            if inspect.isfunction(val):
+                if val.__doc__ is None:
+                    for base in cls.__mro__[1:]:
+                        super_method = getattr(base, key, None)
+                        if super_method is not None:
+                            val.__doc__ = super_method.__doc__
+                            break
+            elif isinstance(val, (classmethod, staticmethod)):
+                func = val.__func__
+                if func.__doc__ is None:
+                    for base in cls.__mro__[1:]:
+                        super_method = getattr(base, key, None)
+                        if super_method is not None:
+                            doc = getattr(super_method, '__doc__', None)
+                            if doc:
+                                func.__doc__ = doc
+                                break
+            elif isinstance(val, property):
+                # property.__doc__ is typically taken from fget; if missing,
+                # inherit and replace the property on the class with one that
+                # has the inherited docstring.
+                if val.__doc__ is None:
+                    for base in cls.__mro__[1:]:
+                        super_attr = getattr(base, key, None)
+                        if super_attr is not None:
+                            doc = getattr(super_attr, '__doc__', None)
+                            if doc:
+                                new_prop = property(val.fget, val.fset, val.fdel, doc)
+                                setattr(cls, key, new_prop)
+                                break
 
         super().__init__(name, bases, dct)
 
@@ -751,7 +778,7 @@ class OrderedDescriptorContainer(type):
         ('y', <TypedAttribute(name=y, type=(float, int))>),
         ('z', <TypedAttribute(name=z, type=(float, int))>)])
 
-    .. note::
+    .. note:
 
         Hopefully it is clear from these examples that this construction
         also allows a class of type `OrderedDescriptorContainer` to use
@@ -1126,4 +1153,4 @@ def dtype_bytes_or_chars(dtype):
     """
     match = re.search(r'(\d+)$', dtype.str)
     out = int(match.group(1)) if match else None
-    return out
+    return out
\ No newline at end of file
2025-10-03 21:22:55,457 - INFO - Grading answer for astropy__astropy-7166...
2025-10-03 21:22:55,458 - INFO - report: {'astropy__astropy-7166': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': True, 'tests_status': {'FAIL_TO_PASS': {'success': ['astropy/utils/tests/test_misc.py::test_inherit_docstrings'], 'failure': []}, 'PASS_TO_PASS': {'success': ['astropy/utils/tests/test_misc.py::test_isiterable', 'astropy/utils/tests/test_misc.py::test_signal_number_to_name_no_failure', 'astropy/utils/tests/test_misc.py::test_skip_hidden', 'astropy/utils/tests/test_misc.py::test_JsonCustomEncoder', 'astropy/utils/tests/test_misc.py::test_check_broadcast', 'astropy/utils/tests/test_misc.py::test_dtype_bytes_or_chars'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for astropy__astropy-7166: resolved: True
2025-10-03 21:22:55,458 - INFO - Attempting to stop container sweb.eval.astropy__astropy-7166.my_evaluation_run_10...
2025-10-03 21:23:11,976 - INFO - Attempting to remove container sweb.eval.astropy__astropy-7166.my_evaluation_run_10...
2025-10-03 21:23:12,469 - INFO - Container sweb.eval.astropy__astropy-7166.my_evaluation_run_10 removed.
2025-10-03 21:23:12,469 - INFO - Attempting to remove image swebench/sweb.eval.x86_64.astropy_1776_astropy-7166:latest...
2025-10-03 21:23:12,903 - INFO - Image swebench/sweb.eval.x86_64.astropy_1776_astropy-7166:latest removed.
