diff --git a/requests/utils.py b/requests/utils.py
index 132cd2b..959d261 100644
--- a/requests/utils.py
+++ b/requests/utils.py
@@ -14,23 +14,37 @@ import codecs
 import collections
 import io
 import os
-import platform
-import re
-import sys
-import socket
-import struct
-import warnings
-
-from . import __version__
-from . import certs
-from .compat import parse_http_list as _parse_list_header
-from .compat import (quote, urlparse, bytes, str, OrderedDict, unquote, is_py2,
-                     builtin_str, getproxies, proxy_bypass, urlunparse,
-                     basestring)
-from .cookies import RequestsCookieJar, cookiejar_from_dict
-from .structures import CaseInsensitiveDict
-from .exceptions import InvalidURL, FileModeWarning
+def to_native_string(string, encoding='ascii'):
+    """
+    Given a string object, regardless of type, returns a representation of that
+    string in the native string type, encoding and decoding where necessary.
+    This assumes ASCII unless told otherwise.
+    """
+    out = None
+
+    if isinstance(string, builtin_str):
+        out = string
+    else:
+        if is_py2:
+            # On Python 2, convert unicode to bytes using the requested encoding.
+            out = string.encode(encoding)
+        else:
+            # On Python 3, attempt to decode bytes to str using the requested
+            # encoding. If that fails (for example when bytes are UTF-8 but
+            # encoding='ascii'), fall back to UTF-8, then Latin-1 with replacement.
+            if isinstance(string, bytes):
+                try:
+                    out = string.decode(encoding)
+                except (UnicodeDecodeError, LookupError):
+                    try:
+                        out = string.decode('utf-8')
+                    except UnicodeDecodeError:
+                        out = string.decode('latin-1', 'replace')
+            else:
+                # For other non-str, non-bytes types, coerce to str().
+                out = str(string)
 
+    return out
 _hush_pyflakes = (RequestsCookieJar,)
 
 NETRC_FILES = ('.netrc', '_netrc')