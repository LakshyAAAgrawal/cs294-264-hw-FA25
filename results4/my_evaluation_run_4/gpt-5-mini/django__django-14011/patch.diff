Suggested minimal patch (fixes LiveServerTestCase ThreadedWSGIServer not waiting for threads, causing DB connections to stay open â€” addresses regressions like #22414):

File: django/test/testcases.py
Patch (apply the small change in LiveServerThread._create_server):

--- a/django/test/testcases.py
+++ b/django/test/testcases.py
@@
     def _create_server(self):
-        return ThreadedWSGIServer((self.host, self.port), QuietWSGIRequestHandler, allow_reuse_address=False)
+        server = ThreadedWSGIServer(
+            (self.host, self.port),
+            QuietWSGIRequestHandler,
+            allow_reuse_address=False
+        )
+        # Ensure per-request threads are non-daemonic so shutdown waits for them to finish
+        # This allows database connections opened by request threads to be closed before
+        # destroy_test_db() runs (avoids "database ... is being accessed by other users").
+        server.daemon_threads = False
+        return server

Notes and verification:
- Rationale: ThreadingMixIn uses Thread.daemon = self.daemon_threads. When daemon_threads=True, worker threads may be killed on shutdown and their DB connections left open; setting daemon_threads=False makes shutdown wait for threads to terminate cleanly.
- Additional precaution: ensure request handling code calls django.db.connections.close_all() (or close_old_connections()) at the end of each request; Django typically does this in its request handling path, but verify if a custom handler is in use.
- Test: run the test suite containing LiveServerTestCase repeatedly (e.g., 50-100 runs) and/or run the specific test that previously repro'd the failure to confirm the "OperationalError: database ... is being accessed by other users" no longer appears.

If you want, I can produce a patch file or run a targeted search to find the exact LiveServerThread implementation in your tree and apply the change automatically.

No changes detected to generate a patch.