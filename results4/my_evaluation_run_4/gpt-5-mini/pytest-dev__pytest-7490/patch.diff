Explanation
Pytest 6 tightened when dynamically-added markers are taken into account: markers must be present before the test "call" phase (i.e., during collection or setup) to affect the test outcome. Adding an xfail with request.node.add_marker(...) from inside the test function runs too late in pytest-6's reporting flow, so the test fails normally. In contrast, pytest 5 treated such late additions permissively.

Minimal repro (what you already showed)
# test_foo.py
import pytest

def test_xfail_test(request):
    mark = pytest.mark.xfail(reason="xfail")
    request.node.add_marker(mark)   # added during call -> too late in pytest 6
    assert 0

Behavior
- pytest 5.x: that test is reported XFAILED.
- pytest 6.x: the test is reported FAILED (because the xfail marker was added during call).

Recommended fixes (pick one depending on when you decide)
1) If you decide inside the test body, call pytest.xfail()
import pytest

def test_xfail_test():
    pytest.xfail("xfail")   # immediate, triggers xfail outcome right away
    assert 0  # will be xfailed (this line won't be executed after xfail)

2) If the decision can be made before call, add the marker in setup (fixture)
# conftest.py or test module
import pytest

@pytest.fixture(autouse=True)
def add_xfail_marker(request):
    if request.node.name == "test_xfail_test":   # or some condition
        request.node.add_marker(pytest.mark.xfail(reason="xfail"))

# test_foo.py
def test_xfail_test():
    assert 0  # marker present before call -> will be reported as xfailed

3) If decision is known at collection time, add marker in a collection hook
# conftest.py
import pytest

def pytest_collection_modifyitems(session, config, items):
    for item in items:
        if item.name == "test_xfail_test":   # or inspect item.nodeid / keywords / config
            item.add_marker(pytest.mark.xfail(reason="xfail"))

Notes and guidance
- Use pytest.xfail() when the test itself determines it's expected to fail at runtime.
- Use a fixture (autouse or explicitly requested, which runs in setup) or pytest_collection_modifyitems when the condition is known before the call phase.
- If you want, I can (A) produce a small test matrix showing pytest-5 vs pytest-6 output, (B) draft a patch to update your test suite to use one of the fixes (e.g., convert request.node.add_marker calls to a setup fixture), or (C) locate the exact pytest PR/commit that changed this behavior. Tell me which you prefer.

No changes detected to generate a patch.