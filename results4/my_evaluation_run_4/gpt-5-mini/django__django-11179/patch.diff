diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 92fe4affb9..7d2c87b6d1 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -273,12 +273,15 @@ class Collector:
 
         # Optimize for the case with a single obj and no dependencies
         if len(self.data) == 1 and len(instances) == 1:
-            instance = list(instances)[0]
-            if self.can_fast_delete(instance):
-                with transaction.mark_for_rollback_on_error():
-                    count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
-                return count, {model._meta.label: count}
-
+# Optimize for the case with a single obj and no dependencies
+    if len(self.data) == 1 and len(instances) == 1:
+        instance = list(instances)[0]
+        if self.can_fast_delete(instance):
+            with transaction.mark_for_rollback_on_error():
+                count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
+            # Clear the PK on the Python instance since the DB row was removed.
+            instance.pk = None
+            return count, {model._meta.label: count}
         with transaction.atomic(using=self.using, savepoint=False):
             # send pre_delete signals
             for model, obj in self.instances_with_model():