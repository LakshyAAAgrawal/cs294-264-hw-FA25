diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py
index 494890cc23..33cb1bb0d3 100644
--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@ -220,23 +220,28 @@ class HashedFilesMixin:
 
         # where to store the new paths
         hashed_files = {}
+        # Collect final results per original name so we only yield each original
+        # filename once, using the final hashed_name/processed values after all
+        # passes are complete.
+        results = {}
 
         # build a list of adjustable files
         adjustable_paths = [
             path for path in paths
             if matches_patterns(path, self._patterns)
         ]
-        # Do a single pass first. Post-process all files once, then repeat for
-        # adjustable files.
+        # Do a single pass first. Record results (will be overwritten by later passes
+        # for the same name so the final stored value is the last one).
         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):
-            yield name, hashed_name, processed
+            results[name] = (hashed_name, processed)
 
         paths = {path: paths[path] for path in adjustable_paths}
 
         for i in range(self.max_post_process_passes):
             substitutions = False
             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
-                yield name, hashed_name, processed
+                # Update the stored result for this name with the latest values.
+                results[name] = (hashed_name, processed)
                 substitutions = substitutions or subst
 
             if not substitutions:
@@ -248,6 +253,12 @@ class HashedFilesMixin:
         # Store the processed paths
         self.hashed_files.update(hashed_files)
 
+        # After all passes, yield each original filename once with its final values.
+        for name in sorted(results):
+            hashed_name, processed = results[name]
+            yield name, hashed_name, processed
+        self.hashed_files.update(hashed_files)
+
     def _post_process(self, paths, adjustable_paths, hashed_files):
         # Sort the files by directory level
         def path_level(name):