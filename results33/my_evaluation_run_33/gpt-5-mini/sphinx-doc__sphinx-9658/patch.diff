diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py
index 87707d48f..dddfefb43 100644
--- a/sphinx/util/typing.py
+++ b/sphinx/util/typing.py
@@ -37,10 +37,10 @@ try:
     from types import UnionType  # type: ignore  # python 3.10 or above
 except ImportError:
     UnionType = None
-
 if False:
     # For type annotation
-    from typing import Type  # NOQA # for python3.5.1
+    pass
+    
 
 
 # builtin classes that have incorrect __module__
@@ -192,18 +192,26 @@ def _restify_py37(cls: Optional[Type]) -> str:
     elif isinstance(cls, typing._SpecialForm):
         return ':py:obj:`~%s.%s`' % (cls.__module__, cls._name)
     elif hasattr(cls, '__qualname__'):
+        # Prefer qualname but fall back to name; handle mocked objects with empty names
+        name = getattr(cls, '__qualname__', None) or getattr(cls, '__name__', None)
+        if not name:
+            # Fallback for weird/mocked objects: use a stable repr instead of an empty name
+            return repr(cls)
         if cls.__module__ == 'typing':
-            return ':py:class:`~%s.%s`' % (cls.__module__, cls.__qualname__)
+            return ':py:class:`~%s.%s`' % (cls.__module__, name)
         else:
-            return ':py:class:`%s.%s`' % (cls.__module__, cls.__qualname__)
+            return ':py:class:`%s.%s`' % (cls.__module__, name)
     elif isinstance(cls, ForwardRef):
         return ':py:class:`%s`' % cls.__forward_arg__
     else:
-        # not a class (ex. TypeVar)
+        # not a class (ex. TypeVar) - ensure we have a usable name or fallback to repr
+        name = getattr(cls, '__name__', None)
+        if not name:
+            return repr(cls)
         if cls.__module__ == 'typing':
-            return ':py:obj:`~%s.%s`' % (cls.__module__, cls.__name__)
+            return ':py:obj:`~%s.%s`' % (cls.__module__, name)
         else:
-            return ':py:obj:`%s.%s`' % (cls.__module__, cls.__name__)
+            return ':py:obj:`%s.%s`' % (cls.__module__, name)
 
 
 def _restify_py36(cls: Optional[Type]) -> str: