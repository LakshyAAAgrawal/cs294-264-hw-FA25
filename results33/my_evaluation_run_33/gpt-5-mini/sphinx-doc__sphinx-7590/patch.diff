diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py
index fe52d881d..16935b76c 100644
--- a/sphinx/domains/cpp.py
+++ b/sphinx/domains/cpp.py
@@ -4642,7 +4642,6 @@ class DefinitionParser(BaseParser):
                 escape = False
             self.pos += 1
         return self.definition[startPos:self.pos]
-
     def _parse_literal(self) -> ASTLiteral:
         # -> integer-literal
         #  | character-literal
@@ -4664,10 +4663,21 @@ class DefinitionParser(BaseParser):
             if self.match(regex):
                 while self.current_char in 'uUlLfF':
                     self.pos += 1
+                # support user-defined-literal suffixes (e.g., 123_km)
+                if self.current_char and (self.current_char.isalpha() or self.current_char == '_'):
+                    while self.current_char and (self.current_char.isalnum() or self.current_char == '_'):
+                        self.pos += 1
                 return ASTNumberLiteral(self.definition[pos:self.pos])
 
         string = self._parse_string()
         if string is not None:
+            # allow user-defined-literal suffix immediately after a string literal
+            string_start = self.pos - len(string)
+            if self.current_char and (self.current_char.isalpha() or self.current_char == '_'):
+                while self.current_char and (self.current_char.isalnum() or self.current_char == '_'):
+                    self.pos += 1
+                # return the full token (string + suffix) as a string-literal node
+                return ASTStringLiteral(self.definition[string_start:self.pos])
             return ASTStringLiteral(string)
 
         # character-literal
@@ -4675,6 +4685,13 @@ class DefinitionParser(BaseParser):
             prefix = self.last_match.group(1)  # may be None when no prefix
             data = self.last_match.group(2)
             try:
+                # detect UDL suffix after char literal; if present, include suffix
+                char_start = self.pos - len(self.last_match.group(0))
+                if self.current_char and (self.current_char.isalpha() or self.current_char == '_'):
+                    while self.current_char and (self.current_char.isalnum() or self.current_char == '_'):
+                        self.pos += 1
+                    # represent char+suffix as a string-literal node containing the full token
+                    return ASTStringLiteral(self.definition[char_start:self.pos])
                 return ASTCharLiteral(prefix, data)
             except UnicodeDecodeError as e:
                 self.fail("Can not handle character literal. Internal error was: %s" % e)
@@ -4682,6 +4699,8 @@ class DefinitionParser(BaseParser):
                 self.fail("Can not handle character literal"
                           " resulting in multiple decoded characters.")
 
+        # no literal found
+
         # TODO: user-defined lit
         return None