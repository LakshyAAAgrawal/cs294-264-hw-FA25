diff --git a/requests/sessions.py b/requests/sessions.py
index a023e4e..b3eaa03 100644
--- a/requests/sessions.py
+++ b/requests/sessions.py
@@ -11,10 +11,6 @@ requests (cookies, auth, proxies).
 import os
 from collections import Mapping
 from datetime import datetime
-
-from .compat import cookielib, OrderedDict, urljoin, urlparse, builtin_str
-from .cookies import (
-    cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar, merge_cookies)
 from .models import Request, PreparedRequest, DEFAULT_REDIRECT_LIMIT
 from .hooks import default_hooks, dispatch_hook
 from .utils import to_key_val_list, default_headers, to_native_string
@@ -30,14 +26,15 @@ from .status_codes import codes
 # formerly defined here, reexposed here for backward compatibility
 from .models import REDIRECT_STATI
 
-
+from .compat import cookielib, OrderedDict, urljoin, urlparse, builtin_str
+from .cookies import (
+    cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar, merge_cookies)
 def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
     """
     Determines appropriate setting for a given request, taking into account the
     explicit setting on that request, and the setting in the session. If a
     setting is a dictionary, they will be merged together using `dict_class`
     """
-
     if session_setting is None:
         return request_setting
 
@@ -45,13 +42,25 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
         return session_setting
 
     # Bypass if not a dictionary (e.g. verify)
-    if not (
-            isinstance(session_setting, Mapping) and
-            isinstance(request_setting, Mapping)
-    ):
+    if not (isinstance(session_setting, Mapping) and
+            isinstance(request_setting, Mapping)):
         return request_setting
 
+    # Start from session settings and remove any keys explicitly set to None
     merged_setting = dict_class(to_key_val_list(session_setting))
+    for k, v in list(session_setting.items()):
+        if v is None:
+            merged_setting.pop(k, None)
+
+    # Update with request settings (request overrides session)
+    merged_setting.update(to_key_val_list(request_setting))
+
+    # Remove keys explicitly set to None on the request to unset them
+    for k, v in list(request_setting.items()):
+        if v is None:
+            merged_setting.pop(k, None)
+
+    return merged_setting
     merged_setting.update(to_key_val_list(request_setting))
 
     # Remove keys that are set to None.