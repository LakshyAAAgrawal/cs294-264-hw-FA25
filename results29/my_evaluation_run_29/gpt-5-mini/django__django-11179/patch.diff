diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 92fe4affb9..f7c2d46787 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -260,7 +260,6 @@ class Collector:
         self.data = {model: self.data[model] for model in sorted_models}
 
     def delete(self):
-        # sort instance collections
         for model, instances in self.data.items():
             self.data[model] = sorted(instances, key=attrgetter("pk"))
 
@@ -277,6 +276,9 @@ class Collector:
             if self.can_fast_delete(instance):
                 with transaction.mark_for_rollback_on_error():
                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
+                # Clear the in-memory primary key after a successful DB delete so the
+                # instance accurately reflects that it no longer exists.
+                instance.pk = None
                 return count, {model._meta.label: count}
 
         with transaction.atomic(using=self.using, savepoint=False):
@@ -310,6 +312,18 @@ class Collector:
                 count = query.delete_batch(pk_list, self.using)
                 deleted_counter[model._meta.label] += count
 
+                if not model._meta.auto_created:
+                    for obj in instances:
+                        signals.post_delete.send(
+                            sender=model, instance=obj, using=self.using
+                        )
+            # delete instances
+            for model, instances in self.data.items():
+                query = sql.DeleteQuery(model)
+                pk_list = [obj.pk for obj in instances]
+                count = query.delete_batch(pk_list, self.using)
+                deleted_counter[model._meta.label] += count
+
                 if not model._meta.auto_created:
                     for obj in instances:
                         signals.post_delete.send(