diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py
index fe52d881d..63d16b0b9 100644
--- a/sphinx/domains/cpp.py
+++ b/sphinx/domains/cpp.py
@@ -4642,7 +4642,6 @@ class DefinitionParser(BaseParser):
                 escape = False
             self.pos += 1
         return self.definition[startPos:self.pos]
-
     def _parse_literal(self) -> ASTLiteral:
         # -> integer-literal
         #  | character-literal
@@ -4660,20 +4659,35 @@ class DefinitionParser(BaseParser):
             return ASTBooleanLiteral(False)
         for regex in [float_literal_re, binary_literal_re, hex_literal_re,
                       integer_literal_re, octal_literal_re]:
-            pos = self.pos
+            start = self.pos
             if self.match(regex):
+                # consume builtin suffix letters like 'u', 'U', 'l', 'L', 'f', 'F'
                 while self.current_char in 'uUlLfF':
                     self.pos += 1
-                return ASTNumberLiteral(self.definition[pos:self.pos])
-
+                # user-defined-literal: an identifier immediately following the
+                # literal (e.g., 12_km, 1.0ms). If present, include it in the
+                # returned literal text.
+                if self.match(identifier_re):
+                    return ASTNumberLiteral(self.definition[start:self.pos])
+                return ASTNumberLiteral(self.definition[start:self.pos])
         string = self._parse_string()
         if string is not None:
+            # start position of the string literal
+            start = self.pos - len(string)
+            # ud-suffix after string literal: include if present
+            if self.match(identifier_re):
+                return ASTStringLiteral(self.definition[start:self.pos])
             return ASTStringLiteral(string)
-
         # character-literal
         if self.match(char_literal_re):
             prefix = self.last_match.group(1)  # may be None when no prefix
             data = self.last_match.group(2)
+            # start position of the char literal text
+            start = self.pos - len(self.last_match.group(0))
+            # ud-suffix after char literal: include if present
+            if self.match(identifier_re):
+                # represent char+suffix as a string literal for display purposes
+                return ASTStringLiteral(self.definition[start:self.pos])
             try:
                 return ASTCharLiteral(prefix, data)
             except UnicodeDecodeError as e:
@@ -4681,9 +4695,9 @@ class DefinitionParser(BaseParser):
             except UnsupportedMultiCharacterCharLiteral:
                 self.fail("Can not handle character literal"
                           " resulting in multiple decoded characters.")
-
         # TODO: user-defined lit
         return None
+        return None
 
     def _parse_fold_or_paren_expression(self) -> ASTExpression:
         # "(" expression ")"