{
  "django__django-16662": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-16662",
    "model_patch": "diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex a59f0c8dcb..421fc06771 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -175,7 +175,7 @@ class MigrationWriter:\n \n         # Sort imports by the package / module to be imported (the part after\n         # \"from\" in \"from ... import ...\" or after \"import\" in \"import ...\").\n-        sorted_imports = sorted(imports, key=lambda i: i.split()[1])\n+        sorted_imports = sorted(imports, key=lambda i: (i.startswith(\"from\"), i.split()[1]))\n         items[\"imports\"] = \"\\n\".join(sorted_imports) + \"\\n\" if imports else \"\"\n         if migration_imports:\n             items[\"imports\"] += ("
  },
  "django__django-16631": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-16631",
    "model_patch": "diff --git a/docs/ref/settings.txt b/docs/ref/settings.txt\nindex 41387886c0..2fe2b7e9a8 100644\n--- a/docs/ref/settings.txt\n+++ b/docs/ref/settings.txt\n@@ -2293,10 +2293,17 @@ passwords of users and key rotation will not affect them.\n \n .. setting:: SECRET_KEY_FALLBACKS\n \n-``SECRET_KEY_FALLBACKS``\n-------------------------\n-\n-Default: ``[]``\n+  In order to rotate your secret keys, set a new ``SECRET_KEY`` and move the\n+  previous value to the beginning of ``SECRET_KEY_FALLBACKS``. Some signing\n+  utilities and token generators in Django (for example, the password reset\n+  token generator and cookie signing) consult ``SECRET_KEY_FALLBACKS`` and\n+  can validate values signed with an earlier key. However, the default\n+  implementation of ``AbstractBaseUser.get_session_auth_hash()`` does *not*\n+  pass a secret to ``salted_hmac()`` and therefore relies only on the current\n+  ``SECRET_KEY``; rotating ``SECRET_KEY`` will invalidate existing session\n+  authentication hashes and log users out. Remove old values from the end of\n+  ``SECRET_KEY_FALLBACKS`` when you are ready to expire the tokens and signed\n+  values that do support fallbacks.\n \n A list of fallback secret keys for a particular Django installation. These are\n used to allow rotation of the ``SECRET_KEY``."
  },
  "django__django-14011": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-14011",
    "model_patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 14dab517c9..6758440afd 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -79,7 +79,7 @@ class WSGIServer(simple_server.WSGIServer):\n \n class ThreadedWSGIServer(socketserver.ThreadingMixIn, WSGIServer):\n     \"\"\"A threaded version of the WSGIServer\"\"\"\n-    daemon_threads = True\n+    daemon_threads = False\n \n \n class ServerHandler(simple_server.ServerHandler):"
  },
  "django__django-7530": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-7530",
    "model_patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex 0b39536f5b..e648880ef0 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -105,7 +105,7 @@ class Command(BaseCommand):\n                     # At least one model must be migrated to the database.\n                     router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)\n                     for app_label in consistency_check_labels\n-                    for model in apps.get_models(app_label)\n+                    for model in apps.get_app_config(app_label).get_models()\n             )):\n                 loader.check_consistent_history(connection)"
  },
  "sympy__sympy-24213": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "sympy__sympy-24213",
    "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex a436880c4b..5705c821c2 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -175,7 +175,7 @@ def _collect_factor_and_dimension(self, expr):\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = \\\n                     self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):\n                     raise ValueError(\n                         'Dimension of \"{}\" is {}, '\n                         'but it should be {}'.format("
  },
  "pytest-dev__pytest-7490": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "pytest-dev__pytest-7490",
    "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 335e10996..9fd15c70f 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -261,7 +261,12 @@ def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n     outcome = yield\n     rep = outcome.get_result()\n-    xfailed = item._store.get(xfailed_key, None)\n+    # Re-evaluate xfail marks to honor markers added during the call phase.\n+    if call.when == \"call\":\n+        xfailed = evaluate_xfail_marks(item)\n+        item._store[xfailed_key] = xfailed\n+    else:\n+        xfailed = item._store.get(xfailed_key, None)\n     # unittest special case, see setting of unexpectedsuccess_key\n     if unexpectedsuccess_key in item._store and rep.when == \"call\":\n         reason = item._store[unexpectedsuccess_key]"
  },
  "django__django-11179": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-11179",
    "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 92fe4affb9..f7c2d46787 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -260,7 +260,6 @@ class Collector:\n         self.data = {model: self.data[model] for model in sorted_models}\n \n     def delete(self):\n-        # sort instance collections\n         for model, instances in self.data.items():\n             self.data[model] = sorted(instances, key=attrgetter(\"pk\"))\n \n@@ -277,6 +276,9 @@ class Collector:\n             if self.can_fast_delete(instance):\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n+                # Clear the in-memory primary key after a successful DB delete so the\n+                # instance accurately reflects that it no longer exists.\n+                instance.pk = None\n                 return count, {model._meta.label: count}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n@@ -310,6 +312,18 @@ class Collector:\n                 count = query.delete_batch(pk_list, self.using)\n                 deleted_counter[model._meta.label] += count\n \n+                if not model._meta.auto_created:\n+                    for obj in instances:\n+                        signals.post_delete.send(\n+                            sender=model, instance=obj, using=self.using\n+                        )\n+            # delete instances\n+            for model, instances in self.data.items():\n+                query = sql.DeleteQuery(model)\n+                pk_list = [obj.pk for obj in instances]\n+                count = query.delete_batch(pk_list, self.using)\n+                deleted_counter[model._meta.label] += count\n+\n                 if not model._meta.auto_created:\n                     for obj in instances:\n                         signals.post_delete.send("
  },
  "psf__requests-2931": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "psf__requests-2931",
    "model_patch": "diff --git a/requests/utils.py b/requests/utils.py\nindex 132cd2b..4c4fbed 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -666,23 +666,6 @@ def prepend_scheme_if_needed(url, new_scheme):\n     # and path if urlparse decided there was no netloc.\n     if not netloc:\n         netloc, path = path, netloc\n-\n-    return urlunparse((scheme, netloc, path, params, query, fragment))\n-\n-\n-def get_auth_from_url(url):\n-    \"\"\"Given a url with authentication components, extract them into a tuple of\n-    username,password.\"\"\"\n-    parsed = urlparse(url)\n-\n-    try:\n-        auth = (unquote(parsed.username), unquote(parsed.password))\n-    except (AttributeError, TypeError):\n-        auth = ('', '')\n-\n-    return auth\n-\n-\n def to_native_string(string, encoding='ascii'):\n     \"\"\"\n     Given a string object, regardless of type, returns a representation of that\n@@ -697,7 +680,17 @@ def to_native_string(string, encoding='ascii'):\n         if is_py2:\n             out = string.encode(encoding)\n         else:\n-            out = string.decode(encoding)\n+            # If bytes were passed on Py3, try decoding with the provided\n+            # encoding, but fall back to utf-8 if that fails.\n+            if isinstance(string, bytes):\n+                try:\n+                    out = string.decode(encoding)\n+                except UnicodeDecodeError:\n+                    out = string.decode('utf-8')\n+            else:\n+                out = string.decode(encoding)\n+\n+\n \n     return out"
  },
  "psf__requests-1921": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "psf__requests-1921",
    "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex cd232e6..289b3a4 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -376,7 +376,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n                 query = query.encode('utf-8')\n             if isinstance(fragment, str):\n                 fragment = fragment.encode('utf-8')\n-\n+            self.headers = CaseInsensitiveDict()\n         enc_params = self._encode_params(params)\n         if enc_params:\n             if query:\n@@ -391,7 +391,11 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         \"\"\"Prepares the given HTTP headers.\"\"\"\n \n         if headers:\n-            self.headers = CaseInsensitiveDict((to_native_string(name), value) for name, value in headers.items())\n+            self.headers = CaseInsensitiveDict(\n+                (to_native_string(name), value)\n+                for name, value in headers.items()\n+                if value is not None\n+            )\n         else:\n             self.headers = CaseInsensitiveDict()"
  },
  "scikit-learn__scikit-learn-26323": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "scikit-learn__scikit-learn-26323",
    "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 4eddd12b1..22304031a 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -248,7 +248,6 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         self.transformer_weights = transformer_weights\n         self.verbose = verbose\n         self.verbose_feature_names_out = verbose_feature_names_out\n-\n     @property\n     def _transformers(self):\n         \"\"\"\n@@ -303,6 +302,14 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n \n+        # Also set output for the remainder estimator if it is an estimator\n+        if self.remainder not in {\"passthrough\", \"drop\"}:\n+            _safe_set_output(self.remainder, transform=transform)\n+\n+        return self\n+        for trans in transformers:\n+            _safe_set_output(trans, transform=transform)\n+\n         return self\n \n     def get_params(self, deep=True):"
  },
  "sphinx-doc__sphinx-9230": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "sphinx-doc__sphinx-9230",
    "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex d8cb75a5f..dc04ba238 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -44,7 +44,7 @@ _enumerated_list_regex = re.compile(\n     r'(?(paren)\\)|\\.)(\\s+\\S|\\s*$)')\n _token_regex = re.compile(\n     r\"(,\\sor\\s|\\sor\\s|\\sof\\s|:\\s|\\sto\\s|,\\sand\\s|\\sand\\s|,\\s\"\n-    r\"|[{]|[}]\"\n+    r\"|[{]|[}]|[(]|[)]\"\n     r'|\"(?:\\\\\"|[^\"])*\"'\n     r\"|'(?:\\\\'|[^'])*')\"\n )"
  },
  "django__django-13810": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-13810",
    "model_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 8e8c3da06a..b8d46c1128 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -37,8 +37,6 @@ class BaseHandler:\n         handler = convert_exception_to_response(get_response)\n         handler_is_async = is_async\n         for middleware_path in reversed(settings.MIDDLEWARE):\n-            middleware = import_string(middleware_path)\n-            middleware_can_sync = getattr(middleware, 'sync_capable', True)\n             middleware_can_async = getattr(middleware, 'async_capable', False)\n             if not middleware_can_sync and not middleware_can_async:\n                 raise RuntimeError(\n@@ -51,11 +49,11 @@ class BaseHandler:\n                 middleware_is_async = middleware_can_async\n             try:\n                 # Adapt handler, if needed.\n-                handler = self.adapt_method_mode(\n+                adapted_handler = self.adapt_method_mode(\n                     middleware_is_async, handler, handler_is_async,\n                     debug=settings.DEBUG, name='middleware %s' % middleware_path,\n                 )\n-                mw_instance = middleware(handler)\n+                mw_instance = middleware(adapted_handler)\n             except MiddlewareNotUsed as exc:\n                 if settings.DEBUG:\n                     if str(exc):"
  },
  "django__django-10973": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-10973",
    "model_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 7fca6eff30..0d24f1fc13 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -19,7 +19,6 @@ class DatabaseClient(BaseDatabaseClient):\n     @classmethod\n     def runshell_db(cls, conn_params):\n         args = [cls.executable_name]\n-\n         host = conn_params.get('host', '')\n         port = conn_params.get('port', '')\n         dbname = conn_params.get('database', '')\n@@ -37,35 +36,21 @@ class DatabaseClient(BaseDatabaseClient):\n         temp_pgpass = None\n         sigint_handler = signal.getsignal(signal.SIGINT)\n         try:\n+            env = os.environ.copy()\n             if passwd:\n-                # Create temporary .pgpass file.\n-                temp_pgpass = NamedTemporaryFile(mode='w+')\n-                try:\n-                    print(\n-                        _escape_pgpass(host) or '*',\n-                        str(port) or '*',\n-                        _escape_pgpass(dbname) or '*',\n-                        _escape_pgpass(user) or '*',\n-                        _escape_pgpass(passwd),\n-                        file=temp_pgpass,\n-                        sep=':',\n-                        flush=True,\n-                    )\n-                    os.environ['PGPASSFILE'] = temp_pgpass.name\n-                except UnicodeEncodeError:\n-                    # If the current locale can't encode the data, let the\n-                    # user input the password manually.\n-                    pass\n+                # Pass the password via PGPASSWORD environment variable to avoid\n+                # creating a temporary .pgpass file.\n+                env['PGPASSWORD'] = passwd\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n-            subprocess.check_call(args)\n+            subprocess.run(args, env=env, check=True)\n         finally:\n             # Restore the original SIGINT handler.\n             signal.signal(signal.SIGINT, sigint_handler)\n             if temp_pgpass:\n                 temp_pgpass.close()\n-                if 'PGPASSFILE' in os.environ:  # unit tests need cleanup\n-                    del os.environ['PGPASSFILE']\n+            if 'PGPASSFILE' in os.environ:  # unit tests need cleanup\n+                del os.environ['PGPASSFILE']\n \n     def runshell(self):\n         DatabaseClient.runshell_db(self.connection.get_connection_params())"
  },
  "django__django-13297": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-13297",
    "model_patch": "diff --git a/django/views/generic/base.py b/django/views/generic/base.py\nindex ea5baca08d..1412790b15 100644\n--- a/django/views/generic/base.py\n+++ b/django/views/generic/base.py\n@@ -11,7 +11,7 @@ from django.template.response import TemplateResponse\n from django.urls import reverse\n from django.utils.decorators import classonlymethod\n from django.utils.deprecation import RemovedInDjango40Warning\n-from django.utils.functional import SimpleLazyObject\n+from django.utils.functional import SimpleLazyObject, empty\n \n logger = logging.getLogger('django.request')\n \n@@ -27,15 +27,15 @@ class ContextMixin:\n         kwargs.setdefault('view', self)\n         if self.extra_context is not None:\n             kwargs.update(self.extra_context)\n+        # Unwrap any SimpleLazyObject URL kwargs (wrapped for deprecation warning)\n+        for key, value in list(kwargs.items()):\n+            if isinstance(value, SimpleLazyObject):\n+                # Force evaluation of the lazy object to obtain the wrapped value\n+                if getattr(value, '_wrapped', empty) is empty:\n+                    value._setup()\n+                kwargs[key] = value._wrapped\n         return kwargs\n \n-\n-class View:\n-    \"\"\"\n-    Intentionally simple parent class for all views. Only implements\n-    dispatch-by-method and simple sanity checking.\n-    \"\"\"\n-\n     http_method_names = ['get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'trace']\n \n     def __init__(self, **kwargs):"
  },
  "sphinx-doc__sphinx-7590": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "sphinx-doc__sphinx-7590",
    "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex fe52d881d..63d16b0b9 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4642,7 +4642,6 @@ class DefinitionParser(BaseParser):\n                 escape = False\n             self.pos += 1\n         return self.definition[startPos:self.pos]\n-\n     def _parse_literal(self) -> ASTLiteral:\n         # -> integer-literal\n         #  | character-literal\n@@ -4660,20 +4659,35 @@ class DefinitionParser(BaseParser):\n             return ASTBooleanLiteral(False)\n         for regex in [float_literal_re, binary_literal_re, hex_literal_re,\n                       integer_literal_re, octal_literal_re]:\n-            pos = self.pos\n+            start = self.pos\n             if self.match(regex):\n+                # consume builtin suffix letters like 'u', 'U', 'l', 'L', 'f', 'F'\n                 while self.current_char in 'uUlLfF':\n                     self.pos += 1\n-                return ASTNumberLiteral(self.definition[pos:self.pos])\n-\n+                # user-defined-literal: an identifier immediately following the\n+                # literal (e.g., 12_km, 1.0ms). If present, include it in the\n+                # returned literal text.\n+                if self.match(identifier_re):\n+                    return ASTNumberLiteral(self.definition[start:self.pos])\n+                return ASTNumberLiteral(self.definition[start:self.pos])\n         string = self._parse_string()\n         if string is not None:\n+            # start position of the string literal\n+            start = self.pos - len(string)\n+            # ud-suffix after string literal: include if present\n+            if self.match(identifier_re):\n+                return ASTStringLiteral(self.definition[start:self.pos])\n             return ASTStringLiteral(string)\n-\n         # character-literal\n         if self.match(char_literal_re):\n             prefix = self.last_match.group(1)  # may be None when no prefix\n             data = self.last_match.group(2)\n+            # start position of the char literal text\n+            start = self.pos - len(self.last_match.group(0))\n+            # ud-suffix after char literal: include if present\n+            if self.match(identifier_re):\n+                # represent char+suffix as a string literal for display purposes\n+                return ASTStringLiteral(self.definition[start:self.pos])\n             try:\n                 return ASTCharLiteral(prefix, data)\n             except UnicodeDecodeError as e:\n@@ -4681,9 +4695,9 @@ class DefinitionParser(BaseParser):\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n-\n         # TODO: user-defined lit\n         return None\n+        return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         # \"(\" expression \")\""
  },
  "django__django-12406": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-12406",
    "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex dafc11f995..999c72bdcd 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -3,21 +3,15 @@ Helper functions for creating Form classes from Django models\n and database field objects.\n \"\"\"\n \n-from itertools import chain\n-\n from django.core.exceptions import (\n     NON_FIELD_ERRORS, FieldError, ImproperlyConfigured, ValidationError,\n )\n from django.forms.fields import ChoiceField, Field\n from django.forms.forms import BaseForm, DeclarativeFieldsMetaclass\n-from django.forms.formsets import BaseFormSet, formset_factory\n-from django.forms.utils import ErrorList\n from django.forms.widgets import (\n-    HiddenInput, MultipleHiddenInput, SelectMultiple,\n+    HiddenInput, MultipleHiddenInput, SelectMultiple, RadioSelect,\n )\n from django.utils.text import capfirst, get_text_list\n-from django.utils.translation import gettext, gettext_lazy as _\n-\n __all__ = (\n     'ModelForm', 'BaseModelForm', 'model_to_dict', 'fields_for_model',\n     'ModelChoiceField', 'ModelMultipleChoiceField', 'ALL_FIELDS',\n@@ -1171,10 +1165,6 @@ class ModelChoiceIterator:\n         )\n \n \n-class ModelChoiceField(ChoiceField):\n-    \"\"\"A ChoiceField whose choices are a model QuerySet.\"\"\"\n-    # This class is a subclass of ChoiceField for purity, but it doesn't\n-    # actually use any of ChoiceField's implementation.\n     default_error_messages = {\n         'invalid_choice': _('Select a valid choice. That choice is not one of'\n                             ' the available choices.'),\n@@ -1190,6 +1180,21 @@ class ModelChoiceField(ChoiceField):\n         else:\n             self.empty_label = empty_label\n \n+        # Do not add an empty choice for RadioSelect widgets when the field is required.\n+        # Radio inputs already provide an unselected state; showing the \"---------\" option\n+        # is confusing and results in a pre-checked empty choice on new forms.\n+        if self.empty_label is not None and required and widget is not None:\n+            try:\n+                from django.forms.widgets import RadioSelect as _RadioSelect\n+            except Exception:\n+                _RadioSelect = None\n+            if _RadioSelect is not None and (isinstance(widget, _RadioSelect) or widget is _RadioSelect):\n+                self.empty_label = None\n+    # Radio inputs already provide an unselected state; showing the \"---------\" option\n+    # is confusing and results in a pre-checked empty choice on new forms.\n+    if self.empty_label is not None and required and widget is not None:\n+        if isinstance(widget, RadioSelect) or widget is RadioSelect:\n+            self.empty_label = None\n         # Call Field instead of ChoiceField __init__() because we don't need\n         # ChoiceField.__init__().\n         Field.__init__("
  },
  "sympy__sympy-17655": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "sympy__sympy-17655",
    "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 7c978c47be..6299266bd8 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -233,8 +233,6 @@ def __div__(self, divisor):\n     def __eq__(self, other):\n         if not isinstance(other, Point) or len(self.args) != len(other.args):\n             return False\n-        return self.args == other.args\n-\n     def __getitem__(self, key):\n         return self.args[key]\n \n@@ -254,10 +252,6 @@ def __mul__(self, factor):\n         =====\n \n         >>> from sympy.geometry.point import Point\n-\n-        When multiplying a Point by a floating point number,\n-        the coordinates of the Point will be changed to Floats:\n-\n         >>> Point(1, 2)*0.1\n         Point2D(0.1, 0.2)\n \n@@ -278,6 +272,17 @@ def __mul__(self, factor):\n         coords = [simplify(x*factor) for x in self.args]\n         return Point(coords, evaluate=False)\n \n+    def __rmul__(self, other):\n+        \"\"\"Right-hand multiplication: delegate to __mul__ so that\n+        number * Point behaves the same as Point * number.\"\"\"\n+        return self * other\n+        return self * other\n+\n+    def __rmul__(self, other):\n+        \"\"\"Right-hand multiplication: delegate to __mul__ so that\n+        number * Point behaves the same as Point * number.\"\"\"\n+        return self * other\n+\n     def __neg__(self):\n         \"\"\"Negate the point.\"\"\"\n         coords = [-x for x in self.args]"
  },
  "astropy__astropy-7166": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "astropy__astropy-7166",
    "model_patch": "diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py\nindex de3fb01d1..477f5e0a1 100644\n--- a/astropy/utils/misc.py\n+++ b/astropy/utils/misc.py\n@@ -528,7 +528,7 @@ class InheritDocstrings(type):\n                 not key.startswith('_'))\n \n         for key, val in dct.items():\n-            if (inspect.isfunction(val) and\n+            if ((inspect.isfunction(val) or inspect.isdatadescriptor(val)) and\n                 is_public_member(key) and\n                 val.__doc__ is None):\n                 for base in cls.__mro__[1:]:"
  },
  "django__django-14053": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-14053",
    "model_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 494890cc23..aa1d33a998 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -216,18 +216,26 @@ class HashedFilesMixin:\n         \"\"\"\n         # don't even dare to process the files if we're in dry run mode\n         if dry_run:\n-            return\n-\n-        # where to store the new paths\n-        hashed_files = {}\n-\n-        # build a list of adjustable files\n-        adjustable_paths = [\n-            path for path in paths\n-            if matches_patterns(path, self._patterns)\n-        ]\n-        # Do a single pass first. Post-process all files once, then repeat for\n-        # adjustable files.\n+          # Do a single pass first. Post-process all files once, then repeat for\n+          # adjustable files.\n+          yielded = set()\n+          for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n+              if name not in yielded:\n+                  yield name, hashed_name, processed\n+                  yielded.add(name)\n+\n+          paths = {path: paths[path] for path in adjustable_paths}\n+\n+          for i in range(self.max_post_process_passes):\n+              substitutions = False\n+              for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n+                  if name not in yielded:\n+                      yield name, hashed_name, processed\n+                      yielded.add(name)\n+                  substitutions = substitutions or subst\n+\n+              if not substitutions:\n+                  break\n         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n             yield name, hashed_name, processed"
  },
  "sphinx-doc__sphinx-9658": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "sphinx-doc__sphinx-9658",
    "model_patch": "diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\nindex 87707d48f..e295cd6d8 100644\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -191,6 +191,11 @@ def _restify_py37(cls: Optional[Type]) -> str:\n         return text\n     elif isinstance(cls, typing._SpecialForm):\n         return ':py:obj:`~%s.%s`' % (cls.__module__, cls._name)\n+    # Prefer a mocked object's explicit __display_name__ if present to avoid\n+    # empty __qualname__ producing outputs like \"torch.nn.\" instead of\n+    # \"torch.nn.Module\".\n+    elif getattr(cls, '__display_name__', None):\n+        return ':py:class:`%s`' % (cls.__display_name__)\n     elif hasattr(cls, '__qualname__'):\n         if cls.__module__ == 'typing':\n             return ':py:class:`~%s.%s`' % (cls.__module__, cls.__qualname__)"
  }
}